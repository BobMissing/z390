         TITLE 'Test DP instruction'
***********************************************************************
         MACRO
         XDUMP
         STMG  0,15,XREGS&SYSNDX   Save registers
         IPM   0                   Get CC and program mask
         ST    0,XCCPM&SYSNDX      Save CC and program mask
         CNOP  0,4                 Align on fullword
         BAS   R1,*+8*16+4+4       Branch around parm list
XREGS&SYSNDX   DS    32F           Registers
XCCPM&SYSNDX   DS    F             Condition code and program mask
         LARL  15,DUMPREGS         Dump routine
         BASR  14,15               Dump the registers and CC, pgm mask
         LARL  15,XREGS&SYSNDX     Saved registers and CC, pgm mask
         L     0,128(,15)          Saved CC and program mask
         SPM   0                   Restore CC and program mask
         LMG   0,15,0(15)          Restore registers
         MEND
***********************************************************************
         EJECT ,
***********************************************************************
*
* Module: TDP
*
* Function: Test DP instruction.
*
* Input:
*
*   R1 --> word --> halfword || EBCDIC text (standard PARM=value)
*
*      Allowable values: A print all data
*                        S print summary data; default
*
***********************************************************************
*
TDP      CSECT
TDP      AMODE 31
TDP      RMODE 31
         STM   R14,R12,12(R13)     Save caller's registers
         LLGTR R15,R15             Insure bit 32 is zero
         LR    R12,R15             R12 = base register
         USING TDP,R12             Establish addressability
         LARL  R11,Data            Data area
         Using Data,R11            Overlay data area forever
*
         LA    R14,SA              Usable save area
         ST    R14,8(,R13)         Chain
         ST    R13,4(,R14)               save areas
         LR    R13,R14             R13 --> current save area
*
***********************************************************************
*        Get PARM= data and initialize test counters
***********************************************************************
*
         BAS   R14,GetParm         Get PARM= info
*
         XC    DP01ST,DP01ST       Zero all test counts
         MVC   DP02ST,DP01ST
         MVC   DP02ST,DP01ST
         MVC   DP03ST,DP01ST
         MVC   DP04ST,DP01ST
         MVC   DP05ST,DP01ST
         MVC   DP06ST,DP01ST
*
***********************************************************************
*         DP op1,op2 tests
*
*         1. Dividend is zero. No errors.
*         2. Dividend is non-zero. No errors.
*         3. Quotient too long to fit in op1 field. S0CB. (S0CA)
*         4. Invalid data in one or both operands. S0C7.
*         5. Op2 too long or op2 len > op1 len. S0C6.
*         6. Second operand is zero. S0CB.
***********************************************************************
*
         WTO   MF=(E,WTOStart)      Start message
*
         LARL  R15,T01              First test
         BASR  R14,R15              Perform test
*
         LARL  R15,T02              Second test
         BASR  R14,R15              Perform test
*
         LARL  R15,T03              Third test
         BASR  R14,R15              Perform test
*
         LARL  R15,T04              Fourth test
         BASR  R14,R15              Perform test
*
         LARL  R15,T05              Fifth test
         BASR  R14,R15              Perform test
*
         LARL  R15,T06              Sixth test
         BASR  R14,R15              Perform test
*
***********************************************************************
*        Print totals
***********************************************************************
*
TDPDone  DS    0H
*
         LARL  R15,PrtTot          Print totals for all tests
         BASR  R14,R15
*
***********************************************************************
*        All done
***********************************************************************
*
         WTO   MF=(E,WTOEnd)       End message
*
         L     R13,4(,R13)         Caller's save area                                                               
         LM    R14,R12,12(R13)     Restore caller's registers   
         SR    R15,R15             Set return code to zero      
         BR    R14                 Return to caller
*
***********************************************************************
*
* Routine: GetParm
*
*        Get information from PARM=xxx
*
***********************************************************************
*
GetParm  DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
*
*        Only two values allowed:
*        PARM=A  print all data; includes summary data
*        PARM=S  print summary data
*
*        Default is PARM=S
*
         MVI   WRptType,C'S'       Default is print summary
*
         L     R2,0(,R1)           R2 --> PARM= info
         LH    R3,0(,R2)           Length of info
         CHI   R3,1                Should only be one value
         BNE   GPDone              Use default if not
         CLI   2(R2),C'A'          Print all data?
         BNE   GPDone              No; use default
         MVI   WRptType,C'A'       Yes; set for all data
GPDone   DS    0H
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller                      
*                                                               
         LTORG                                                  
*
         DROP  R11,R12             End addressability
*
         TITLE 'Test Subroutines'
*
***********************************************************************
*
* Routine: T01
*
*        DP   op1,op2  No error; dividend is zero.
*
*----------------------------------------------------------------------
*
* WARNING  WARNING  WARNING  WARNING  WARNING  WARNING  WARNING WARNING
*
* The pz390 code does not set the sign of the quotient and remainder
* correctly when op1 is zero and op2 is not zero! For this case,
* the signs of the quotient and remainder are both set to C hex.
*
* The Principles of Operation says that "the sign of the quotient is
* determined by the rules of algebra from the dividend and divisor
* signs. The sign of the remainder has the same value as the dividend
* sign. These rules hold even when the quotient or remainder is zero."
*
* Looking at the table of (quotient,remainder) values and signs below,
* we see that the pz390 code
*
*     sets incorrect sign of the remainder in the 1st case
*     sets incorrect signs of both quotient and remainder in the 2nd
*     sets incorrect sign of the quotient in the 3rd
*
* so the pz390 code is wrong in 12 of the 16 cases.
*
* Due to these errors in pz390, two-thirds (48) of the 64 test cases
* will fail due to one of quotient, remainder not having the
* correct sign.
*
* To ensure that the 48 errors are, indeed, as described here, run
* this program with PARM('A') and look at the output. Search for
* "1*" (all errors have an asterick in column 2 of the first line
* of output). You will see something like
*
*   1*                           00000B / 9B
*             AnsAct 000C0C                            AnsExp 000C0D
*             CCAct 3  CCExp 3
*   ...
*   1*                           00000B / 9A
*             AnsAct 000C0C                            AnsExp 000D0D
*             CCAct 3  CCExp 3
*   ...
*   1*                           00000A / 9B
*             AnsAct 000C0C                            AnsExp 000D0C
*             CCAct 3  CCExp 3
*
* Three errors are shown. Each corresponds to one of the three cases
* described above.
*
* The first line of each error shows the division being tested. The
* divisions are 0- / 9-, 0- / 9+, and 0+ / 9-, respectively. The
* second line of each shows the actual answer (quotient,remainder),
* and the expected answer (quotient,remainder). The third line shows
* the actual and expected condition codes. Note that the actual and
* expected answers differ as described above.
*
* All 48 occurrences of "1*" are similar.
*
* If you want to change the 48 errors to successes so that the
* test program does not have any errors, search for "<--"
* occurrences in the parameter lists following label DP1PLP. 
* You will find 48 matches. Make the change indicated by the
* two characters following the search string. For example, the
* first occurrence is the first list:
*
*  *
*  *        op1 len 3 / op2 len 1
*  *
*           DC    A(DP1_OP1_L3_V_N_1)         op1 value 0-
*           DC    A(DP1_OP2_L1_V_N_3)         op2 value nz-
*           DC    A(DP1EV1PN)        <-- PP   expected quotient,remaind
*           DC    A(3)                        expected CC
*
* Change the "PN" to "PP", making the 3rd parameter DP1EVPP.
*
* Do this for all 48 matches.
*
* A future RPI will address these issues.
*
*----------------------------------------------------------------------
*
*        All tests should complete with the condition code unchanged
*        and have sign nibbles for quotient and remainder set
*        appropriately.
*
*        Four groups of tests. Each group corresponds to a row in the
*        following table:
*
*            op1 length    op2 length
*            ----------    ----------
*                 3             1
*                 7             3
*                11             5
*                16             8
*
*            operand 1 sign nibbles are A,B,C,D
*            operand 2 sign nibbles are A,B,C,D
*        
*        Each group has 4 op1 zero values and 4 op2 non-zero values,
*        for a total of
*
*          4 * 4 = 16
*
*        test cases.
*
*        Total number of test cases = 4 * 16 = 64.
*
***********************************************************************
*
*        The (quotient,remainder) values and signs are shown in the
*        following table:
*
*            op1 (dividend)  op2 (divisor)  quotient  remainder
*            --------------  -------------  --------  ---------
*                   0-            < 0          0C        0D
*                   0-            > 0          0D        0D
*                   0+            < 0          0D        0C
*                   0+            > 0          0C        0C
*
***********************************************************************
*
*        Total number of failures, total number of successes,
*        stored in common storage fields DP01#F, DP01#S,
*        respectively.
*
***********************************************************************
*
         USING Data,R11            R11 --> data always
T01      DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
         LR    R12,R15             R12 = base register
         USING T01,R12             Establish addressability
*
         LM    R1,R3,DP1PLP        R1 --> 1st parameter list
*                                  R2  =  len one parameter list
*                                  R3 --> last parameter list
*
         SR    R9,R9               R9 = number of tests that fail
         LR    R10,R9              R10 = number of tests that succeed
*
         MVI   WT#,C'1'            Test number for print routine
*
         MVI   WExpABCC,X'FF'      No abends are expected
*
T01100   DS    0H
         BAS   R14,T01Div          Perform one divide
         LTR   R15,R15             Test successful?
         BZ    T01200              Yes; count success
         AHI   R9,1                No; count failure
         B     T01300              Continue
T01200   DS    0H
         AHI   R10,1               Count success
T01300   DS    0H
         LARL  R15,PrtRes          Print routine
         BASR  R14,R15             Print results
         BXLE  R1,R2,T01100        Process all parameter lists
*
         STM   R9,R10,DP01ST       Save # failures, # successes
*
         L     R13,4(,R13)         Caller's save area
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
*
***********************************************************************
*
* Routine: T01Div
*
*        Perform one DP test
*
*        Input:
*
*            R1 --> parameter list
*                   +0 --> value for op1; 1st byte len code
*                   +4 --> value for op2; 1st byte len code
*                   +8 --> expected quotient,remainder; 16 bytes
*                   +C  =  expected CC (always 3)
*
*        Output:
*
*            WErr    report error indicator; ' ' no error; '*' error
*
*            WCC     condition code after instruction executed
*                    X'FF' in leftmost byte if instruction not executed
*
*            WResult set to result; left-justified in 16-byte field
*                    X'FF' in leftmost byte if instruction not executed
*
*        Return code: 0 test succeeded
*                     4 test failed
*
***********************************************************************
*
T01Div   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
*
         LM    R2,R4,0(R1)         R2 --> op1 value
*                                  R3 --> op2 value
*                                  R4 --> expected quot,rem; 16 bytes
         L     R0,12(,R1)          R0  =  expected CC
*
         MVI   WErr,C' '           No failure
         MVI   WCC,X'FF'           No CC; instruction not executed
         MVI   WResult,X'FF'       No result; instruction not executed
*
         SR    R5,R5               Prepare to get op1 len code
         SR    R6,R6               Prepare to get op2 len code
         IC    R5,0(,R2)           op1 len code; 0 - 15
         SLL   R5,4                Move left one nibble
         IC    R6,0(,R3)           op2 len code; 0 - 15
         OR    R5,R6               R5 = op1LC || op2LC
         IC    R5,T01TT(R5)        Get branch table index
         SLL   R5,2                Convert to offset
         TM    *,X'91'             Set CC 3
         B     T01DivBT(R5)        Branch to appropriate code
T01DivBT DS    0H
         B     T01DivER            Skip; invalid (op1 len, op2 len)
         B     T01Div_3_1          op1 len 3, op2 len 1
         B     T01Div_7_3          op1 len 7, op2 len 5
         B     T01Div_11_5         op1 len 10, op2 len 4
         B     T01Div_16_8         op1 len 16, op2 len 7
*
T01Div_3_1     DS    0H
         MVC   W1L3,1(R2)          Copy op1 value to work
         MVC   W2L1,1(R3)          Copy op2 value to work
         LA    R5,W1L3             R5 --> result
         LA    R6,L'W1L3-1         R6  =  len code of result
         DP    W1L3,W2L1           Do the multiplication
         B     T01DivCR            Check the result
T01Div_7_3     DS    0H
         MVC   W1L7,1(R2)          Copy op1 value to work
         MVC   W2L3,1(R3)          Copy op2 value to work
         LA    R5,W1L7             R5 --> result
         LA    R6,L'W1L7-1         R6  =  len code of result
         DP    W1L7,W2L3           Do the multiplication
         B     T01DivCR            Check the result
T01Div_11_5    DS    0H
         MVC   W1L11,1(R2)         Copy op1 value to work
         MVC   W2L5,1(R3)          Copy op2 value to work
         LA    R5,W1L11            R5 --> result
         LA    R6,L'W1L11-1        R6  =  len code of result
         DP    W1L11,W2L5          Do the multiplication
         B     T01DivCR            Check the result
T01Div_16_8    DS    0H
         MVC   W1L16,1(R2)         Copy op1 value to work
         MVC   W2L8,1(R3)          Copy op2 value to work
         LA    R5,W1L16            R5 --> result
         LA    R6,L'W1L16-1        R6  =  len code of result
         DP    W1L16,W2L8          Do the multiplication
         B     T01DivCR            Check the result
*
T01DivER DS    0H
         LA    R15,16              Invalid op1,op2 length pair
         B     T01DivDone          Done
T01DivCR DS    0H
         IPM   R15                 Get CC, Pgm Mask
         SRL   R15,28              Isolate CC
         ST    R15,WCC             Save in print work area
         EX    R6,T01MVC           Copy result to print work area
         BAS   R14,T01CkRs         Check result; sets R15
T01DivDone     DS    0H
         LTR   R15,R15             Error or check failed?
         BZ    T01DivExit          No; just exit
         MVI   WErr,C'*'           Yes; set error indicator
T01DivExit     DS    0H
         L     R13,4(,R13)         Caller's save area
         L     R14,12(,R13)        Restore caller's registers
         LM    R0,R12,20(R13)      ... except for R15
         BR    R14                 Return to caller
*
T01MVC   MVC   WResult(*-*),0(R5)  Copy result to print work area
*
***********************************************************************
*
* Routine: T01CkRs
*
*        Check result
*
*        Input:
*
*          R0  =  expected CC
*          R15 =  actual CC
*          R5 --> op1
*          R6  =  len code of op1
*          R4 --> 16 byte expected result
*
*        Return code: 0 Test succeeded
*                     4 Test failed
*
***********************************************************************
*
T01CkRs  DS    0H
         CR    R15,R0              Actual CC = expected CC?
         BNE   T01F                Failure if not equal
         LA    R15,15(,R4)         Last byte of expected result
         SR    R15,R6              R15 --> op1 expected result
         EX    R6,T01CLC           op1 : expected
         BE    T01S                Success if equal
T01F     DS    0H
         LA    R15,4               Test failed
         B     T01D                Done
T01S     DS    0H
         SR    R15,R15             Test succeeded
*NSI     B     T01D                Done
T01D     DS    0H
         BR    R14                 Return
*
T01CLC   CLC   0(*-*,R5),0(R15)    op1 : expected result
*
***********************************************************************
*        Convert byte X'op1LC || op2LC' to branch table index
***********************************************************************
T01TT    DC    256AL1(0)           Translate table
         ORG   T01TT+X'20'         op1 len code 2, op2 len code 0
         DC    AL1(1)
         ORG   T01TT+X'62'         op1 len code 6, op2 len code 2
         DC    AL1(2)
         ORG   T01TT+X'A4'         op1 len code 10, op2 len code 4
         DC    AL1(3)
         ORG   T01TT+X'F7'         op1 len code 15, op2 len code 7
         DC    AL1(4)
         ORG   ,
*
         LTORG
*
***********************************************************************
*        Parameter lists for all tests
***********************************************************************
*
DP1PLP   DC    A(DP1PLP1,16,DP1PLPN)       1st plist, len 1, last plist
*
DP1PLP1  DS    0A                          first parameter list
***********************************************************************
*        zero- / nz- = (zero+,zero-)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
         DC    A(DP1_OP1_L3_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP1EV1PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP1EV1PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP1EV1PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP1EV1PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
         DC    A(DP1_OP1_L7_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP1EV2PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP1EV2PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP1EV2PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP1EV2PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
         DC    A(DP1_OP1_L11_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP1EV3PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP1EV3PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP1EV3PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP1EV3PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
         DC    A(DP1_OP1_L16_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP1EV4PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP1EV4PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP1EV4PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP1EV4PN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*        zero- / nz+ = (zero-,zero-)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
         DC    A(DP1_OP1_L3_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP1EV1NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP1EV1NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP1EV1NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP1EV1NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
         DC    A(DP1_OP1_L7_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP1EV2NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_N_1)         op1 value 0-
         DC    A(DP1_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP1EV2NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP1EV2NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_N_2)         op1 value 0-
         DC    A(DP1_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP1EV2NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
         DC    A(DP1_OP1_L11_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP1EV3NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP1EV3NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP1EV3NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP1EV3NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
         DC    A(DP1_OP1_L16_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP1EV4NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_N_1)        op1 value 0-
         DC    A(DP1_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP1EV4NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP1EV4NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_N_2)        op1 value 0-
         DC    A(DP1_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP1EV4NN)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*        zero+ / nz- = (zero-,zero+)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
         DC    A(DP1_OP1_L3_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP1EV1NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP1EV1NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP1EV1NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP1EV1NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
         DC    A(DP1_OP1_L7_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP1EV2NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP1EV2NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP1EV2NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP1EV2NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
         DC    A(DP1_OP1_L11_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP1EV3NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP1EV3NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP1EV3NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP1EV3NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
         DC    A(DP1_OP1_L16_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP1EV4NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP1EV4NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP1EV4NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP1EV4NP)        <-- PP   expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*        zero+ / nz+ = (zero+,zero+)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
         DC    A(DP1_OP1_L3_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP1EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP1EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP1EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L3_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP1EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
         DC    A(DP1_OP1_L7_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP1EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_P_1)         op1 value 0+
         DC    A(DP1_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP1EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP1EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L7_V_P_2)         op1 value 0+
         DC    A(DP1_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP1EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
         DC    A(DP1_OP1_L11_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP1EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP1EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP1EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L11_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP1EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
         DC    A(DP1_OP1_L16_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP1EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_P_1)        op1 value 0+
         DC    A(DP1_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP1EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP1EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP1_OP1_L16_V_P_2)        op1 value 0+
         DC    A(DP1_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP1EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
DP1PLPN  EQU   *-16,16                     Last parameter

***********************************************************************
*        Values for op1 and op2
***********************************************************************
*
DP1_OP1_L3_V_N_1 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00000B'         Value
*
DP1_OP1_L3_V_N_2 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00000D'         Value
*
DP1_OP1_L3_V_P_1 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00000A'         Value
*
DP1_OP1_L3_V_P_2 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00000C'         Value
*
*----------------------------------------------------------------------
*
DP1_OP1_L7_V_N_1 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000000000000B' Value
*
DP1_OP1_L7_V_N_2 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000000000000D' Value
*
DP1_OP1_L7_V_P_1 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000000000000A' Value
*
DP1_OP1_L7_V_P_2 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000000000000C' Value
*
*----------------------------------------------------------------------
*
DP1_OP1_L11_V_N_1 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'000000000000000000000B'    Value
*
DP1_OP1_L11_V_N_2 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'000000000000000000000D'    Value
*
DP1_OP1_L11_V_P_1 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'000000000000000000000A'    Value
*
DP1_OP1_L11_V_P_2 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'000000000000000000000C'    Value
*
*----------------------------------------------------------------------
*
DP1_OP1_L16_V_N_1 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000000000000000000000B'  Value
*
DP1_OP1_L16_V_N_2 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000000000000000000000D'  Value
*
DP1_OP1_L16_V_P_1 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000000000000000000000A'  Value
*
DP1_OP1_L16_V_P_2 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000000000000000000000C'  Value
*
***********************************************************************
*
DP1_OP2_L1_V_N_1 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'0B'             Value
*
DP1_OP2_L1_V_N_2 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'0D'             Value
*
DP1_OP2_L1_V_N_3 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'9B'             Value
*
DP1_OP2_L1_V_N_4 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'9D'             Value
*
DP1_OP2_L1_V_P_1 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'0A'             Value
*
DP1_OP2_L1_V_P_2 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'0C'             Value
*
DP1_OP2_L1_V_P_3 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'9A'             Value
*
DP1_OP2_L1_V_P_4 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'9C'             Value
*
*----------------------------------------------------------------------
*
DP1_OP2_L3_V_N_3 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'99999B'         Value
*
DP1_OP2_L3_V_N_4 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'99999D'         Value
*
DP1_OP2_L3_V_P_3 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'99999A'         Value
*
DP1_OP2_L3_V_P_4 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'99999C'         Value
*
*----------------------------------------------------------------------
*
DP1_OP2_L5_V_N_3 DS    0X                  op2 len 7 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'999999999B'     Value
*
DP1_OP2_L5_V_N_4 DS    0X                  op2 len 7 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'999999999D'     Value
*
DP1_OP2_L5_V_P_3 DS    0X                  op2 len 7 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'999999999A'     Value
*
DP1_OP2_L5_V_P_4 DS    0X                  op2 len 7 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'999999999C'     Value
*
*----------------------------------------------------------------------
*
DP1_OP2_L8_V_N_3 DS    0X                  op2 len 11 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'999999999999999B'   Value
*
DP1_OP2_L8_V_N_4 DS    0X                  op2 len 11 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'999999999999999D'   Value
*
DP1_OP2_L8_V_P_3 DS    0X                  op2 len 11 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'999999999999999A'   Value
*
DP1_OP2_L8_V_P_4 DS    0X                  op2 len 11 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'999999999999999C'   Value
*
***********************************************************************
*
***********************************************************************
*        Expected values
***********************************************************************
*        op1 len 3, op2 len 1
*
*        0+ / nz-
*
DP1EV1PN DC    XL16'000C0D'
*
*        0- / nz-
*
DP1EV1NN DC    XL16'000D0D'
*
*        0- / nz+
*
DP1EV1NP DC    XL16'000D0C'
*
*        0+ / nz+
*
DP1EV1PP DC    XL16'000C0C'
*
***********************************************************************
*        op1 len 7, op2 len 3
*
*        0+ / nz-
*
DP1EV2PN DC    XL16'0000000C00000D'
*
*        0- / nz-
*
DP1EV2NN DC    XL16'0000000D00000D'
*
*        0- / nz+
*
DP1EV2NP DC    XL16'0000000D00000C'
*
*        0+ / nz+
*
DP1EV2PP DC    XL16'0000000C00000C'
*
***********************************************************************
*        op1 len 11, op2 len 5
*
*        0+ / nz-
*
DP1EV3PN DC    XL16'00000000000C000000000D'
*
*        0- / nz-
*
DP1EV3NN DC    XL16'00000000000D000000000D'
*
*        0- / nz+
*
DP1EV3NP DC    XL16'00000000000D000000000C'
*
*        0+ / nz+
*
DP1EV3PP DC    XL16'00000000000C000000000C'
*
***********************************************************************
*        op1 len 16, op2 len 8
*
*        0+ / nz-
*
DP1EV4PN DC    XL16'000000000000000C000000000000000D'
*
*        0- / nz-
*
DP1EV4NN DC    XL16'000000000000000D000000000000000D'
*
*        0- / nz+
*
DP1EV4NP DC    XL16'000000000000000D000000000000000C'
*
*        0+ / nz+
*
DP1EV4PP DC    XL16'000000000000000C000000000000000C'
*
         DROP  R11,R12             End addressability
*
***********************************************************************
*
* Routine: T02
*
*        DP   op1,op2  No error; op1 and op2 are both non-zero.
*
*----------------------------------------------------------------------
*
* WARNING  WARNING  WARNING  WARNING  WARNING  WARNING  WARNING WARNING
*
* The pz390 code does not set the sign of the quotient and remainder
* correctly when op1 is zero and op2 is not zero! For this case,
* the signs of the quotient and remainder are both set to C hex.
* The Principles of Operation says that
*
*     the sign of the quotient is determined by the rules of
*     algebra from the dividend and divisor signs. The sign
*     of the remainder has the same value as the dividend
*     sign. These rules hold even when the quotient or
*     remainder is zero.
*
* When op1 and op2 are both non-zero and the remainder is non-zero,
* the sign of the remainder is set correctly.
*
* When op1 and op2 are both non-zero and the remainder is zero, the
* sign of the remainder is NOT set correctly if op1 (the dividend)
* is negative. The sign of the remainder is set to C hex; it should
* be D hex.
*
* When op1 and op2 are both non-zero and the quotient is zero, the
* sign of the quotient is NOT set correctly if op1 (the dividend) and
* op2 (the divisor) have opposite signs. The sign of the quotient is
* set to C hex; it should be D hex.
*
* There are 32 test cases where the remainder is zero and has the
* wrong sign.
*
* There are 32 test cases where the quotient is zero and has the
* wrong sign.
*
* See the comments in routine T01 where similar errors were shown
* in the output report.
*
* A future RPI will address these issues.
*
*----------------------------------------------------------------------
*
*        All tests should complete with the condition code unchanged
*        and have sign nibbles for quotient and remainder set
*        appropriately.
*
*        Four groups of tests when quotient and remainder are not zero.
*        Four groups of tests when remainder is zero.
*        Four groups of tests when quotient is zero.
*
*        Each group of tests corresponds to a row in the
*        following table:
*
*            op1 length    op2 length
*            ----------    ----------
*                 3             1
*                 7             3
*                11             5
*                16             8
*
*            operand 1 sign nibbles are A,B,C,D
*            operand 2 sign nibbles are A,B,C,D
*        
*        Each group has 4 op1 values and 4 op2 values, for a total of
*
*          4 * 4 = 16
*
*        test cases.
*
*        Number of test cases for each set of 4 groups = 4 * 16 = 64.
*
*        Total number of test cases = 3 * 64 = 192.
*
***********************************************************************
*
*        The (quotient,remainder) values and signs are shown in the
*        following table:
*
*            op1 (dividend)  op2 (divisor)  quotient  remainder
*            --------------  -------------  --------  ---------
*                  < 0            < 0       ...dddC   ...dddD
*                  < 0            > 0       ...dddD   ...dddD
*                  > 0            < 0       ...dddD   ...dddC
*                  > 0            > 0       ...dddC   ...dddC
*
*                  < 0            < 0       ...dddC        0D
*                  < 0            > 0       ...dddD        0D
*                  > 0            < 0       ...dddD        0C
*                  > 0            > 0       ...dddC        0C
*
*                  < 0            < 0            0C   ...dddD
*                  < 0            > 0            0D   ...dddD
*                  > 0            < 0            0D   ...dddC
*                  > 0            > 0            0C   ...dddC
*
***********************************************************************
*
*        Total number of failures, total number of successes,
*        stored in common storage fields DP02#F, DP02#S,
*        respectively.
*
***********************************************************************
*
         Using Data,R11            R11 --> data always
T02      DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
         LR    R12,R15             R12 = base register
         USING T02,R12             Establish addressability
*
         LM    R1,R3,DP2PLP        R1 --> 1st parameter list
*                                  R2  =  len one parameter list
*                                  R3 --> last parameter list
*
         SR    R9,R9               R9 = number of tests that fail
         LR    R10,R9              R10 = number of tests that succeed
*
         MVI   WT#,C'2'            Test number for print routine
*
         MVI   WExpABCC,X'FF'      No abends are expected
*
T02100   DS    0H
         BAS   R14,T02Div          Perform one division
         LTR   R15,R15             Test successful?
         BZ    T02200              Yes; count success
         AHI   R9,1                No; count failure
         B     T02300              Continue
T02200   DS    0H
         AHI   R10,1               Count success
T02300   DS    0H
         LARL  R15,PrtRes          Print routine
         BASR  R14,R15             Print results
         BXLE  R1,R2,T02100        Process all parameter lists
*
         STM   R9,R10,DP02ST       Save # failures, # successes
*
         L     R13,4(,R13)         Caller's save area
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
*
***********************************************************************
*
* Routine: T02Div
*
*        Perform one DP test
*
*        Input:
*
*            R1 --> parameter list
*                   +0 --> value for op1; 1st byte len code
*                   +4 --> value for op2; 1st byte len code
*                   +8 --> expected quotient,remainder; 16 bytes
*                   +C  =  expected CC
*
*        Output:
*
*            WErr    report error indicator; ' ' no error; '*' error
*
*            WCC     condition code after instruction executed
*                    X'FF' in leftmost byte if instruction not executed
*
*            WResult set to result; left-justified in 16-byte field
*                    X'FF' in leftmost byte if instruction not executed
*
*        Return code:  0 test succeeded
*                      4 test failed
*                     16 invalid op1,op1 length code pair
*
***********************************************************************
*
T02Div   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
*
         LM    R2,R4,0(R1)         R2 --> op1 value
*                                  R3 --> op2 value
*                                  R4 --> expected quot,rem; 16 bytes
         L     R0,12(,R1)          R0  =  expected CC
*
         MVI   WErr,C' '           No failure
         MVI   WCC,X'FF'           No CC; instruction not executed
         MVI   WResult,X'FF'       No result; instruction not executed
*
         SR    R5,R5               Prepare to get op1 len code
         SR    R6,R6               Prepare to get op2 len code
         IC    R5,0(,R2)           op1 len code; 0 - 15
         SLL   R5,4                Move left one nibble
         IC    R6,0(,R3)           op2 len code; 0 - 15
         OR    R5,R6               R5 = op1LC || op2LC
         IC    R5,T02TT(R5)        Get branch table index
         SLL   R5,2                Convert to offset
         TM    *,X'91'             Set CC 3
         B     T02DivBT(R5)        Branch to appropriate code
T02DivBT DS    0H
         B     T02DivER            Skip; invalid (op1 len, op2 len)
         B     T02Div_3_1          op1 len 3, op2 len 1
         B     T02Div_7_3          op1 len 7, op2 len 3
         B     T02Div_11_5         op1 len 10, op2 len 5
         B     T02Div_16_8         op1 len 16, op2 len 8
*
T02Div_3_1     DS    0H
         MVC   W1L3,1(R2)          Copy op1 value to work
         MVC   W2L1,1(R3)          Copy op2 value to work
         LA    R5,W1L3             R5 --> result
         LA    R6,L'W1L3-1         R6  =  len code of result
         DP    W1L3,W2L1           Do the multiplication
         B     T02DivCR            Check the result
T02Div_7_3     DS    0H
         MVC   W1L7,1(R2)          Copy op1 value to work
         MVC   W2L3,1(R3)          Copy op2 value to work
         LA    R5,W1L7             R5 --> result
         LA    R6,L'W1L7-1         R6  =  len code of result
         DP    W1L7,W2L3           Do the multiplication
         B     T02DivCR            Check the result
T02Div_11_5    DS    0H
         MVC   W1L11,1(R2)         Copy op1 value to work
         MVC   W2L5,1(R3)          Copy op2 value to work
         LA    R5,W1L11            R5 --> result
         LA    R6,L'W1L11-1        R6  =  len code of result
         DP    W1L11,W2L5          Do the multiplication
         B     T02DivCR            Check the result
T02Div_16_8    DS    0H
         MVC   W1L16,1(R2)         Copy op1 value to work
         MVC   W2L8,1(R3)          Copy op2 value to work
         LA    R5,W1L16            R5 --> result
         LA    R6,L'W1L16-1        R6  =  len code of result
         DP    W1L16,W2L8          Do the multipllication
         B     T02DivCR            Check the result
*
T02DivER DS    0H
         LA    R15,16              Invalid op1,op2 len code pair
         B     T02DivDone          Done
T02DivCR DS    0H
         IPM   R15                 Get CC, Pgm Mask
         SRL   R15,28              Isolate CC
         ST    R15,WCC             Save in print work area
         EX    R6,T02MVC           Copy result to print work area
         BAS   R14,T02CkRs         Check result; sets R15
T02DivDone     DS    0H
         LTR   R15,R15             Error or check failed?
         BZ    T02DivExit          No; just exit
         MVI   WErr,C'*'           Yes; set error indicator
T02DivExit     DS    0H
         L     R13,4(,R13)         Caller's save area
         L     R14,12(,R13)        Restore caller's registers
         LM    R0,R12,20(R13)      ... except for R15
         BR    R14                 Return to caller
*
T02MVC   MVC   WResult(*-*),0(R5)  Copy result to work area
*
***********************************************************************
*
* Routine: T02CkRs
*
*        Check result
*
*        Input:
*
*          R0  =  expected CC
*          R15 =  actual CC
*          R5 --> op1
*          R6  =  len code of op1
*          R4 --> 16 byte expected result
*
*        Return code: 0 Test succeeded
*                     4 Test failed
*
***********************************************************************
*
T02CkRs  DS    0H
         CR    R15,R0              Actual CC = expected CC?
         BNE   T02F                Failure if not equal
         LA    R15,15(,R4)         Last byte of expected result
         SR    R15,R6              R15 --> op1 expected result
         EX    R6,T02CLC           op1 : expected
         BE    T02S                Success if equal
T02F     DS    0H
         LA    R15,4               Test failed
         B     T02D                Done
T02S     DS    0H
         SR    R15,R15             Test succeeded
*NSI     B     T02D                Done
T02D     DS    0H
         BR    R14                 Return
*
T02CLC   CLC   0(*-*,R5),0(R15)    op1 : expected result
*
***********************************************************************
*        Convert byte X'op1LC || op2LC' to branch table index
***********************************************************************
T02TT    DC    256AL1(0)           Translate table
         ORG   T02TT+X'20'         op1 len code 2, op2 len code 0
         DC    AL1(1)
         ORG   T02TT+X'62'         op1 len code 6, op2 len code 2
         DC    AL1(2)
         ORG   T02TT+X'A4'         op1 len code 10, op2 len code 4
         DC    AL1(3)
         ORG   T02TT+X'F7'         op1 len code 15, op2 len code 7
         DC    AL1(4)
         ORG   ,
*
         LTORG
*
***********************************************************************
*        Parameter lists for all tests
***********************************************************************
*
DP2PLP   DC    A(DP2PLP1,16,DP2PLPN)       1st plist, len 1, last plist
*
DP2PLP1  DS    0A                          first parameter list
***********************************************************************
*        negative / negative = (positive,negative)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L3_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP2EV1PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP2EV1PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP2EV1PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP2EV1PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L3_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_5)         op2 value nz-
         DC    A(DP2EV5PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_6)         op2 value nz-
         DC    A(DP2EV5PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_5)         op2 value nz-
         DC    A(DP2EV5PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_6)         op2 value nz-
         DC    A(DP2EV5PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L3_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_7)         op2 value nz-
         DC    A(DP2EV9PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_8)         op2 value nz-
         DC    A(DP2EV9PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_7)         op2 value nz-
         DC    A(DP2EV9PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L1_V_N_8)         op2 value nz-
         DC    A(DP2EV9PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L7_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP2EV2PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP2EV2PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP2EV2PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP2EV2PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L7_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_5)         op2 value nz-
         DC    A(DP2EV6PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_6)         op2 value nz-
         DC    A(DP2EV6PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_5)         op2 value nz-
         DC    A(DP2EV6PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_6)         op2 value nz-
         DC    A(DP2EV6PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L7_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_7)         op2 value nz-
         DC    A(DP2EVaPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_8)         op2 value nz-
         DC    A(DP2EVaPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_7)         op2 value nz-
         DC    A(DP2EVaPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L3_V_N_8)         op2 value nz-
         DC    A(DP2EVaPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L11_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP2EV3PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP2EV3PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP2EV3PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP2EV3PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L11_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_5)         op2 value nz-
         DC    A(DP2EV7PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_6)         op2 value nz-
         DC    A(DP2EV7PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_5)         op2 value nz-
         DC    A(DP2EV7PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_6)         op2 value nz-
         DC    A(DP2EV7PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L11_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_7)         op2 value nz-
         DC    A(DP2EVbPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_8)         op2 value nz-
         DC    A(DP2EVbPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_7)         op2 value nz-
         DC    A(DP2EVbPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L5_V_N_8)         op2 value nz-
         DC    A(DP2EVbPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L16_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP2EV4PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP2EV4PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP2EV4PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP2EV4PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L16_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_5)         op2 value nz-
         DC    A(DP2EV8PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_6)         op2 value nz-
         DC    A(DP2EV8PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_5)         op2 value nz-
         DC    A(DP2EV8PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_6)         op2 value nz-
         DC    A(DP2EV8PN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L16_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_7)         op2 value nz-
         DC    A(DP2EVcPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_8)         op2 value nz-
         DC    A(DP2EVcPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_7)         op2 value nz-
         DC    A(DP2EVcPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L8_V_N_8)         op2 value nz-
         DC    A(DP2EVcPN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*        negative / postive = (negative,negative)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L3_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP2EV1NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP2EV1NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP2EV1NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP2EV1NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L3_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_5)         op2 value nz+
         DC    A(DP2EV5NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_6)         op2 value nz+
         DC    A(DP2EV5NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_5)         op2 value nz+
         DC    A(DP2EV5NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_6)         op2 value nz+
         DC    A(DP2EV5NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L3_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_7)         op2 value nz+
         DC    A(DP2EV9NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_8)         op2 value nz+
         DC    A(DP2EV9NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_7)         op2 value nz+
         DC    A(DP2EV9NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L1_V_P_8)         op2 value nz+
         DC    A(DP2EV9NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L7_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP2EV2NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_3)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP2EV2NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP2EV2NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_4)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP2EV2NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L7_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_5)         op2 value nz+
         DC    A(DP2EV6NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_5)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_6)         op2 value nz+
         DC    A(DP2EV6NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_5)         op2 value nz+
         DC    A(DP2EV6NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_6)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_6)         op2 value nz+
         DC    A(DP2EV6NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L7_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_7)         op2 value nz+
         DC    A(DP2EVaNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_7)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_8)         op2 value nz+
         DC    A(DP2EVaNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_7)         op2 value nz+
         DC    A(DP2EVaNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_N_8)         op1 value nz-
         DC    A(DP2_OP2_L3_V_P_8)         op2 value nz+
         DC    A(DP2EVaNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L11_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP2EV3NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP2EV3NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP2EV3NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP2EV3NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L11_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_5)         op2 value nz+
         DC    A(DP2EV7NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_6)         op2 value nz+
         DC    A(DP2EV7NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_5)         op2 value nz+
         DC    A(DP2EV7NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_6)         op2 value nz+
         DC    A(DP2EV7NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L11_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_7)         op2 value nz+
         DC    A(DP2EVbNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_8)         op2 value nz+
         DC    A(DP2EVbNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_7)         op2 value nz+
         DC    A(DP2EVbNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L5_V_P_8)         op2 value nz+
         DC    A(DP2EVbNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L16_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP2EV4NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_3)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP2EV4NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP2EV4NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_4)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP2EV4NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L16_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_5)         op2 value nz+
         DC    A(DP2EV8NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_5)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_6)         op2 value nz+
         DC    A(DP2EV8NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_5)         op2 value nz+
         DC    A(DP2EV8NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_6)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_6)         op2 value nz+
         DC    A(DP2EV8NN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L16_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_7)         op2 value nz+
         DC    A(DP2EVcNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_7)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_8)         op2 value nz+
         DC    A(DP2EVcNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_7)         op2 value nz+
         DC    A(DP2EVcNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_N_8)        op1 value nz-
         DC    A(DP2_OP2_L8_V_P_8)         op2 value nz+
         DC    A(DP2EVcNN)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*        positive / negative = (negative,positive)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L3_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP2EV1NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP2EV1NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_3)         op2 value nz-
         DC    A(DP2EV1NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_4)         op2 value nz-
         DC    A(DP2EV1NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L3_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_5)         op2 value nz-
         DC    A(DP2EV5NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_6)         op2 value nz-
         DC    A(DP2EV5NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_5)         op2 value nz-
         DC    A(DP2EV5NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_6)         op2 value nz-
         DC    A(DP2EV5NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L3_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_7)         op2 value nz-
         DC    A(DP2EV9NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_8)         op2 value nz-
         DC    A(DP2EV9NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_7)         op2 value nz-
         DC    A(DP2EV9NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L1_V_N_8)         op2 value nz-
         DC    A(DP2EV9NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L7_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP2EV2NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP2EV2NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_3)         op2 value nz-
         DC    A(DP2EV2NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_4)         op2 value nz-
         DC    A(DP2EV2NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L7_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_5)         op2 value nz-
         DC    A(DP2EV6NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_6)         op2 value nz-
         DC    A(DP2EV6NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_5)         op2 value nz-
         DC    A(DP2EV6NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_6)         op2 value nz-
         DC    A(DP2EV6NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L7_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_7)         op2 value nz-
         DC    A(DP2EVaNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_8)         op2 value nz-
         DC    A(DP2EVaNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_7)         op2 value nz-
         DC    A(DP2EVaNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L3_V_N_8)         op2 value nz-
         DC    A(DP2EVaNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L11_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP2EV3NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP2EV3NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_3)         op2 value nz-
         DC    A(DP2EV3NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_4)         op2 value nz-
         DC    A(DP2EV3NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L11_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_5)         op2 value nz-
         DC    A(DP2EV7NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_6)         op2 value nz-
         DC    A(DP2EV7NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_5)         op2 value nz-
         DC    A(DP2EV7NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_6)         op2 value nz-
         DC    A(DP2EV7NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L11_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_7)         op2 value nz-
         DC    A(DP2EVbNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_8)         op2 value nz-
         DC    A(DP2EVbNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_7)         op2 value nz-
         DC    A(DP2EVbNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L5_V_N_8)         op2 value nz-
         DC    A(DP2EVbNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L16_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP2EV4NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP2EV4NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_3)         op2 value nz-
         DC    A(DP2EV4NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_4)         op2 value nz-
         DC    A(DP2EV4NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L16_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_5)         op2 value nz-
         DC    A(DP2EV8NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_6)         op2 value nz-
         DC    A(DP2EV8NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_5)         op2 value nz-
         DC    A(DP2EV8NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_6)         op2 value nz-
         DC    A(DP2EV8NP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L16_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_7)         op2 value nz-
         DC    A(DP2EVcNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_8)         op2 value nz-
         DC    A(DP2EVcNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_7)         op2 value nz-
         DC    A(DP2EVcNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L8_V_N_8)         op2 value nz-
         DC    A(DP2EVcNP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*        positive / postive = (positive,positive)
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L3_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP2EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP2EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_3)         op2 value nz+
         DC    A(DP2EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_4)         op2 value nz+
         DC    A(DP2EV1PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L3_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_5)         op2 value nz+
         DC    A(DP2EV5PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_6)         op2 value nz+
         DC    A(DP2EV5PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_5)         op2 value nz+
         DC    A(DP2EV5PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_6)         op2 value nz+
         DC    A(DP2EV5PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L3_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_7)         op2 value nz+
         DC    A(DP2EV9PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_8)         op2 value nz+
         DC    A(DP2EV9PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_7)         op2 value nz+
         DC    A(DP2EV9PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L3_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L1_V_P_8)         op2 value nz+
         DC    A(DP2EV9PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L7_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP2EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_3)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP2EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_3)         op2 value nz+
         DC    A(DP2EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_4)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_4)         op2 value nz+
         DC    A(DP2EV2PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L7_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_5)         op2 value nz+
         DC    A(DP2EV6PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_5)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_6)         op2 value nz+
         DC    A(DP2EV6PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_5)         op2 value nz+
         DC    A(DP2EV6PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_6)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_6)         op2 value nz+
         DC    A(DP2EV6PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L7_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_7)         op2 value nz+
         DC    A(DP2EVaPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_7)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_8)         op2 value nz+
         DC    A(DP2EVaPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_7)         op2 value nz+
         DC    A(DP2EVaPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L7_V_P_8)         op1 value nz+
         DC    A(DP2_OP2_L3_V_P_8)         op2 value nz+
         DC    A(DP2EVaPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 5
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L11_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP2EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP2EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_3)         op2 value nz+
         DC    A(DP2EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_4)         op2 value nz+
         DC    A(DP2EV3PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L11_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_5)         op2 value nz+
         DC    A(DP2EV7PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_6)         op2 value nz+
         DC    A(DP2EV7PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_5)         op2 value nz+
         DC    A(DP2EV7PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_6)         op2 value nz+
         DC    A(DP2EV7PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L11_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_7)         op2 value nz+
         DC    A(DP2EVbPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_8)         op2 value nz+
         DC    A(DP2EVbPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_7)         op2 value nz+
         DC    A(DP2EVbPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L11_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L5_V_P_8)         op2 value nz+
         DC    A(DP2EVbPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
*        quotient and remainder non-zero
*
         DC    A(DP2_OP1_L16_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP2EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_3)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP2EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_3)         op2 value nz+
         DC    A(DP2EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_4)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_4)         op2 value nz+
         DC    A(DP2EV4PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        remainder zero
*
         DC    A(DP2_OP1_L16_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_5)         op2 value nz+
         DC    A(DP2EV8PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_5)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_6)         op2 value nz+
         DC    A(DP2EV8PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_5)         op2 value nz+
         DC    A(DP2EV8PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_6)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_6)         op2 value nz+
         DC    A(DP2EV8PP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
*        quotient zero
*
         DC    A(DP2_OP1_L16_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_7)         op2 value nz+
         DC    A(DP2EVcPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_7)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_8)         op2 value nz+
         DC    A(DP2EVcPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_7)         op2 value nz+
         DC    A(DP2EVcPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
         DC    A(DP2_OP1_L16_V_P_8)        op1 value nz+
         DC    A(DP2_OP2_L8_V_P_8)         op2 value nz+
         DC    A(DP2EVcPP)                 expected quotient,remainder
         DC    A(3)                        expected CC
*
DP2PLPN  EQU   *-16,16                     Last parameter

***********************************************************************
*        Values for op1 and op2
***********************************************************************
*
***********************************************************************
*        Values for op1 and op2 (same as T01 non-zero values)
***********************************************************************
*
DP2_OP1_L3_V_N_3 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'04183B'         Value
*
DP2_OP1_L3_V_N_4 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'04183D'         Value
*
DP2_OP1_L3_V_P_3 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'04183A'         Value
*
DP2_OP1_L3_V_P_4 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'04183C'         Value
*
DP2_OP1_L3_V_N_5 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4B'             Value
*
DP2_OP1_L3_V_N_6 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4D'             Value
*
DP2_OP1_L3_V_P_5 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4A'             Value
*
DP2_OP1_L3_V_P_6 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4C'             Value
*
DP2_OP1_L3_V_N_7 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2B'             Value
*
DP2_OP1_L3_V_N_8 DS    0X                  op1 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2D'             Value
*
DP2_OP1_L3_V_P_7 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2A'             Value
*
DP2_OP1_L3_V_P_8 DS    0X                  op1 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2C'             Value
*

*----------------------------------------------------------------------
*
DP2_OP1_L7_V_N_3 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000546189327B' Value
*
DP2_OP1_L7_V_N_4 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000546189327D' Value
*
DP2_OP1_L7_V_P_3 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000546189327A' Value
*
DP2_OP1_L7_V_P_4 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000546189327C' Value
*
DP2_OP1_L7_V_N_5 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'4B'             Value
*
DP2_OP1_L7_V_N_6 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'4D'             Value
*
DP2_OP1_L7_V_P_5 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'4A'             Value
*
DP2_OP1_L7_V_P_6 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'4C'             Value
*
DP2_OP1_L7_V_N_7 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'2B'             Value
*
DP2_OP1_L7_V_N_8 DS    0X                  op1 len 7 negative value
                 DC    AL1(7-1)            Length code
                 DC    XL7'2D'             Value
*
DP2_OP1_L7_V_P_7 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'2A'             Value
*
DP2_OP1_L7_V_P_8 DS    0X                  op1 len 7 positive value
                 DC    AL1(7-1)            Length code
                 DC    XL7'2C'             Value
*
*----------------------------------------------------------------------
*
DP2_OP1_L11_V_N_3 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'069742180199253678198B'    Value
*
DP2_OP1_L11_V_N_4 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'069742180199253678198D'    Value
*
DP2_OP1_L11_V_P_3 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'069742180199253678198A'    Value
*
DP2_OP1_L11_V_P_4 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'069742180199253678198C'    Value
*
DP2_OP1_L11_V_N_5 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'4B'            Value
*
DP2_OP1_L11_V_N_6 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'4D'            Value
*
DP2_OP1_L11_V_P_5 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'4A'            Value
*
DP2_OP1_L11_V_P_6 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'4C'            Value
*
DP2_OP1_L11_V_N_7 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'2B'            Value
*
DP2_OP1_L11_V_N_8 DS   0X                  op1 len 11 negative value
                 DC    AL1(11-1)           Length code
                 DC    XL11'2D'            Value
*
DP2_OP1_L11_V_P_7 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'2A'            Value
*
DP2_OP1_L11_V_P_8 DS   0X                  op1 len 11 positive value
                 DC    AL1(11-1)           Length code
                 DC    XL11'2C'            Value
*
*----------------------------------------------------------------------
*
DP2_OP1_L16_V_N_3 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0182728182845903728171817154096B'  Value
*
DP2_OP1_L16_V_N_4 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0182728182845903728171817154096D'  Value
*
DP2_OP1_L16_V_P_3 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0182728182845903728171817154096A'  Value
*
DP2_OP1_L16_V_P_4 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0182728182845903728171817154096C'  Value
*
DP2_OP1_L16_V_N_5 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'4B'            Value
*
DP2_OP1_L16_V_N_6 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'4D'            Value
*
DP2_OP1_L16_V_P_5 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'4A'            Value
*
DP2_OP1_L16_V_P_6 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'4C'            Value
*
DP2_OP1_L16_V_N_7 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'2B'            Value
*
DP2_OP1_L16_V_N_8 DS   0X                  op1 len 16 negative value
                 DC    AL1(16-1)           Length code
                 DC    XL16'2D'            Value
*
DP2_OP1_L16_V_P_7 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'2A'            Value
*
DP2_OP1_L16_V_P_8 DS   0X                  op1 len 16 positive value
                 DC    AL1(16-1)           Length code
                 DC    XL16'2C'            Value
*
***********************************************************************
*
DP2_OP2_L1_V_N_3 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'5B'             Value
*
DP2_OP2_L1_V_N_4 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'5D'             Value
*
DP2_OP2_L1_V_P_3 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'5A'             Value
*
DP2_OP2_L1_V_P_4 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'5C'             Value
*
DP2_OP2_L1_V_N_5 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'2B'             Value
*
DP2_OP2_L1_V_N_6 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'2D'             Value
*
DP2_OP2_L1_V_P_5 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'2A'             Value
*
DP2_OP2_L1_V_P_6 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'2C'             Value
*
DP2_OP2_L1_V_N_7 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'4B'             Value
*
DP2_OP2_L1_V_N_8 DS    0X                  op2 len 1 negative value
                 DC    AL1(1-1)            Length code
                 DC    XL1'4D'             Value
*
DP2_OP2_L1_V_P_7 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'4A'             Value
*
DP2_OP2_L1_V_P_8 DS    0X                  op2 len 1 positive value
                 DC    AL1(1-1)            Length code
                 DC    XL1'4C'             Value
*
*----------------------------------------------------------------------
*
DP2_OP2_L3_V_N_3 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00543B'         Value
*
DP2_OP2_L3_V_N_4 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00543D'         Value
*
DP2_OP2_L3_V_P_3 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00543A'         Value
*
DP2_OP2_L3_V_P_4 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'00543C'         Value
*
DP2_OP2_L3_V_N_5 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2B'             Value
*
DP2_OP2_L3_V_N_6 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2D'             Value
*
DP2_OP2_L3_V_P_5 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2A'             Value
*
DP2_OP2_L3_V_P_6 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'2C'             Value
*
DP2_OP2_L3_V_N_7 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4B'             Value
*
DP2_OP2_L3_V_N_8 DS    0X                  op2 len 3 negative value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4D'             Value
*
DP2_OP2_L3_V_P_7 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4A'             Value
*
DP2_OP2_L3_V_P_8 DS    0X                  op2 len 3 positive value
                 DC    AL1(3-1)            Length code
                 DC    XL3'4C'             Value
*
*----------------------------------------------------------------------
*
DP2_OP2_L5_V_N_3 DS    0X                  op2 len 5 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'746321802B'     Value
*
DP2_OP2_L5_V_N_4 DS    0X                  op2 len 5 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'746321802D'     Value
*
DP2_OP2_L5_V_P_3 DS    0X                  op2 len 5 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'746321802A'     Value
*
DP2_OP2_L5_V_P_4 DS    0X                  op2 len 5 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'746321802C'     Value
*
DP2_OP2_L5_V_N_5 DS    0X                  op2 len 5 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'2B'             Value
*
DP2_OP2_L5_V_N_6 DS    0X                  op2 len 5 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'2D'             Value
*
DP2_OP2_L5_V_P_5 DS    0X                  op2 len 5 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'2A'             Value
*
DP2_OP2_L5_V_P_6 DS    0X                  op2 len 5 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'2C'             Value
*
DP2_OP2_L5_V_N_7 DS    0X                  op2 len 5 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'4B'             Value
*
DP2_OP2_L5_V_N_8 DS    0X                  op2 len 5 negative value
                 DC    AL1(5-1)            Length code
                 DC    XL5'4D'             Value
*
DP2_OP2_L5_V_P_7 DS    0X                  op2 len 5 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'4A'             Value
*
DP2_OP2_L5_V_P_8 DS    0X                  op2 len 5 positive value
                 DC    AL1(5-1)            Length code
                 DC    XL5'4C'             Value
*
*----------------------------------------------------------------------
*
DP2_OP2_L8_V_N_3 DS    0X                  op2 len 8 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'271828182845904B'   Value
*
DP2_OP2_L8_V_N_4 DS    0X                  op2 len 8 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'271828182845904D'   Value
*
DP2_OP2_L8_V_P_3 DS    0X                  op2 len 8 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'271828182845904A'   Value
*
DP2_OP2_L8_V_P_4 DS    0X                  op2 len 8 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'271828182845904C'   Value
*
DP2_OP2_L8_V_N_5 DS    0X                  op2 len 8 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'2B'             Value
*
DP2_OP2_L8_V_N_6 DS    0X                  op2 len 8 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'2D'             Value
*
DP2_OP2_L8_V_P_5 DS    0X                  op2 len 8 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'2A'             Value
*
DP2_OP2_L8_V_P_6 DS    0X                  op2 len 8 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'2C'             Value
*
DP2_OP2_L8_V_N_7 DS    0X                  op2 len 8 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'4B'             Value
*
DP2_OP2_L8_V_N_8 DS    0X                  op2 len 8 negative value
                 DC    AL1(8-1)            Length code
                 DC    XL8'4D'             Value
*
DP2_OP2_L8_V_P_7 DS    0X                  op2 len 8 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'4A'             Value
*
DP2_OP2_L8_V_P_8 DS    0X                  op2 len 8 positive value
                 DC    AL1(8-1)            Length code
                 DC    XL8'4C'             Value
*
***********************************************************************
*        Expected values
***********************************************************************
*
*        4183 / 5    for 3,1
*
DP2EV1PN DC    XL16'836C3D'
*
DP2EV1NN DC    XL16'836D3D'
*
DP2EV1NP DC    XL16'836D3C'
*
DP2EV1PP DC    XL16'836C3C'
*
*        546189327 / 543    for 7,3
*
DP2EV2PN DC    XL16'1005873C00288D'
*
DP2EV2NN DC    XL16'1005873D00288D'
*
DP2EV2NP DC    XL16'1005873D00288C'
*
DP2EV2PP DC    XL16'1005873C00288C'
*
*        69742180199253678198 / 61812384    for 11,5
*
DP2EV3PN DC    XL16'93447866607C061812384D'
*
DP2EV3NN DC    XL16'93447866607D061812384D'
*
DP2EV3NP DC    XL16'93447866607D061812384C'
*
DP2EV3PP DC    XL16'93447866607C061812384C'
*
*        182728182845903728171817154096 / 271828182845904    for 16,8
*
DP2EV4PN DC    XL16'672219417916243C070718569535424D'
*
DP2EV4NN DC    XL16'672219417916243D070718569535424D'
*
DP2EV4NP DC    XL16'672219417916243D070718569535424C'
*
DP2EV4PP DC    XL16'672219417916243C070718569535424C'
*
*        4 / 2    for 3,1
*
DP2EV5PN DC    XL16'002C0D'
*
DP2EV5NN DC    XL16'002D0D'
*
DP2EV5NP DC    XL16'002D0C'
*
DP2EV5PP DC    XL16'002C0C'
*
*        4 / 2    for 7,3
*
DP2EV6PN DC    XL16'0000002C00000D'
*
DP2EV6NN DC    XL16'0000002D00000D'
*
DP2EV6NP DC    XL16'0000002D00000C'
*
DP2EV6PP DC    XL16'0000002C00000C'
*
*        4 / 2    for 11,5
*
DP2EV7PN DC    XL16'00000000002C000000000D'
*
DP2EV7NN DC    XL16'00000000002D000000000D'
*
DP2EV7NP DC    XL16'00000000002D000000000C'
*
DP2EV7PP DC    XL16'00000000002C000000000C'
*
*        4 / 2    for 16,8
*
DP2EV8PN DC    XL16'000000000000002C000000000000000D'
*
DP2EV8NN DC    XL16'000000000000002D000000000000000D'
*
DP2EV8NP DC    XL16'000000000000002D000000000000000C'
*
DP2EV8PP DC    XL16'000000000000002C000000000000000C'
*
*
*        2 / 4    for 3,1
*
DP2EV9PN DC    XL16'000C2D'
*
DP2EV9NN DC    XL16'000D2D'
*
DP2EV9NP DC    XL16'000D2C'
*
DP2EV9PP DC    XL16'000C2C'
*
*        2 / 4    for 7,3
*
DP2EVaPN DC    XL16'0000000C00002D'
*
DP2EVaNN DC    XL16'0000000D00002D'
*
DP2EVaNP DC    XL16'0000000D00002C'
*
DP2EVaPP DC    XL16'0000000C00002C'
*
*        2 / 4    for 11,5
*
DP2EVbPN DC    XL16'00000000000C000000002D'
*
DP2EVbNN DC    XL16'00000000000D000000002D'
*
DP2EVbNP DC    XL16'00000000000D000000002C'
*
DP2EVbPP DC    XL16'00000000000C000000002C'
*
*        2 / 4    for 16,8
*
DP2EVcPN DC    XL16'000000000000000C000000000000002D'
*
DP2EVcNN DC    XL16'000000000000000D000000000000002D'
*
DP2EVcNP DC    XL16'000000000000000D000000000000002C'
*
DP2EVcPP DC    XL16'000000000000000C000000000000002C'
*
         DROP  R11,R12             End addressability
*
***********************************************************************
*
* Routine: T03
*
*        DP   op1,op2  quotient overflows area in op1 field.
*
*----------------------------------------------------------------------
*
* WARNING  WARNING  WARNING  WARNING  WARNING  WARNING  WARNING WARNING
*
* The z390 DP emulation does not correctly handle this case!
*
* The code treats the error as a divide-overflow exception.
* The z390 code behaves as follows:
*
*     if the Program Mask divide overflow bit is 0
*         S0CA
*         truncated quotient, along with remainder, in op1
*     else
*         DP completes
*         truncated quotient, along with remainder, in op1
*         condition code 3 is set
*     endif
*
* What should happen:
*
*     S0CB
*     op1 still has its original value
*     condition code is unchanged
*
* The test divides XL4'2162843C' by XL2'762C'. The actual quotient
* is 2838C and the remainder is 287C. As you will see when you run
* the test, after the DP completes, the op1 field contains 838C287C.
*       
*----------------------------------------------------------------------
*
*        All tests should result in a decimal-divide exception (S0CB).
*
*        A successful test is one that results in a decimal-divide
*        exception.
*
*        One test. Quotient too large to fit in op1 field.
*
*        Total number of test cases = 1.
*
*        Total number of failures, total number of successes,
*        stored in common storage fields DP03#F, DP03#S,
*        respectively.
*
***********************************************************************
*
         Using Data,R11            R11 --> data always
T03      DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
         LR    R12,R15             R12 = base register
         USING T03,R12             Establish addressability
*
         LM    R1,R3,DP3PLP        R1 --> 1st parameter list
*                                  R2  =  len one parameter list
*                                  R3 --> last parameter list
*
         SR    R9,R9               R9 = number of tests that fail
         LR    R10,R9              R10 = number of tests that succeed
*
         MVI   WT#,C'3'            Test number for print routine
*
         MVI   WExpABCC,X'00'      Abends are expected
*
***********************************************************************
*        Ensure decimal overflow bit in program mask is 1.
*        Needed to verify z390 bug.
***********************************************************************
         IPM   R4                  Get current program mask
         LR    R0,R4               Copy to R0
         OILH  R0,X'0400'          Ensure decimal overflow is on
         SPM   R0                  Set program mask
*
T03100   DS    0H
         BAS   R14,T03Div          Perform one multiplication
         LTR   R15,R15             Test successful?
         BZ    T03200              Yes; count success
         AHI   R9,1                No; count failure
         B     T03300              Continue
T03200   DS    0H
         AHI   R10,1               Count success
T03300   DS    0H
         LARL  R15,PrtRes          Print routine
         BASR  R14,R15             Print results
         BXLE  R1,R2,T03100        Process all parameter lists
*
         SPM   R4                  Restore program mask
*
         STM   R9,R10,DP03ST       Save # failures, # successes
*
         L     R13,4(,R13)         Caller's save area
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
*
***********************************************************************
*
* Routine: T03Div
*
*        Perform one DP test
*
*        The DP is expected to result in a data exception (S0C7).
*        An ESTAE is created to trap the abend and retry to indicate
*        that the test is successful.
*
*        Input:
*
*            R1 --> parameter list
*                   +0 --> value for op1; 1st byte len code
*                   +4 --> value for op2; 1st byte len code
*                   +8 --> expected quotient,remainder; 16 bytes
*                   +C  =  expected CC
*
*        Note: the 3rd and 4th parameters are not used since the
*              DP is expected to result in a data exception.
*
*        Output:
*
*            WErr    report error indicator; ' ' no error; '*' error
*
*            WCC     condition code after instruction executed
*                    X'FF' in leftmost byte if instruction not executed
*                    DEBUG: set in all cases
*
*            WResult set to result; left-justified in 16-byte field
*                    X'FF' in leftmost byte if instruction not executed
*                    DEBUG: set in all cases
*
*            WActABCC set to abend completion code if abend occurs;
*                     zeros if no abend
*
*            WExpABCC set to expected abend completion code
*
*        Return code: 0 test succeeded
*                     4 test failed
*
***********************************************************************
*
T03Div   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
*
         LA    R3,ESPARM           Parm list for ESTAE exit
         MVI   ESF1,ESF10CA+ESF10CB    Initialize ESTAE flag
         LA    R0,T03Div0CB        Retry address
         ST    R0,ESRET@           Save in ESTAE parm list
         LARL  R4,ESTAEEX          ESTAE exit
         ESTAE (R4),PARAM=(R3)     Set ESTAE
*
         L     R1,24(,R13)         Restore R1
*
         L     R13,8(,R13)         Next save area
*
         LM    R2,R3,0(R1)         R2 --> op1 value
*                                  R3 --> op2 value
*
*        Note: third and fourth parameters not used!
*
         MVI   WErr,C' '           No failure
         MVI   WCC,X'FF'           No CC; instruction not executed
         MVI   WResult,X'FF'       No result; instruction not executed
*
         XC    WActABCC,WActABCC   No completion code yet
         MVC   WExpABCC,ABCC0CB    Copy expected completion code
*
         SR    R5,R5               Prepare to get op1 len code
         SR    R6,R6               Prepare to get op2 len code
         IC    R5,0(,R2)           op1 len code; 0 - 15
         SLL   R5,4                Move left one nibble
         IC    R6,0(,R3)           op2 len code; 0 - 15
         OR    R5,R6               R5 = op1LC || op2LC
         IC    R5,T03TT(R5)        Get branch table index
         SLL   R5,2                Convert to offset
*         TM    *,X'91'             Set CC 3
         LTR   R12,R12             Set CC 2
         B     T03DivBT(R5)        Branch to appropriate code
T03DivBT DS    0H
         B     T03DivER            Skip; invalid (op1 len, op2 len)
         B     T03Div_4_2          op1 len 4, op2 len 2
*
T03Div_4_2     DS    0H
         MVC   W1L4,1(R2)          Copy op1 value to work
         MVC   W2L2,1(R3)          Copy op2 value to work
         LA    R5,W1L4             R5 --> result
         LA    R6,L'W1L4-1         R6  =  len code of result
         DP    W1L4,W2L2           Do the multiplication
         B     T03DivCR            Check the result
*
T03DivCR DS    0H
***********************************************************************
*        Next 4 lines are debug only
***********************************************************************
         IPM   R15                 Get CC, Pgm Mask
         SRL   R15,28              Isolate CC
         ST    R15,WCC             Save in print work area
         EX    R6,T03MVC           Copy result to print work area
***********************************************************************
*        End debug
***********************************************************************
         LA    R15,4               Test did not abend; failure
         B     T03DivDone          Done
T03DivER DS    0H
         LA    R15,16              Invalid op1,op2 len code pair
         B     T03DivDone          Done
T03Div0CB      DS    0H
***********************************************************************
*        Next 4 lines are debug only
***********************************************************************
         IPM   R15                 Get CC, Pgm Mask
         SRL   R15,28              Isolate CC
         ST    R15,WCC             Save in print work area
         EX    R6,T03MVC           Copy result to print work area
***********************************************************************
*        End debug
***********************************************************************
         MVC   WActABCC,ESCOMP     Copy actual completion code
         SR    R15,R15             Test Successful; did S0CB (NO!!!)
T03DivDone     DS    0H
         LTR   R15,R15             Abend and recovery?
         BZ    T03DivExit          Yes; just exit
         MVI   Werr,C'*'           No; set error indicator
T03DivExit     DS    0H
*
         LR    R2,R15              Save return code
         ESTAE 0                   Cancel ESTAE
         LR    R15,R2              Restore R15
*
         L     R13,4(,R13)         Caller's save area
         L     R14,12(,R13)        Restore caller's registers
         LM    R0,R12,20(R13)      ... except for R15
         BR    R14                 Return to caller
*
T03MVC   MVC   WResult(*-*),0(R5)  Copy result to print work area
*
***********************************************************************
*        Convert byte X'op1LC || op2LC' to branch table index
***********************************************************************
T03TT    DC    256AL1(0)           Translate table
         ORG   T03TT+X'31'         op1 len code 3, op2 len code 1
         DC    AL1(1)
         ORG   ,
*
         LTORG
*
***********************************************************************
*        Parameter lists for all tests
***********************************************************************
*
DP3PLP   DC   A(DP3PLP1,16,DP3PLPN)    1st plist, len 1, last plist
*
DP3PLP1  DS   0A                       first parameter list
***********************************************************************
*
*        op1 len 4 / op2 len 2
*
         DC    A(DP3_OP1_L4_V_1)           op1 value
         DC    A(DP3_OP2_L2_V_1)           op2 value
         DC    A(DP3EV001)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
 ago .t03a
*
*        op1 len 3 * op2 len 1
*
         DC    A(DP3_OP1_L3_V_1)           op1 value
         DC    A(DP3_OP2_L1_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP3_OP1_L3_V_2)           op1 value
         DC    A(DP3_OP2_L1_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 7 * op2 len 3
*
         DC    A(DP3_OP1_L7_V_1)           op1 value
         DC    A(DP3_OP2_L3_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP3_OP1_L7_V_2)           op1 value
         DC    A(DP3_OP2_L3_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 11 * op2 len 7
*
         DC    A(DP3_OP1_L11_V_1)          op1 value
         DC    A(DP3_OP2_L5_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP3_OP1_L11_V_2)          op1 value
         DC    A(DP3_OP2_L5_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 16 * op2 len 8
*
         DC    A(DP3_OP1_L16_V_1)          op1 value
         DC    A(DP3_OP2_L8_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP3_OP1_L16_V_2)          op1 value
         DC    A(DP3_OP2_L8_V_1)           op2 value
         DC    A(DP3EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
.t03a anop
DP3PLPN  EQU   *-16,16                     Last parameter


***********************************************************************
*        Values for op1 and op2
***********************************************************************
*
DP3_OP1_L4_V_1   DS    0X                  op1 len 3
                 DC    AL1(4-1)            Length code
                 DC    XL4'2162843C'       Value
*
DP3_OP2_L2_V_1   DS    0X                  op2 len 1
                 DC    AL1(2-1)            Length code
                 DC    XL2'762C'           Value
*
 ago .t03b
DP3_OP1_L3_V_1   DS    0X                  op1 len 3
                 DC    AL1(3-1)            Length code
                 DC    XL3'01000C'         Value
*
DP3_OP1_L3_V_2   DS    0X                  op1 len 3
                 DC    AL1(3-1)            Length code
                 DC    XL3'10000C'         Value
*
DP3_OP2_L1_V_1   DS    0X                  op2 len 1
                 DC    AL1(1-1)            Length code
                 DC    XL1'1C'             Value
*
*----------------------------------------------------------------------
*
DP3_OP1_L7_V_1   DS    0X                  op1 len 7
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000010000000C' Value
*
DP3_OP1_L7_V_2   DS    0X                  op1 len 7
                 DC    AL1(7-1)            Length code
                 DC    XL7'1000000000000C' Value
*
DP3_OP2_L3_V_1   DS    0X                  op2 len 3
                 DC    AL1(3-1)            Length code
                 DC    XL3'00001C'         Value
*
*----------------------------------------------------------------------
*
DP3_OP1_L11_V_1  DS   0X                   op1 len 11
                 DC    AL1(11-1)           Length code
                 DC    XL11'000000000100000000000C'    Value
*
DP3_OP1_L11_V_2  DS   0X                   op1 len 11
                 DC    AL1(11-1)           Length code
                 DC    XL11'100000000000000000000C'    Value
*
DP3_OP2_L5_V_1   DS    0X                  op2 len 7
                 DC    AL1(5-1)            Length code
                 DC    XL5'000000001C'     Value
*
*----------------------------------------------------------------------
*
DP3_OP1_L16_V_1  DS   0X                   op1 len 16
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000001000000000000000C'  Value
*
DP3_OP1_L16_V_2  DS   0X                   op1 len 16
                 DC    AL1(16-1)           Length code
                 DC    XL16'1000000000000000000000000000000C'  Value
*
DP3_OP2_L8_V_1   DS    0X                  op2 len 8
                 DC    AL1(8-1)            Length code
                 DC    XL8'000000000000001C'   Value
*
.t03b anop
***********************************************************************
*
***********************************************************************
*        Expected values
***********************************************************************
*
DP3EV000 DC    XL16'0C'
*
DP3EV001 DC    XL16'2162843C'
*
         DROP  R11,R12             End addressability
*
***********************************************************************
*
* Routine: T04
*
*        DP   op1,op2  invalid data in op1 or op2.
*
*        All should have a data exception (S0C7).
*
*        A successful test is one that results in a data exception.
*
*        Four tests, each with seven cases. See following table.
*
*            op1 len    op2 len    op1 op2 values good or bad
*            -------    -------    --------------------------
*               3          1       3 op1 bad, op2 good
*                                  3 op1 good, op2 bad
*                                  1 op1 bad, op2 bad
*               7          3       3 op1 bad, op2 good
*                                  3 op1 good, op2 bad
*                                  1 op1 bad, op2 bad
*              11          5       3 op1 bad, op2 good
*                                  3 op1 good, op2 bad
*                                  1 op1 bad, op2 bad
*              16          8       3 op1 bad, op2 good
*                                  3 op1 good, op2 bad
*                                  1 op1 bad, op2 bad
*
*        Total number of test cases = 4 * 7 = 28.
*
*        Total number of failures, total number of successes,
*        stored in common storage fields DP04#F, DP04#S,
*        respectively.
*
***********************************************************************
*
         Using Data,R11            R11 --> data always
T04      DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
         LR    R12,R15             R12 = base register
         USING T04,R12             Establish addressability
*
         LM    R1,R3,DP4PLP        R1 --> 1st parameter list
*                                  R2  =  len one parameter list
*                                  R3 --> last parameter list
*
         SR    R9,R9               R9 = number of tests that fail
         LR    R10,R9              R10 = number of tests that succeed
*
*
         MVI   WT#,C'4'            Test number for print routine
*
         MVI   WExpABCC,X'00'      Abends are expected
*
T04100   DS    0H
         BAS   R14,T04Div          Perform one division
         LTR   R15,R15             Test successful?
         BZ    T04200              Yes; count success
         AHI   R9,1                No; count failure
         B     T04300              Continue
T04200   DS    0H
         AHI   R10,1               Count success
T04300   DS    0H
         LARL  R15,PrtRes          Print routine
         BASR  R14,R15             Print results
         BXLE  R1,R2,T04100        Process all parameter lists
*
         STM   R9,R10,DP04ST       Save # failures, # successes
*
         L     R13,4(,R13)         Caller's save area
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
*
***********************************************************************
*
* Routine: T04Div
*
*        Perform one DP test
*
*        The DP is expected to result in a data exception (S0C7).
*        An ESTAE is created to trap the abend and retry to indicate
*        that the test is successful.
*
*        Input:
*
*            R1 --> parameter list
*                   +0 --> value for op1; 1st byte len code
*                   +4 --> value for op2; 1st byte len code
*                   +8 --> expected quotient,remainder; 16 bytes; no lc
*                   +C  =  expected CC
*
*        Note: the 3rd and 4th parameters are not used since the
*              DP is expected to result in a data exception.
*
*        Output:
*
*            WErr    report error indicator; ' ' no error; '*' error
*
*            WCC     condition code after instruction executed
*                    X'FF' in leftmost byte if instruction not executed
*
*            WResult set to result; left-justified in 16-byte field
*                    X'FF' in leftmost byte if instruction not executed
*
*            WActABCC set to abend completion code if abend occurs;
*                     zeros if no abend
*
*            WExpABCC set to expected abend completion code
*
*        Return code:  0 test succeeded
*                      4 test failed
*                     16 op1,op2 length code pair invalid
*
***********************************************************************
*
T04Div   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
*
         LA    R3,ESPARM           Parm list for ESTAE exit
         MVI   ESF1,ESF10C7        Initialize ESTAE flag
         LA    R0,T04Div0C7        Retry address
         ST    R0,ESRET@           Save in ESTAE parm list
         LARL  R4,ESTAEEX          ESTAE exit
         ESTAE (R4),PARAM=(R3)     Set ESTAE
*
         L     R1,24(,R13)         Restore R1
*
         L     R13,8(,R13)         Next save area
*
         LM    R2,R3,0(R1)         R2 --> op1 value
*                                  R3 --> op2 value
*
*        Note: third and fourth parameters not used!
*
         MVI   WErr,C' '           No failure
         MVI   WCC,X'FF'           No CC; instruction not executed
         MVI   WResult,X'FF'       No result; instruction not executed
*
         XC    WActABCC,WActABCC   No completion code yet
         MVC   WExpABCC,ABCC0C7    Copy expected completion code
*
         SR    R5,R5               Prepare to get op1 len code
         SR    R6,R6               Prepare to get op2 len code
         IC    R5,0(,R2)           op1 len code; 0 - 15
         SLL   R5,4                Move left one nibble
         IC    R6,0(,R3)           op2 len code; 0 - 15
         OR    R5,R6               R5 = op1LC || op2LC
         IC    R5,T04TT(R5)        Get branch table index
         SLL   R5,2                Convert to offset
         TM    *,X'91'             Set CC 3
         B     T04DivBT(R5)        Branch to appropriate code
T04DivBT DS    0H
         B     T04DivER            Skip; invalid (op1 len, op2 len)
         B     T04Div_3_1          op1 len 3, op2 len 1
         B     T04Div_7_3          op1 len 7, op2 len 5
         B     T04Div_11_5         op1 len 10, op2 len 5
         B     T04Div_16_8         op1 len 16, op2 len 8
*
T04Div_3_1     DS    0H
         MVC   W1L3,1(R2)          Copy op1 value to work
         MVC   W2L1,1(R3)          Copy op2 value to work
         LA    R5,W1L3             R5 --> result
         LA    R6,L'W1L3-1         R6  =  len code of result
         DP    W1L3,W2L1           Do the multiplication
         B     T04DivCR            Check the result
T04Div_7_3     DS    0H
         MVC   W1L7,1(R2)          Copy op1 value to work
         MVC   W2L3,1(R3)          Copy op2 value to work
         LA    R5,W1L7             R5 --> result
         LA    R6,L'W1L7-1         R6  =  len code of result
         DP    W1L7,W2L3           Do the multiplication
         B     T04DivCR            Check the result
T04Div_11_5    DS    0H
         MVC   W1L11,1(R2)         Copy op1 value to work
         MVC   W2L5,1(R3)          Copy op2 value to work
         LA    R5,W1L1             R5 --> result
         LA    R6,L'W1L1-1         R6  =  len code of result
         DP    W1L11,W2L5          Do the multiplication
         B     T04DivCR            Check the result
T04Div_16_8    DS    0H
         MVC   W1L16,1(R2)         Copy op1 value to work
         MVC   W2L8,1(R3)          Copy op2 value to work
         LA    R5,W1L16            R5 --> result
         LA    R6,L'W1L16-1        R6  =  len code of result
         DP    W1L16,W2L8          Do the multiplication
         B     T04DivCR            Check the result
*
T04DivCR DS    0H
         LA    R15,4               Did not abend; error
         B     T04DivDone          Done
T04DivER DS    0H
         LA    R15,16              Invalid op1,op2 len code pair
         B     T04DivDone          Done
T04Div0C7      DS    0H
         MVC   WActABCC,ESCOMP     Copy actual completion code
         SR    R15,R15             Test Successful; did S0C7
T04DivDone     DS    0H
         LTR   R15,R15             Error or check failed?
         BZ    T04DivExit          No; just exit
         MVI   WErr,C'*'           Yes; set error indicator
T04DivExit     DS    0H
*
         LR    R2,R15              Save return code
         ESTAE 0                   Cancel ESTAE
         LR    R15,R2              Restore R15
*
         L     R13,4(,R13)         Caller's save area
         L     R14,12(,R13)        Restore caller's registers
         LM    R0,R12,20(R13)      ... except for R15
         BR    R14                 Return to caller
*
***********************************************************************
*        Convert byte X'op1LC || op2LC' to branch table index
***********************************************************************
T04TT    DC    256AL1(0)           Translate table
         ORG   T04TT+X'20'         op1 len code 2, op2 len code 0
         DC    AL1(1)
         ORG   T04TT+X'62'         op1 len code 6, op2 len code 2
         DC    AL1(2)
         ORG   T04TT+X'A4'         op1 len code 10, op2 len code 4
         DC    AL1(3)
         ORG   T04TT+X'F7'         op1 len code 15, op2 len code 7
         DC    AL1(4)
         ORG   ,
*
         LTORG
*
***********************************************************************
*        Parameter lists for all tests
***********************************************************************
*
DP4PLP   DC   A(DP4PLP1,16,DP4PLPN)    1st plist, len 1, last plist
*
DP4PLP1  DS   0A                       first parameter list
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
         DC    A(DP4_OP1_L3_V_B_1)         op1 value
         DC    A(DP4_OP2_L1_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L3_V_B_2)         op1 value
         DC    A(DP4_OP2_L1_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L3_V_B_3)         op1 value
         DC    A(DP4_OP2_L1_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L3_V_G_1)         op1 value
         DC    A(DP4_OP2_L1_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L3_V_G_1)         op1 value
         DC    A(DP4_OP2_L1_V_B_2)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L3_V_G_1)         op1 value
         DC    A(DP4_OP2_L1_V_B_3)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L3_V_B_1)         op1 value
         DC    A(DP4_OP2_L1_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 3
*
         DC    A(DP4_OP1_L7_V_B_1)         op1 value
         DC    A(DP4_OP2_L3_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L7_V_B_2)         op1 value
         DC    A(DP4_OP2_L3_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L7_V_B_3)         op1 value
         DC    A(DP4_OP2_L3_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L7_V_G_1)         op1 value
         DC    A(DP4_OP2_L3_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L7_V_G_1)         op1 value
         DC    A(DP4_OP2_L3_V_B_2)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L7_V_G_1)         op1 value
         DC    A(DP4_OP2_L3_V_B_3)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L7_V_B_1)         op1 value
         DC    A(DP4_OP2_L3_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 7
*
         DC    A(DP4_OP1_L11_V_B_1)        op1 value
         DC    A(DP4_OP2_L5_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L11_V_B_2)        op1 value
         DC    A(DP4_OP2_L5_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L11_V_B_3)        op1 value
         DC    A(DP4_OP2_L5_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L11_V_G_1)        op1 value
         DC    A(DP4_OP2_L5_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L11_V_G_1)        op1 value
         DC    A(DP4_OP2_L5_V_B_2)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L11_V_G_1)        op1 value
         DC    A(DP4_OP2_L5_V_B_3)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L11_V_B_1)        op1 value
         DC    A(DP4_OP2_L5_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 16 / op2 len 8
*
         DC    A(DP4_OP1_L16_V_B_1)        op1 value
         DC    A(DP4_OP2_L8_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L16_V_B_2)        op1 value
         DC    A(DP4_OP2_L8_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L16_V_B_3)        op1 value
         DC    A(DP4_OP2_L8_V_G_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L16_V_G_1)        op1 value
         DC    A(DP4_OP2_L8_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L16_V_G_1)        op1 value
         DC    A(DP4_OP2_L8_V_B_2)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L16_V_G_1)        op1 value
         DC    A(DP4_OP2_L8_V_B_3)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
         DC    A(DP4_OP1_L16_V_B_1)        op1 value
         DC    A(DP4_OP2_L8_V_B_1)         op2 value
         DC    A(DP4EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
DP4PLPN  EQU   *-16,16                     Last parameter

***********************************************************************
*        Values for op1 and op2
***********************************************************************
*
DP4_OP1_L3_V_B_1 DS    0X                  op1 len 3 bad value
                 DC    AL1(3-1)            Length code
                 DC    XL3'50'             Value
*
DP4_OP1_L3_V_B_2 DS    0X                  op1 len 3 bad value
                 DC    AL1(3-1)            Length code
                 DC    XL3'AD'             Value
*
DP4_OP1_L3_V_B_3 DS    0X                  op1 len 3 bad value
                 DC    AL1(3-1)            Length code
                 DC    XL3'A0'             Value
*
DP4_OP1_L3_V_G_1 DS    0X                  op1 len 3 good value
                 DC    AL1(3-1)            Length code
                 DC    XL3'5C'             Value
*
DP4_OP2_L1_V_B_1 DS    0X                  op2 len 1 bad value
                 DC    AL1(1-1)            Length code
                 DC    XL1'61'             Value
*
DP4_OP2_L1_V_B_2 DS    0X                  op2 len 1 bad value
                 DC    AL1(1-1)            Length code
                 DC    XL1'BC'             Value
*
DP4_OP2_L1_V_B_3 DS    0X                  op2 len 1 bad value
                 DC    AL1(1-1)            Length code
                 DC    XL1'B1'             Value
*
DP4_OP2_L1_V_G_1 DS    0X                  op2 len 1 good value
                 DC    AL1(1-1)            Length code
                 DC    XL1'6C'             Value
*
***********************************************************************
DP4_OP1_L7_V_B_1 DS    0X                  op1 len 7 bad value
                 DC    AL1(7-1)            Length code
                 DC    XL7'5000000000'     Value
*
DP4_OP1_L7_V_B_2 DS    0X                  op1 len 7 bad value
                 DC    AL1(7-1)            Length code
                 DC    XL7'5A0A0A0A0D'     Value
*
DP4_OP1_L7_V_B_3 DS    0X                  op1 len 7 bad value
                 DC    AL1(7-1)            Length code
                 DC    XL7'ABCDEFABC0'     Value
*
DP4_OP1_L7_V_G_1 DS    0X                  op1 len 7 good value
                 DC    AL1(7-1)            Length code
                 DC    XL7'500000000C'     Value
*
DP4_OP2_L3_V_B_1 DS    0X                  op2 len 3 bad value
                 DC    AL1(3-1)            Length code
                 DC    XL3'6000000001'     Value
*
DP4_OP2_L3_V_B_2 DS    0X                  op2 len 3 bad value
                 DC    AL1(3-1)            Length code
                 DC    XL3'60B0D0B00C'     Value
*
DP4_OP2_L3_V_B_3 DS    0X                  op2 len 3 bad value
                 DC    AL1(3-1)            Length code
                 DC    XL3'FEDCBAFED1'     Value
*
DP4_OP2_L3_V_G_1 DS    0X                  op2 len 3 good value
                 DC    AL1(3-1)            Length code
                 DC    XL3'600000000C'     Value
*
***********************************************************************
DP4_OP1_L11_V_B_1 DS    0X                  op1 len 11 bad value
                 DC    AL1(11-1)            Length code
                 DC    XL11'0000000000000050000000' Value
*
DP4_OP1_L11_V_B_2 DS    0X                  op1 len 11 bad value
                 DC    AL1(11-1)            Length code
                 DC    XL11'000000000000005A0A0A0D' Value
*
DP4_OP1_L11_V_B_3 DS    0X                  op1 len 11 bad value
                 DC    AL1(11-1)            Length code
                 DC    XL11'00000000000000ABCDEFA0' Value
*
DP4_OP1_L11_V_G_1 DS    0X                  op1 len 11 good value
                 DC    AL1(11-1)            Length code
                 DC    XL11'000000000000005000000C' Value
*
DP4_OP2_L5_V_B_1 DS    0X                  op2 len 5 bad value
                 DC    AL1(5-1)            Length code
                 DC    XL5'6000000001'     Value
*
DP4_OP2_L5_V_B_2 DS    0X                  op2 len 5 bad value
                 DC    AL1(5-1)            Length code
                 DC    XL5'60B0D0B0BC'     Value
*
DP4_OP2_L5_V_B_3 DS    0X                  op2 len 5 bad value
                 DC    AL1(5-1)            Length code
                 DC    XL5'FEDCBAFED1'     Value
*
DP4_OP2_L5_V_G_1 DS    0X                  op2 len 5 good value
                 DC    AL1(5-1)            Length code
                 DC    XL5'600000000C'     Value
*
***********************************************************************
DP4_OP1_L16_V_B_1 DS   0X                  op1 len 16 bad value
                 DC    AL1(16-1)           Length code
                 DC    XL16'00000000000000000000000000000000'  Value
*
DP4_OP1_L16_V_B_2 DS   0X                  op1 len 16 bad value
                 DC    AL1(16-1)           Length code
                 DC    XL16'00000000000000000000000A0A0A0A0D'  Value
*
DP4_OP1_L16_V_B_3 DS   0X                  op1 len 16 bad value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000000000000ABCDEFABC0'  Value
*
DP4_OP1_L16_V_G_1 DS   0X                  op1 len 16 good value
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000000000000500000000C'  Value
*
DP4_OP2_L8_V_B_1 DS    0X                  op2 len 11 bad value
                 DC    AL1(8-1)            Length code
                 DC    XL8'6000000000000001'   Value
*
DP4_OP2_L8_V_B_2 DS    0X                  op2 len 11 bad value
                 DC    AL1(8-1)            Length code
                 DC    XL8'60B0B0B0B0B0B0BC'   Value
*
DP4_OP2_L8_V_B_3 DS    0X                  op2 len 11 bad value
                 DC    AL1(8-1)            Length code
                 DC    XL8'FEDCBAFEDCBAFED1'   Value
*
DP4_OP2_L8_V_G_1 DS    0X                  op2 len 11 good value
                 DC    AL1(8-1)            Length code
                 DC    XL8'600000000000000C'   Value
*
***********************************************************************
*        Expected values
***********************************************************************
*
DP4EV000 DC    XL16'0C'
*
         DROP  R11,R12             End addressability
*
***********************************************************************
*
* Routine: T05
*
*        DP   op1,op2  op2 too long or op2 len > op1 len.
*
*        All tests should result in a specification exception (S0C6).
*
*        A successful test is one that results in a specification
*        exception.
*
*        Four tests, each with two cases. See following table.
*
*            op1 len    op2 len
*            -------    -------
*               3        3,4,9
*               7        7,8,9
*              11          9
*              16          9
*
*        Total number of test cases = 3 + 3 + 1 + 1 = 8.
*
*        Total number of failures, total number of successes,
*        stored in common storage fields DP05#F, DP05#S,
*        respectively.
*
***********************************************************************
*
         Using Data,R11            R11 --> data always
T05      DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
         LR    R12,R15             R12 = base register
         USING T05,R12             Establish addressability
*
         LM    R1,R3,DP5PLP        R1 --> 1st parameter list
*                                  R2  =  len one parameter list
*                                  R3 --> last parameter list
*
         SR    R9,R9               R9 = number of tests that fail
         LR    R10,R9              R10 = number of tests that succeed
*
*
         MVI   WT#,C'5'            Test number for print routine
*
         MVI   WExpABCC,X'00'      Abends are expected
*
T05100   DS    0H
         BAS   R14,T05Div          Perform one division
         LTR   R15,R15             Test successful?
         BZ    T05200              Yes; count success
         AHI   R9,1                No; count failure
         B     T05300              Continue
T05200   DS    0H
         AHI   R10,1               Count success
T05300   DS    0H
         LARL  R15,PrtRes          Print routine
         BASR  R14,R15             Print results
         BXLE  R1,R2,T05100        Process all parameter lists
*
         STM   R9,R10,DP05ST       Save # failures, # successes
*
         L     R13,4(,R13)         Caller's save area
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
*
***********************************************************************
*
* Routine: T05Div
*
*        Perform one DP test
*
*        The DP is expected to result in a specification
*        exception (S0C6). An ESTAE is created to trap the
*        abend and retry to indicate that the test is successful.
*
*        Input:
*
*            R1 --> parameter list
*                   +0 --> value for op1; 1st byte len code
*                   +4 --> value for op2; 1st byte len code
*                   +8 --> expected quotient,remainder; 16 bytes; no lc
*                   +C  =  expected CC
*
*        Note: the 3rd and 4th parameters are not used since the
*              DP is expected to result in a specification exception.
*
*        Output:
*
*            WErr    report error indicator; ' ' no error; '*' error
*
*            WCC     condition code after instruction executed
*                    X'FF' in leftmost byte if instruction not executed
*
*            WResult set to result; left-justified in 16-byte field
*                    X'FF' in leftmost byte if instruction not executed
*
*            WActABCC set to abend completion code if abend occurs;
*                     zeros if no abend
*
*            WExpABCC set to expected abend completion code
*
*        Return code:  0 test succeeded
*                      4 test failed
*                     16 op1,op2 length code pair invalid
*
***********************************************************************
*
T05Div   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
*
         LA    R3,ESPARM           Parm list for ESTAE exit
         MVI   ESF1,ESF10C6        Initialize ESTAE flag
*
         OI    ESF1,ESF10CA        Also 0CA when testing without fixes!
*
*         OI    ESF1,ESF1DREG       Dump registers
*
         LA    R0,T05Div0C6        Retry address
         ST    R0,ESRET@           Save in ESTAE parm list
         LARL  R4,ESTAEEX          ESTAE exit
         ESTAE (R4),PARAM=(R3)     Set ESTAE
*
         L     R1,24(,R13)         Restore R1
*
         L     R13,8(,R13)         Next save area
*
         LM    R2,R3,0(R1)         R2 --> op1 value
*                                  R3 --> op2 value
*
*        Note: third and fourth parameters not used!
*
         MVI   WErr,C' '           No failure
         MVI   WCC,X'FF'           No CC; instruction not executed
         MVI   WResult,X'FF'       No result; instruction not executed
*
         XC    WActABCC,WActABCC   No completion code yet
         MVC   WExpABCC,ABCC0C6    Copy expected completion code
*
         SR    R5,R5               Prepare to get op1 len code
         SR    R6,R6               Prepare to get op2 len code
         IC    R5,0(,R2)           op1 len code; 0 - 15
         SLL   R5,4                Move left one nibble
         IC    R6,0(,R3)           op2 len code; 0 - 15
         OR    R5,R6               R5 = op1LC || op2LC
         IC    R5,T05TT(R5)        Get branch table index
         SLL   R5,2                Convert to offset
         TM    *,X'91'             Set CC 3
         B     T05DivBT(R5)        Branch to appropriate code
T05DivBT DS    0H
         B     T05DivER            Skip; invalid (op1 len, op2 len)
         B     T05Div_3_3          op1 len 3, op2 len 3
         B     T05Div_3_4          op1 len 3, opw len 4
         B     T05Div_3_9          op1 len 3, opw len 9
         B     T05Div_7_7          op1 len 7, op2 len 7
         B     T05Div_7_8          op1 len 7, op2 len 8
         B     T05Div_7_9          op1 len 7, op2 len 9
         B     T05Div_11_9         op1 len 11, op2 len 9
         B     T05Div_16_9         op1 len 16, op2 len 9
*
T05Div_3_3     DS    0H
         MVC   W1L3,1(R2)          Copy op1 value to work
         MVC   W2L3,1(R3)          Copy op2 value to work
         LA    R5,W1L3             R5 --> result
         LA    R6,L'W1L3-1         R6  =  len code of result
         DP    W1L3,W2L3           Do the multiplication
         B     T05DivCR            Check the result
T05Div_3_4     DS    0H
         MVC   W1L3,1(R2)          Copy op1 value to work
         MVC   W2L4,1(R3)          Copy op2 value to work
         LA    R5,W1L3             R5 --> result
         LA    R6,L'W1L3-1         R6  =  len code of result
         DP    W1L3,W2L4           Do the multiplication
         B     T05DivCR            Check the result
T05Div_3_9     DS    0H
         MVC   W1L3,1(R2)          Copy op1 value to work
         MVC   W2L9,1(R3)          Copy op2 value to work
         LA    R5,W1L3             R5 --> result
         LA    R6,L'W1L3-1         R6  =  len code of result
         DP    W1L3,W2L9           Do the multiplication
         B     T05DivCR            Check the result
T05Div_7_7     DS    0H
         MVC   W1L7,1(R2)          Copy op1 value to work
         MVC   W2L7,1(R3)          Copy op2 value to work
         LA    R5,W1L7             R5 --> result
         LA    R6,L'W1L7-1         R6  =  len code of result
         DP    W1L7,W2L7           Do the multiplication
         B     T05DivCR            Check the result
T05Div_7_8     DS    0H
         MVC   W1L7,1(R2)          Copy op1 value to work
         MVC   W2L8,1(R3)          Copy op2 value to work
         LA    R5,W1L7             R5 --> result
         LA    R6,L'W1L7-1         R6  =  len code of result
         DP    W1L7,W2L8           Do the multiplication
         B     T05DivCR            Check the result
T05Div_7_9     DS    0H
         MVC   W1L7,1(R2)          Copy op1 value to work
         MVC   W2L9,1(R3)          Copy op2 value to work
         LA    R5,W1L7             R5 --> result
         LA    R6,L'W1L7-1         R6  =  len code of result
         DP    W1L7,W2L9           Do the multiplication
         B     T05DivCR            Check the result
T05Div_11_9    DS    0H
         MVC   W1L11,1(R2)         Copy op1 value to work
         MVC   W2L9,1(R3)          Copy op2 value to work
         LA    R5,W1L1             R5 --> result
         LA    R6,L'W1L1-1         R6  =  len code of result
         DP    W1L11,W2L9          Do the multiplication
         B     T05DivCR            Check the result
T05Div_16_9    DS    0H
         MVC   W1L16,1(R2)         Copy op1 value to work
         MVC   W2L9,1(R3)          Copy op2 value to work
         LA    R5,W1L16            R5 --> result
         LA    R6,L'W1L16-1        R6  =  len code of result
         DP    W1L16,W2L9          Do the multiplication
         B     T05DivCR            Check the result
*
T05DivCR DS    0H
         LA    R15,4               Test did not S0C6; error
         B     T05DivDone          Done
T05DivER DS    0H
         LA    R15,16              Invalid op1,op2 len code pair
         B     T05DivDone          Done
T05Div0C6      DS    0H
         MVC   WActABCC,ESCOMP     Copy actual completion code
         SR    R15,R15             Test Successful; did S0C6
T05DivDone     DS    0H
         LTR   R15,R15             Abend and recovery?
         BZ    T05DivExit          Yes; just exit
         MVI   WErr,C'*'           No; set error indicator
T05DivExit     DS    0H
*
         LR    R2,R15              Save return code
         ESTAE 0                   Cancel ESTAE
         LR    R15,R2              Restore R15
*
         L     R13,4(,R13)         Caller's save area
         L     R14,12(,R13)        Restore caller's registers
         LM    R0,R12,20(R13)      ... except for R15
         BR    R14                 Return to caller
*
***********************************************************************
*        Convert byte X'op1LC || op2LC' to branch table index
***********************************************************************
T05TT    DC    256AL1(0)           Translate table
         ORG   T05TT+X'22'         op1 len code 2, op2 len code 2
         DC    AL1(1)
         ORG   T05TT+X'23'         op1 len code 2, op2 len code 3
         DC    AL1(2)
         ORG   T05TT+X'28'         op1 len code 2, op2 len code 8
         DC    AL1(3)
*
         ORG   T05TT+X'66'         op1 len code 6, op2 len code 6
         DC    AL1(4)
         ORG   T05TT+X'67'         op1 len code 6, op2 len code 7
         DC    AL1(5)
         ORG   T05TT+X'68'         op1 len code 6, op2 len code 8
         DC    AL1(6)
*
         ORG   T05TT+X'A8'         op1 len code 10, op2 len code 8
         DC    AL1(7)
*)
         ORG   T05TT+X'F8'         op1 len code 15, op2 len code 8
         DC    AL1(8)
         ORG   ,
*
         LTORG
*
***********************************************************************
*        Parameter lists for all tests
***********************************************************************
*
DP5PLP   DC   A(DP5PLP1,16,DP5PLPN)    1st plist, len 1, last plist
*
DP5PLP1  DS   0A                       first parameter list
***********************************************************************
*
*        op1 len 3 / op2 len 3
*
         DC    A(DP5_OP1_L3_V_1)           op1 value
         DC    A(DP5_OP1_L3_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
*        op1 len 3 * op2 len 4
*
         DC    A(DP5_OP1_L3_V_1)           op1 value
         DC    A(DP5_OP2_L4_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
*        op1 len 3 * op2 len 9
*
         DC    A(DP5_OP1_L3_V_1)           op1 value
         DC    A(DP5_OP2_L9_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 7 / op2 len 7
*
         DC    A(DP5_OP1_L7_V_1)           op1 value
         DC    A(DP5_OP1_L7_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
*        op1 len 7 * op2 len 8
*
         DC    A(DP5_OP1_L7_V_1)           op1 value
         DC    A(DP5_OP2_L8_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
*        op1 len 7 * op2 len 9
*
         DC    A(DP5_OP1_L7_V_1)           op1 value
         DC    A(DP5_OP2_L9_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 11 / op2 len 9
*
         DC    A(DP5_OP1_L11_V_1)          op1 value
         DC    A(DP5_OP2_L9_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
***********************************************************************
*
*        op1 len 16 * op2 len 9
*
         DC    A(DP5_OP1_L16_V_1)          op1 value
         DC    A(DP5_OP2_L9_V_1)           op2 value
         DC    A(DP5EV000)                 expected quotient,remainder
         DC    A(0)                        expected CC
*
DP5PLPN  EQU   *-16,16                     Last parameter


***********************************************************************
*        Values for op1 and op2
***********************************************************************
*
DP5_OP1_L3_V_1   DS    0X                  op1 len 3
                 DC    AL1(3-1)            Length code
                 DC    XL3'00001C'         Value
*
DP5_OP2_L4_V_1   DS    0X                  op2 len 4
                 DC    AL1(4-1)            Length code
                 DC    XL4'1C'             Value
*
*----------------------------------------------------------------------
*
DP5_OP1_L7_V_1   DS    0X                  op1 len 7
                 DC    AL1(7-1)            Length code
                 DC    XL7'0000000000001C' Value
*
DP5_OP2_L8_V_1   DS    0X                  op2 len 8
                 DC    AL1(8-1)            Length code
                 DC    XL8'1C'             Value
*
DP5_OP2_L9_V_1   DS    0X                  op2 len 9
                 DC    AL1(9-1)            Length code
                 DC    XL9'1C'             Value
*
*----------------------------------------------------------------------
*
DP5_OP1_L11_V_1  DS   0X                   op1 len 11
                 DC    AL1(11-1)           Length code
                 DC    XL11'000000000000000000001C'    Value
*
*----------------------------------------------------------------------
*
DP5_OP1_L16_V_1  DS   0X                   op1 len 16
                 DC    AL1(16-1)           Length code
                 DC    XL16'0000000000000000000000000000001C'  Value
*
***********************************************************************
*
***********************************************************************
*        Expected values
***********************************************************************
*
DP5EV000 DC    XL16'0C'
*
         DROP  R11,R12             End addressability
*
*
***********************************************************************
*
* Routine: T06
*
*        DP   op1,op2  op1 valid; op2 zero.
*
*----------------------------------------------------------------------
*
* WARNING  WARNING  WARNING  WARNING  WARNING  WARNING  WARNING WARNING
*
* The z390 DP emulation does not correctly handle this case!
*
* The code sets the condition code to 3. The DP instruction does not
* set the condition code!
*       
*----------------------------------------------------------------------
*
*        All tests should result in a decimal-divide exception (S0CB)
*        and the condition code unchanged.
*
*        A successful test is one that results in a decimal-divide
*        exception and the condition code unchanged.
*
*        Four tests, each with eight cases. See following table.
*
*            op1 len    op2 len    op1 op2 values good or bad
*            -------    -------    --------------------------
*               3          1       op1 +/- zero, +/- non-zero
*                                  op2 +/- zero
*               7          3       op1 +/- zero, +/- non-zero
*                                  op2 +/- zero
*              11          5       op1 +/- zero, +/- non-zero
*                                  op2 +/- zero
*              16          8       op1 +/- zero, +/- non-zero
*                                  op2 +/- zero
*
*        Total number of test cases = 4 * 8 = 32.
*
*        Total number of failures, total number of successes,
*        stored in common storage fields DP06#F, DP06#S,
*        respectively.
*
***********************************************************************
*
         Using Data,R11            R11 --> data always
T06      DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         L     R13,8(,R13)         Next save area
         LR    R12,R15             R12 = base register
         USING T06,R12             Establish addressability
*
         LM    R1,R3,DP6PLP        R1 --> 1st parameter list
*                                  R2  =  len one parameter list
*                                  R3 --> last parameter list
*
         SR    R9,R9               R9 = number of tests that fail
         LR    R10,R9              R10 = number of tests that succeed
*
*
         MVI   WT#,C'6'            Test number for print routine
*
         MVI   WExpABCC,X'00'      Abends are expected
*
T06100   DS    0H
         BAS   R14,T06Div          Perform one division
         LTR   R15,R15             Test successful?
         BZ    T06200              Yes; count success
         AHI   R9,1                No; count failure
         B     T06300              Continue
T06200   DS    0H
         AHI   R10,1               Count success
T06300   DS    0H
         LARL  R15,PrtRes          Print routine
         BASR  R14,R15             Print results
         BXLE  R1,R2,T06100        Process all parameter lists
*
         STM   R9,R10,DP06ST       Save # failures, # successes
*
         L     R13,4(,R13)         Caller's save area
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
*
***********************************************************************
*
* Routine: T06Div
*
*        Perform one DP test
*
*        The DP is expected to result in a decimal-divide
*        exception (S0CB). An ESTAE is created to trap the
*        abend and retry to indicate that the test is successful.
*
*        Input:
*
*            R1 --> parameter list
*                   +0 --> value for op1; 1st byte len code
*                   +4 --> value for op2; 1st byte len code
*                   +8 --> expected quotient,remainder; 16 bytes; no lc
*                   +C  =  expected CC
*
*        Note: the expected value is value for op1 value, not a
*              quotient,remainder since the DP is expected to
*              result in a decimal-divide exception.
*
*        Output:
*
*            WErr    report error indicator; ' ' no error; '*' error
*
*            WCC     condition code after instruction executed
*                    X'FF' in leftmost byte if instruction not executed
*                    DEBUG: set if S0CB abend occurs
*
*            WResult set to result; left-justified in 16-byte field
*                    X'FF' in leftmost byte if instruction not executed
*
*            WActABCC set to abend completion code if abend occurs;
*                     zeros if no abend
*
*            WExpABCC set to expected abend completion code
*
*        Return code:  0 test succeeded
*                      4 test failed
*                     26 invalid op1,op2 length code pair
*
***********************************************************************
*
T06Div   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
*
         LA    R3,ESPARM           Parm list for ESTAE exit
         MVI   ESF1,ESF10CA+ESF10CB    Initialize ESTAE flag
*
*         OI    ESF1,ESF1DREG       Dump registers
*
         LA    R0,T06Div0CB        Retry address
         ST    R0,ESRET@           Save in ESTAE parm list
         LARL  R4,ESTAEEX          ESTAE exit
         ESTAE (R4),PARAM=(R3)     Set ESTAE
*
         L     R1,24(,R13)         Restore R1
*
         L     R13,8(,R13)         Next save area
*
         LM    R2,R4,0(R1)         R2 --> op1 value
*                                  R3 --> op2 value
*                                  R4 --> expected value; 16 bytes
         L     R0,12(,R1)          R0  =  expected CC
*
*        Note: third and fourth parameters not used!
*
         MVI   WErr,C' '           No failure
         MVI   WCC,X'FF'           No CC; instruction not executed
         MVI   WResult,X'FF'       No result; instruction not executed
*
         XC    WActABCC,WActABCC   No completion code yet
         MVC   WExpABCC,ABCC0CB    Copy expected completion code
*
         SR    R5,R5               Prepare to get op1 len code
         SR    R6,R6               Prepare to get op2 len code
         IC    R5,0(,R2)           op1 len code; 0 - 15
         SLL   R5,4                Move left one nibble
         IC    R6,0(,R3)           op2 len code; 0 - 15
         OR    R5,R6               R5 = op1LC || op2LC
         IC    R5,T06TT(R5)        Get branch table index
         SLL   R5,2                Convert to offset
*         TM    *,X'91'             Set CC 3
         LTR   R12,R12             Set CC 2
         B     T06DivBT(R5)        Branch to appropriate code
T06DivBT DS    0H
         B     T06DivER            Skip; invalid (op1 len, op2 len)
         B     T06Div_3_1          op1 len 3, op2 len 1
         B     T06Div_7_3          op1 len 7, op2 len 5
         B     T06Div_11_5         op1 len 10, op2 len 4
         B     T06Div_16_8         op1 len 16, op2 len 7
*
T06Div_3_1     DS    0H
         MVC   W1L3,1(R2)          Copy op1 value to work
         MVC   W2L1,1(R3)          Copy op2 value to work
         LA    R5,W1L3             R5 --> result
         LA    R6,L'W1L3-1         R6  =  len code of result
         DP    W1L3,W2L1           Do the multiplication
         B     T06DivCR            Check the result
T06Div_7_3     DS    0H
         MVC   W1L7,1(R2)          Copy op1 value to work
         MVC   W2L3,1(R3)          Copy op2 value to work
         LA    R5,W1L7             R5 --> result
         LA    R6,L'W1L7-1         R6  =  len code of result
         DP    W1L7,W2L3           Do the multiplication
         B     T06DivCR            Check the result
T06Div_11_5    DS    0H
         MVC   W1L11,1(R2)         Copy op1 value to work
         MVC   W2L5,1(R3)          Copy op2 value to work
         LA    R5,W1L1             R5 --> result
         LA    R6,L'W1L1-1         R6  =  len code of result
         DP    W1L11,W2L5          Do the multiplication
         B     T06DivCR            Check the result
T06Div_16_8    DS    0H
         MVC   W1L16,1(R2)         Copy op1 value to work
         MVC   W2L8,1(R3)          Copy op2 value to work
         LA    R5,W1L16            R5 --> result
         LA    R6,L'W1L16-1        R6  =  len code of result
         DP    W1L16,W2L8          Do the multiplication
         B     T06DivCR            Check the result
*
T06DivCR DS    0H
         LA    R15,4               Test did not S0CB (or S0CA); error
         B     T06DivDone          Done
T06DivER DS    0H
         LA    R15,16              Invalid op1,op2 length code pair
         B     T06DivDone          Done
T06Div0CB      DS    0H
         MVC   WActABCC,ESCOMP     Copy actual completion code
***********************************************************************
*        Next 3 lines are debug only
***********************************************************************
         IPM   R15                 Get CC, Pgm Mask
         SRL   R15,28              Isolate CC
         ST    R15,WCC             Save in print work area
***********************************************************************
*        End debug
***********************************************************************
         SR    R15,R15             Test Successful; did S0CB
T06DivDone     DS    0H
         LTR   R15,R15             Abend and recovery?
         BZ    T06DivExit          Yes; just exit
         MVI   WErr,C'*'           No; set error indicator
T06DivExit     DS    0H
*
         LR    R2,R15              Save return code
         ESTAE 0                   Cancel ESTAE
         LR    R15,R2              Restore R15
*
         L     R13,4(,R13)         Caller's save area
         L     R14,12(,R13)        Restore caller's registers
         LM    R0,R12,20(R13)      ... except for R15
         BR    R14                 Return to caller
*
***********************************************************************
*        Convert byte X'op1LC || op2LC' to branch table index
***********************************************************************
T06TT    DC    256AL1(0)           Translate table
         ORG   T06TT+X'20'         op1 len code 2, op2 len code 0
         DC    AL1(1)
         ORG   T06TT+X'62'         op1 len code 6, op2 len code 2
         DC    AL1(2)
         ORG   T06TT+X'A4'         op1 len code 10, op2 len code 4
         DC    AL1(3)
         ORG   T06TT+X'F7'         op1 len code 15, op2 len code 7
         DC    AL1(4)
         ORG   ,
*
         LTORG
*
***********************************************************************
*        Parameter lists for all tests
***********************************************************************
*
DP6PLP   DC   A(DP6PLP1,16,DP6PLPN)    1st plist, len 1, last plist
*
DP6PLP1  DS   0A                       first parameter list
***********************************************************************
*
*        op1 len 3 / op2 len 1
*
         DC    A(DP6_OP1_L3_V_Z_N_1)       op1 value
         DC    A(DP6_OP2_L1_V_N_1)         op2 value
         DC    A(DP6EV001)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_Z_N_1)       op1 value
         DC    A(DP6_OP2_L1_V_N_2)         op2 value
         DC    A(DP6EV001)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_Z_N_1)       op1 value
         DC    A(DP6_OP2_L1_V_P_1)         op2 value
         DC    A(DP6EV001)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_Z_N_1)       op1 value
         DC    A(DP6_OP2_L1_V_P_2)         op2 value
         DC    A(DP6EV001)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_Z_P_1)       op1 value
         DC    A(DP6_OP2_L1_V_N_1)         op2 value
         DC    A(DP6EV003)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_Z_P_1)       op1 value
         DC    A(DP6_OP2_L1_V_N_2)         op2 value
         DC    A(DP6EV003)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_Z_P_1)       op1 value
         DC    A(DP6_OP2_L1_V_P_1)         op2 value
         DC    A(DP6EV003)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_Z_P_1)       op1 value
         DC    A(DP6_OP2_L1_V_P_2)         op2 value
         DC    A(DP6EV003)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
*----------------------------------------------------------------------
*
         DC    A(DP6_OP1_L3_V_NZ_N_1)      op1 value
         DC    A(DP6_OP2_L1_V_N_1)         op2 value
         DC    A(DP6EV011)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_NZ_N_1)      op1 value
         DC    A(DP6_OP2_L1_V_N_2)         op2 value
         DC    A(DP6EV011)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_NZ_N_1)      op1 value
         DC    A(DP6_OP2_L1_V_P_1)         op2 value
         DC    A(DP6EV011)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_NZ_N_1)      op1 value
         DC    A(DP6_OP2_L1_V_P_2)         op2 value
         DC    A(DP6EV011)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_NZ_P_1)      op1 value
         DC    A(DP6_OP2_L1_V_N_1)         op2 value
         DC    A(DP6EV013)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_NZ_P_1)      op1 value
         DC    A(DP6_OP2_L1_V_N_2)         op2 value
         DC    A(DP6EV013)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_NZ_P_1)      op1 value
         DC    A(DP6_OP2_L1_V_P_1)         op2 value
         DC    A(DP6EV013)                 expected quotient,remainder
         DC    A(2)                        expected CC
*
         DC    A(DP6_OP1_L3_V_NZ_P_1)      op1 value
         DC    A(DP6_OP2_L1_V_P_2)         op2 value
         DC    A(DP6EV013)                 expected quotient,remainder
         DC    A(2)                        expected CC
*


DP6PLPN  EQU   *-16,16                     Last parameter


***********************************************************************
*        Values for op1 and op2
***********************************************************************
*
DP6_OP1_L3_V_Z_N_1   DS    0X                  op1 len 3 0-
                     DC    AL1(3-1)            Length code
                     DC    XL3'00000B'         Value
*
DP6_OP1_L3_V_Z_N_2   DS    0X                  op1 len 3 0-
                     DC    AL1(3-1)            Length code
                     DC    XL3'00000D'         Value
*
DP6_OP1_L3_V_Z_P_1   DS    0X                  op1 len 3 0+
                     DC    AL1(3-1)            Length code
                     DC    XL3'00000A'         Value
*
DP6_OP1_L3_V_Z_P_2   DS    0X                  op1 len 3 0+
                     DC    AL1(3-1)            Length code
                     DC    XL3'00000C'         Value
*
DP6_OP1_L3_V_NZ_N_1  DS    0X                  op1 len 3 nz-
                     DC    AL1(3-1)            Length code
                     DC    XL3'00001A'         Value
*
DP6_OP1_L3_V_NZ_N_2  DS    0X                  op1 len 3 nz-
                     DC    AL1(3-1)            Length code
                     DC    XL3'00001C'         Value
*
DP6_OP1_L3_V_NZ_P_1  DS    0X                  op1 len 3 nz+
                     DC    AL1(3-1)            Length code
                     DC    XL3'00001A'         Value
*
DP6_OP1_L3_V_NZ_P_2  DS    0X                  op1 len 3 nz+
                     DC    AL1(3-1)            Length code
                     DC    XL3'00001C'         Value
*
DP6_OP2_L1_V_N_1     DS    0X                  op2 len 1 0-
                     DC    AL1(1-1)            Length code
                     DC    XL1'0B'             Value
*
DP6_OP2_L1_V_N_2     DS    0X                  op2 len 1 0-
                     DC    AL1(1-1)            Length code
                     DC    XL1'0D'             Value
*
DP6_OP2_L1_V_P_1     DS    0X                  op2 len 1 0+
                     DC    AL1(1-1)            Length code
                     DC    XL1'0B'             Value
*
DP6_OP2_L1_V_P_2     DS    0X                  op2 len 1 0+
                     DC    AL1(1-1)            Length code
                     DC    XL1'0D'             Value
*
*----------------------------------------------------------------------
*
DP6_OP1_L7_V_Z_N_1   DS    0X                  op1 len 7 0-
                     DC    AL1(7-1)            Length code
                     DC    XL7'00000B'         Value
*
DP6_OP1_L7_V_Z_N_2   DS    0X                  op1 len 7 0-
                     DC    AL1(7-1)            Length code
                     DC    XL7'00000D'         Value
*
DP6_OP1_L7_V_Z_P_1   DS    0X                  op1 len 7 0+
                     DC    AL1(7-1)            Length code
                     DC    XL7'00000A'         Value
*
DP6_OP1_L7_V_Z_P_2   DS    0X                  op1 len 7 0+
                     DC    AL1(7-1)            Length code
                     DC    XL7'00000C'         Value
*
DP6_OP1_L7_V_NZ_N_1  DS    0X                  op1 len 7 nz-
                     DC    AL1(7-1)            Length code
                     DC    XL7'00001A'         Value
*
DP6_OP1_L7_V_NZ_N_2  DS    0X                  op1 len 7 nz-
                     DC    AL1(7-1)            Length code
                     DC    XL7'00001C'         Value
*
DP6_OP1_L7_V_NZ_P_1  DS    0X                  op1 len 7 nz+
                     DC    AL1(7-1)            Length code
                     DC    XL7'00001A'         Value
*
DP6_OP1_L7_V_NZ_P_2  DS    0X                  op1 len 7 nz+
                     DC    AL1(3-1)            Length code
                     DC    XL7'00001C'         Value
*
DP6_OP2_L3_V_N_1     DS    0X                  op2 len 3 0-
                     DC    AL1(3-1)            Length code
                     DC    XL3'0B'             Value
*
DP6_OP2_L3_V_N_2     DS    0X                  op2 len 3 0-
                     DC    AL1(3-1)            Length code
                     DC    XL3'0D'             Value
*
DP6_OP2_L3_V_P_1     DS    0X                  op2 len 3 0+
                     DC    AL1(3-1)            Length code
                     DC    XL3'0B'             Value
*
DP6_OP2_L3_V_P_2     DS    0X                  op2 len 3 0+
                     DC    AL1(3-1)            Length code
                     DC    XL3'0D'             Value
*
*----------------------------------------------------------------------
*
DP6_OP1_L11_V_Z_N_1  DS    0X                  op1 len 11 0-
                     DC    AL1(11-1)           Length code
                     DC    XL11'00000B'        Value
*
DP6_OP1_L11_V_Z_N_2  DS    0X                  op1 len 11 0-
                     DC    AL1(11-1)           Length code
                     DC    XL11'00000D'        Value
*
DP6_OP1_L11_V_Z_P_1  DS    0X                  op1 len 11 0+
                     DC    AL1(11-1)           Length code
                     DC    XL11'00000A'        Value
*
DP6_OP1_L11_V_Z_P_2  DS    0X                  op1 len 11 0+
                     DC    AL1(11-1)           Length code
                     DC    XL11'00000C'        Value
*
DP6_OP1_L11_V_NZ_N_1 DS    0X                  op1 len 11 nz-
                     DC    AL1(11-1)           Length code
                     DC    XL11'00001A'        Value
*
DP6_OP1_L11_V_NZ_N_2 DS    0X                  op1 len 11 nz-
                     DC    AL1(11-1)           Length code
                     DC    XL11'00001C'        Value
*
DP6_OP1_L11_V_NZ_P_1 DS    0X                  op1 len 11 nz+
                     DC    AL1(11-1)           Length code
                     DC    XL11'00001A'        Value
*
DP6_OP1_L11_V_NZ_P_2 DS    0X                  op1 len 11 nz+
                     DC    AL1(11-1)           Length code
                     DC    XL11'00001C'        Value
*
DP6_OP2_L5_V_N_1     DS    0X                  op2 len 5 0-
                     DC    AL1(5-1)            Length code
                     DC    XL5'0B'             Value
*
DP6_OP2_L5_V_N_2     DS    0X                  op2 len 5 0-
                     DC    AL1(5-1)            Length code
                     DC    XL5'0D'             Value
*
DP6_OP2_L5_V_P_1     DS    0X                  op2 len 5 0+
                     DC    AL1(5-1)            Length code
                     DC    XL5'0B'             Value
*
DP6_OP2_L5_V_P_2     DS    0X                  op2 len 5 0+
                     DC    AL1(5-1)            Length code
                     DC    XL5'0D'             Value
*
*----------------------------------------------------------------------
*
DP6_OP1_L16_V_Z_N_1  DS    0X                  op1 len 16 0-
                     DC    AL1(16-1)           Length code
                     DC    XL16'00000B'        Value
*
DP6_OP1_L16_V_Z_N_2  DS    0X                  op1 len 16 0-
                     DC    AL1(16-1)           Length code
                     DC    XL16'00000D'        Value
*
DP6_OP1_L16_V_Z_P_1  DS    0X                  op1 len 16 0+
                     DC    AL1(16-1)           Length code
                     DC    XL16'00000A'        Value
*
DP6_OP1_L16_V_Z_P_2  DS    0X                  op1 len 16 0+
                     DC    AL1(16-1)           Length code
                     DC    XL16'00000C'        Value
*
DP6_OP1_L16_V_NZ_N_1 DS    0X                  op1 len 16 nz-
                     DC    AL1(16-1)           Length code
                     DC    XL16'00001A'        Value
*
DP6_OP1_L16_V_NZ_N_2 DS    0X                  op1 len 16 nz-
                     DC    AL1(16-1)           Length code
                     DC    XL16'00001C'        Value
*
DP6_OP1_L16_V_NZ_P_1 DS    0X                  op1 len 16 nz+
                     DC    AL1(16-1)           Length code
                     DC    XL16'00001A'        Value
*
DP6_OP1_L16_V_NZ_P_2 DS    0X                  op1 len 16 nz+
                     DC    AL1(16-1)           Length code
                     DC    XL16'00001C'        Value
*
DP6_OP2_L8_V_N_1     DS    0X                  op2 len 8 0-
                     DC    AL1(8-1)            Length code
                     DC    XL8'0B'             Value
*
DP6_OP2_L8_V_N_2     DS    0X                  op2 len 8 0-
                     DC    AL1(8-1)            Length code
                     DC    XL8'0D'             Value
*
DP6_OP2_L8_V_P_1     DS    0X                  op2 len 8 0+
                     DC    AL1(8-1)            Length code
                     DC    XL8'0B'             Value
*
DP6_OP2_L8_V_P_2     DS    0X                  op2 len 8 0+
                     DC    AL1(8-1)            Length code
                     DC    XL8'0D'             Value
*
***********************************************************************
*
***********************************************************************
*        Expected values
***********************************************************************
*
DP6EV000 DC    XL16'0C'
*
DP6EV001 DC    XL16'0B'
*
DP6EV002 DC    XL16'0D'
*
DP6EV003 DC    XL16'0A'
*
DP6EV004 DC    XL16'0C'
*
DP6EV011 DC    XL16'1B'
*
DP6EV012 DC    XL16'1D'
*
DP6EV013 DC    XL16'1A'
*
DP6EV014 DC    XL16'1C'
*
         DROP  R11,R12             End addressability
         Title 'ESTAE Exit'
***********************************************************************
*        ESTAE exit
*
*        Retry for S0C6, S0C7; continue termination otherwise
***********************************************************************
ESTAEEX  DS    0H
         USING ESTAEEX,R15         Establish addressability
         USING SDWA,R1             Overlay SDWA
         L     R2,SDWAPARM         ESTAE Parm list
         LM    R2,R4,0(R2)         R2: A(return address)
*                                  R3: word for completion code
*                                  R4: A(flags for ESTAE)
         L     R0,0(,R2)           Return address
         L     R5,SDWAABCC         Completion code
         ST    R5,0(,R3)           Return the completion code
***********************************************************************
* Note: completion code was X'000000Cx' - should be X'000Cx000'
*
* Note: ESTAE exit not driven when ABEND 100,DUMP issued???
*
* Note: Setting R15 = 0 at exit (no retry) resulted in recursive
*       calls to the exit for S0C1 abends!
*
* Check on these later.
***********************************************************************
*
         TM    0(R4),ESF1DREG      Dump Registers?
         BZ    EXNODREG            No
         LG    R8,SDWAEC1          EC PSW at error
         XDUMP ,                   Show values
EXNODREG DS    0H
*
         LA    R2,4                Assume retry
*
         TM    0(R4),ESF10C6       Monitoring S0C6?
         BZ    EX10                No; check next
         CHI   R5,X'00C6'          One we're checking?
         BE    EX100               Yes: retry
EX10     DS    0H
         TM    0(R4),ESF10C7       Monitoring S0C7?
         BZ    EX20                No; check next
         CHI   R5,X'00C7'          One we're checking?
         BE    EX100               Yes: retry
EX20     DS    0H
         TM    0(R4),ESF10CA       Monitoring S0CA?
         BZ    EX30                No; check next
         CHI   R5,X'00CA'          One we're checking?
         BE    EX100               Yes: retry
EX30     DS    0H
         TM    0(R4),ESF10CB       Monitoring S0CB?
         BZ    EX40                No; check next
         CHI   R5,X'00CB'          One we're checking?
         BE    EX100               Yes: retry
EX40     DS    0H
         SR    R2,R2               Do not retry
*NSI     B     EX100               Exit
EX100    DS    0H
         SETRP ,
         LR    R15,R2              4: Retry, 0: no retry
         BR    R14                 Return to operating system
*
         LTORG
*
         DROP  R15                 End ESTAE exit addressability
***********************************************************************
*        End ESTAE exit
***********************************************************************
*
         TITLE 'Print routines'
*
***********************************************************************
*
* Routine: PrtRes 
*
*        Print result of instruction execution
*
*        Input:
*
*          WRptType Report type; C'A' = all; C'S' = summary
*          WT#      Test number; C'1' - C'9'
*          WErr     Error indicator; C' ' or C'*'
*          WCC      Condition code after instruction; fullword;
*                   X'FF' in leftmost byte if not applicable
*          WResult  Result of instruction; 16 bytes;
*                   X'FF' in leftmost byte if not applicable
*          WActABCC Actual abend completion code when abend expected;
*                   fullword; unpredictable if no abend expected
*          WExpABCC Expected abend completion code; fullword;
*                   X'FF' in leftmost byte if no abend expected
*
*          R11 -->  Data area
*
*          R1 --> Parameter list for instruction execution
*                 +0 --> operand 1 value
*                 +4 --> operand 2 value
*                 +8 --> expected result
*                 +C  =  expected condition code
*
***********************************************************************
*    
         USING Data,R11            Overlay data area
*
PrtRes   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         LR    R12,R15             R12 = base register
         USING PrtRes,R12          Establish addressability
*
         CLI   WRptType,C'A'       Print all data?
         BNE   PRExit              No; nothing to do here
*
         LM    R2,R5,0(R1)         R2 --> op1 value
*                                  R3 --> op2 value
*                                  R4 --> expected product; 16 bytes
*                                  R5  =  expected CC
*
         MVC   W1T#,WT#            Test number
         MVC   W1Err,WErr          Copy error indicator
*
         MVC   W1Dvnd,Spaces       Initialize dividend to spaces
         MVC   W1Dvsr,Spaces       Also divisor
*
         SR    R7,R7               Prepare to get length code
         IC    R7,0(R2)            Length code of operand 1 (0-15)
*
         LA    R15,1(,R2)          R15 --> op1 value
         EX    R7,PRMVC            Copy op1 value to work area
         UNPK  DW(9),WK16(5)       Convert to printable hex
         UNPK  DW+8(9),WK16+4(5)   ... continue conversion
         UNPK  DW+16(9),WK16+8(5)  ... continue conversion
         UNPK  DW+24(9),WK16+12(5) ... continue conversion
         TR    DW(32),H2P2         Finish converison
*
         LA    R7,1(R7,R7)         Length code of printable hex
         LA    R14,W1Dvnd+L'W1Dvnd-1   Last byte of destination
         SR    R14,R7              Right-justified position
         LA    R15,DW              Source
         EX    R7,PRMVC2           Copy printable hex to print line
*
         SR    R7,R7               Prepare to get length code
         IC    R7,0(R3)            Length code of operand 2 (0-7)
*
         LA    R15,1(,R3)          R15 --> op2 value
         EX    R7,PRMVC            Copy op2 value to work area
         UNPK  DW(9),WK16(5)       Convert to printable hex
         UNPK  DW+8(9),WK16+4(5)   ... continue conversion
         UNPK  DW+16(9),WK16+8(5)  ... continue conversion
         UNPK  DW+24(9),WK16+12(5) ... continue conversion
         TR    DW(32),H2P2         Finish converison
*
         LA    R7,1(R7,R7)         Length code of printable hex
         LA    R14,W1Dvsr          Destination (left-justified)
         LA    R15,DW              Source
         EX    R7,PRMVC2           Copy printable hex to print line
*
         WTO   MF=(E,WTO1)         First line of report sequence
*
         CLI   WResult,X'FF'       Was result saved?
         BE    PR100               No; skip print of line 2
*
         MVC   W2AAns,Spaces       Initialize actual answer to spaces
         MVC   W2EAns,Spaces       Also expected answer
         MVC   W2ELit,Spaces       Also error message area
*
         SR    R7,R7               Prepare to get length code
         IC    R7,0(R2)            Length code of operand 1 (0-15)
*
         LA    R15,WResult         R15 --> actual result
         EX    R7,PRMVC            Copy result to work area
         UNPK  DW(9),WK16(5)       Convert to printable hex
         UNPK  DW+8(9),WK16+4(5)   ... continue conversion
         UNPK  DW+16(9),WK16+8(5)  ... continue conversion
         UNPK  DW+24(9),WK16+12(5) ... continue conversion
         TR    DW(32),H2P2         Finish converison
*
         LA    R7,1(R7,R7)         Length code of printable hex
         LA    R14,W2AAns          Destination
         LA    R15,DW              Source
         EX    R7,PRMVC2           Copy printable hex to print line
*
         SR    R7,R7               Prepare to get length code
         IC    R7,0(R2)            Length code of operand 1 (0-15)
*
         LA    R15,15(,R4)         R15 --> last byte of expected result
         SR    R15,R7              R15 --> expected result
         EX    R7,PRMVC            Copy result to work area
         UNPK  DW(9),WK16(5)       Convert to printable hex
         UNPK  DW+8(9),WK16+4(5)   ... continue conversion
         UNPK  DW+16(9),WK16+8(5)  ... continue conversion
         UNPK  DW+24(9),WK16+12(5) ... continue conversion
         TR    DW(32),H2P2         Finish converison
*
         LA    R7,1(R7,R7)         Length code of printable hex
         LA    R14,W2EAns          Destination
         LA    R15,DW              Source
         EX    R7,PRMVC2           Copy printable hex to print line
*
         WTO   MF=(E,WTO2)         Second line of report sequence
*
PR100    DS    0H
         CLI   WCC,X'FF'           Was condition code saved?
         BE    PR200               No; skip print of line 3
         MVC   W3ELit,Spaces       Initialize error message to spaces
         MVC   W3ACC,WCC+3         Copy actual CC
         OI    W3ACC,X'F0'         Make printable
         STC   R5,W3ECC            Expected CC
         OI    W3ECC,X'F0'         Make printable
*
         WTO   MF=(E,WTO3)         Third line of report sequence
*
PR200    DS    0H
         CLI   WExpABCC,X'FF'      Abend expected?
         BE    PR300               No; skip print of abend codes
         MVC   W4ELit,spaces       Initialize error message to spaces
         UNPK  DW(9),WActABCC(5)   Convert actual ABCC
         TR    DW,H2P2             ... to printable hex
         MVC   W4AABCC,DW          Copy to print line
         UNPK  DW(9),WExpABCC(5)   Convert expected ABCC
         TR    DW,H2P2             ... to printable hex
         MVC   W4EABCC,DW          Copy to print line
*
         WTO   MF=(E,WTO4)         Fourth line of report sequence
*
PR300    DS    0H
PRExit   DS    0H
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
PRMVC    MVC   WK16(*-*),0(R15)    Copy value to work area
PRMVC2   MVC   0(*-*,R14),0(R15)   Copy source to destination
*
         DROP  R11,R12             End addressability
*
***********************************************************************
*
* Routine: PrtTot
*
*        Print totals for all tests
*
***********************************************************************
*
         USING Data,R11            Overlay data area
PrtTot   DS    0H
         STM   R14,R12,12(R13)     Save caller's registers
         LR    R12,R15             R12 = base register
         USING PrtTot,R12          Establish addressability
         L     R13,8(,R13)         Next save area
*
         SR    R8,R8               Accumulate # fails
         LR    R9,R8               Accumulate # passes
*
         LM    R3,R5,PTTests       R3 --> first test total
*                                  R4  =  len one test total
*                                  R5 --> last test total
PTLP     DS    0H
         LM    R6,R7,0(R3)         R6 --> (# fails, # passes)
*                                  R7 --> test number (2 chars)
         LM    R0,R1,0(R6)         R0 = # fails, R1 = # passes
         AR    R8,R0               Accumulate # fails
         AR    R9,R1               Accumulate # passes
*
         CVD   R0,PTDW             Convert to packed decimal
         MVC   PTWK,PTPATT1        Copy edit pattern to work
         ED    PTWK,PTDW+5         Edit number
         MVC   PTW1#F,PTWK+1       Copy to print line
*
         CVD   R1,PTDW             Convert to packed decimal
         MVC   PTWK,PTPATT1        Copy edit pattern to work
         ED    PTWK,PTDW+5         Edit number
         MVC   PTW1#P,PTWK+1       Copy to print line
*
         MVC   PTW1T#,0(R7)        Copy test number to print line
*
         WTO   MF=(E,PTWTO1)       Show subtotal line
*
         BXLE  R3,R4,PTLP          Show all subtotals
*
         WTO   MF=(E,PTWTO2)       Lines under subtotals
*
         CVD   R8,PTDW             Convert to packed decimal
         MVC   PTWK,PTPATT1        Copy edit pattern to work
         ED    PTWK,PTDW+5         Edit number
         MVC   PTW3#F,PTWK+1       Copy to print line
*
         CVD   R9,PTDW             Convert to packed decimal
         MVC   PTWK,PTPATT1        Copy edit pattern to work
         ED    PTWK,PTDW+5         Edit number
         MVC   PTW3#P,PTWK+1       Copy to print line
*
         WTO   MF=(E,PTWTO3)       Show totals line
*
         L     R13,4(,R13)         Caller's save area
         LM    R14,R12,12(R13)     Restore caller's registers
         BR    R14                 Return to caller
*
PTTests  DC    A(PTT1,8,PTTN)      1st, len 1, last
PTT1     DS    0A                  First test totals
         DC    A(DP01ST,PTT#)
         DC    A(DP02ST,PTT#+2)
         DC    A(DP03ST,PTT#+4)
         DC    A(DP04ST,PTT#+6)
         DC    A(DP05ST,PTT#+8)
         DC    A(DP06ST,PTT#+10)
PTTN     EQU   *-8,8               Last test totals
*
PTT#     DC    C'010203040506'     2-digit literals for test numbers
*
PTDW     DS    D                   Doubleword work
PTWK     DS    CL6                 Work area for number conversion
PTPATT1  DC    X'402020202120'     Edit pattern
*
PTWTO1   WTO  'Test xx:  NumFail xxxxx  NumPass xxxxx',MF=L
PTW1T#   EQU   PTWTO1+4+5,2
PTW1#F   EQU   PTWTO1+4+18,5
PTW1#P   EQU   PTWTO1+4+33,5
*
PTWTO2   WTO  '                  -----          -----',MF=L
*
PTWTO3   WTO  'Totals:   TotFail xxxxx  TotPass xxxxx',MF=L
PTW3#F   EQU   PTWTO3+4+18,5
PTW3#P   EQU   PTWTO3+4+33,5
*
         DROP  R11,R12             End addressability
*
         TITLE 'Display CC, program mask, amode, and GPRs via WTO'
*
***********************************************************************
*
* Routine: DUMPREGS
*
* Display all 16 GPRs, addressing mode, condition code and program mask
*
* Caller restores registers
*
***********************************************************************
*
         PUSH  USING               Save USING state
         DROP  ,                   End all addressability
DUMPREGS DS    0H
         LR    12,15               Register 12 = base register
         USING DUMPREGS,12         Establish addressability
         ST    14,DRR14            Save return address
*
         MVC   XREGS,0(1)          Copy registers
         MVC   XCCPM,128(1)        Copy CC, program mask
*
         UNPK  DW2(3),XCCPM(2)     Convert CC and program mask
         TR    DW2(2),H2P          ... to printable hex
         MVC   W2CCPM,DW2          Copy to WTO
*
         TAM   ,                   Get current amode
         BC    B'1000',DRA24       24-bit mode
         BC    B'0100',DRA31       31-bit mode
         MVC   W2AMODE,DRAM64      64-bit mode: copy literal to WTO
         B     DRAX                Continue
DRA24    DS    0H
         MVC   W2AMODE,DRAM24      Copy literal to WTO
         B     DRAX                Continue
DRA31    DS    0H
         MVC   W2AMODE,DRAM31      Copy literal to WTO
*NSI     B     DRAX                Continue
DRAX     DS    0H
*
         WTO   MF=(E,WTOCC)        Dump CC and program mask
*
         LA    3,XREGS             Beginning of register area
         LA    8,XREGS+L'XREGS-1   Last byte of register area
         LA    6,WTOLIT1-L'WTOLIT1 Before first literal
DRLP1    DS    0H                  One line
         LA    6,L'WTOLIT(,6)      Next literal
         MVC   WTOLIT,0(6)         Copy literal for line
         LA    7,WTOR1             First register on output line
         LA    5,4*8(,3)           Past group of 4 registers
DRLP2    DS    0H
         UNPK  DW2(9),0(5,3)       Convert one register
         UNPK  DW2+8(9),4(5,3)     ... to printable hex
         TR    DW2(16),H2P         Finish conversion
         MVC   0(16,7),DW2         Copy to WTO
         LA    7,L'WTOR1+1(,7)     Next register on output line
         LA    3,8(,3)             Next register to dump
         CR    3,5                 Finished line?
         BL    DRLP2               No; continue on line
*
         WTO   MF=(E,WTO0)         Dump one line of registers
*
         CR    5,8                 More registers?
         BL    DRLP1               Yes; do next group
*
         L     14,DRR14            Restore return address
         BR    14                  Return to caller
DRR14    DS    F                   Save return address
WTOLIT1  DS    0CL(L'WTOLIT03)     Beginning of literals for lines
WTOLIT03 DC    C'R0-R3'
WTOLIT47 DC    C'R4-R7'
WTOLIT8B DC    C'R8-RB'
WTOLITCF DC    C'RC-RF'
*
WTO0     WTO   'xxxxx  xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxx
               xx xxxxxxxxxxxxxxxx',MF=L
WTOLIT   EQU   WTO0+4,5
WTOR1    EQU   WTO0+4+7,16
WTOR2    EQU   WTO0+4+24,16
WTOR3    EQU   WTO0+4+41,16
WTOR4    EQU   WTO0+4+58,16
*
WTOCC    WTO   'CCPM   xx  AM  xx',MF=L
W2CCPM   EQU   WTOCC+4+7,2
W2AMODE  EQU   WTOCC+4+15,2
*
DRAM24   DC    C'24'               Amode 24 literal
DRAM31   DC    C'31'               Amode 31 literal
DRAM64   DC    C'64'               Amode 64 literal
*
DW2      DS    2D,Xl1
*
         DS    0D
         DS    F
XCCPM    DS    XL4                 Condition code and program mask
XREGS    DS    XL128,Xl1           Registers: 0--15
*
H2P      EQU   *-240
         DC    C'0123456789ABCDEF'
*
         POP   USING               Restore USING state
***********************************************************************
         USING Data,R11            R11 --> Data always
Data     DS    0D
***********************************************************************
*        Save areas: 8 pre-chained
***********************************************************************
SA       DS    0D
SA1      DC    18F'0'              Save area
         ORG   SA1+4
         DC    A(0,SA2)
         ORG   ,
SA2      DC    18F'0'              Save area
         ORG   SA2+4
         DC    A(SA1,SA3)
         ORG   ,
SA3      DC    18F'0'              Save area
         ORG   SA3+4
         DC    A(SA2,SA4)
         ORG   ,
SA4      DC    18F'0'              Save area
         ORG   SA4+4
         DC    A(SA3,SA5)
         ORG   ,
SA5      DC    18F'0'              Save area
         ORG   SA5+4
         DC    A(SA4,SA6)
         ORG   ,
SA6      DC    18F'0'              Save area
         ORG   SA6+4
         DC    A(SA5,SA7)
         ORG   ,
SA7      DC    18F'0'              Save area
         ORG   SA7+4
         DC    A(SA6,SA8)
         ORG   ,
SA8      DC    18F'0'              Save area
         ORG   SA8+4
         DC    A(SA7,0)
         ORG   ,
*
***********************************************************************
*        ESTAE data
***********************************************************************
ESPARM   DS    0A                  Parameter list for ESTAE exit
         DC    A(ESRET@)           A(Return address for ESTAE)
         DC    A(ESCOMP)           A(Word for completion code)
         DC    A(ESFLAGS)          A(flags for ESTAE exit)
ESRET@   DC    A(0)                Return address for ESTAE
ESCOMP   DC    F'0'                Completion code from ESTAE
ESFLAGS  DS    0XL4                Flags for ESTAE exit
ESF1     DC    X'00'               Flag 1
ESF10C6  EQU   B'10000000'         Monitor S0C6 (Specification)
ESF10C7  EQU   B'01000000'         Monitor S0C7 (Data)
ESF10CA  EQU   B'00100000'         Monitor S0CA (Decimal-overflow)
ESF10CB  EQU   B'00010000'         Monitor S0CB (Decimal-divide)
ESF1DREG EQU   B'00000001'         Dump registers
         DC    XL3'00'             Reserved
***********************************************************************
*        Test subtotals: failures, successes
***********************************************************************
*
*        Subtotals for DP tests 1 -- 6
*
DP01ST   DS    0D
DP01#F   DS    F                   Number of failures
DP01#S   DS    F                   Number of successes
*
DP02ST   DS    0D
DP02#F   DS    F                   Number of failures
DP02#S   DS    F                   Number of successes
*
DP03ST   DS    0D
DP03#F   DS    F                   Number of failures
DP03#S   DS    F                   Number of successes
*
DP04ST   DS    0D
DP04#F   DS    F                   Number of failures
DP04#S   DS    F                   Number of successes
*
DP05ST   DS    0D
DP05#F   DS    F                   Number of failures
DP05#S   DS    F                   Number of successes
*
DP06ST   DS    0D
DP06#F   DS    F                   Number of failures
DP06#S   DS    F                   Number of successes
*
         DS    0D
***********************************************************************
*        Work fields
***********************************************************************
*
*        Values used in Print routine
*
ABCC0C6  DC    A(X'0C6')           Abend completion code S0C6
ABCC0C7  DC    A(X'0C7')           Abend completion code S0C7
ABCC0CA  DC    A(X'0CA')           Abend completion code S0CA
ABCC0CB  DC    A(X'0CB')           Abend completion code S0CB
*
Spaces   DC    CL32' '             32 bytes of spaces
*
WRptType DS    C                   Report type: A (all) or S (summary)
WT#      DS    C                   Test number
WErr     DS    C                   Error indicator; blank or *
         DS    XL1                 Unused; alignment
WCC      DS    F                   Condition code after execution
WResult  DS    XL16                Results copied here; left-justified
WActABCC DS    F                   Actual abend completion code
WExpABCC DS    F                   Expected abend completion code
*
*        Work fields for packed decimal instructions
*
W1L16    DS    PL16                Packed length 16
         ORG   W1L16+1
W1L15    DS    PL15                Packed length 15
         ORG   W1L16+2
W1L14    DS    PL14                Packed length 14
         ORG   W1L16+3
W1L13    DS    PL13                Packed length 13
         ORG   W1L16+4
W1L12    DS    PL12                Packed length 12
         ORG   W1L16+5
W1L11    DS    PL11                Packed length 11
         ORG   W1L16+6
W1L10    DS    PL10                Packed length 10
         ORG   W1L16+7
W1L9     DS    PL9                 Packed length 9
         ORG   W1L16+8
W1L8     DS    PL8                 Packed length 8
         ORG   W1L16+9
W1L7     DS    PL7                 Packed length 7
         ORG   W1L16+10
W1L6     DS    PL6                 Packed length 6
         ORG   W1L16+11
W1L5     DS    PL5                 Packed length 5
         ORG   W1L16+12
W1L4     DS    PL4                 Packed length 4
         ORG   W1L16+13
W1L3     DS    PL3                 Packed length 3
         ORG   W1L16+14
W1L2     DS    PL2                 Packed length 2
         ORG   W1L16+15
W1L1     DS    PL1                 Packed length 1
         ORG   ,
*
W2L16    DS    PL16                Packed length 16
         ORG   W2L16+1
W2L15    DS    PL15                Packed length 15
         ORG   W2L16+2
W2L14    DS    PL14                Packed length 14
         ORG   W2L16+3
W2L13    DS    PL13                Packed length 13
         ORG   W2L16+4
W2L12    DS    PL12                Packed length 12
         ORG   W2L16+5
W2L11    DS    PL11                Packed length 11
         ORG   W2L16+6
W2L10    DS    PL10                Packed length 10
         ORG   W2L16+7
W2L9     DS    PL9                 Packed length 9
         ORG   W2L16+8
W2L8     DS    PL8                 Packed length 8
         ORG   W2L16+9
W2L7     DS    PL7                 Packed length 7
         ORG   W2L16+10
W2L6     DS    PL6                 Packed length 6
         ORG   W2L16+11
W2L5     DS    PL5                 Packed length 5
         ORG   W2L16+12
W2L4     DS    PL4                 Packed length 4
         ORG   W2L16+13
W2L3     DS    PL3                 Packed length 3
         ORG   W2L16+14
W2L2     DS    PL2                 Packed length 2
         ORG   W2L16+15
W2L1     DS    PL1                 Packed length 1
         ORG   ,
*
***********************************************************************
*        Report lines
***********************************************************************
*
WTOStart WTO   '***** DP instruction tests started *****',MF=L
*
WTOEnd   WTO   '***** DP instruction tests ended   *****',MF=L
*
* Line 1: length 70
*        +00(1) C test routine; 1-9
*        +01(1) space
*        +02(32) printable hex dividend; right-aligned
*        +34(3) " * "
*        +37(32) printable hex divisor; left-aligned
*
* Line 2: length 90
*        +00(4) spaces
*        +04(6) spaces or "ERROR"
*        +10(6) literal "AnsExp"
*        +16(1) space
*        +17(32) printable hex expected answer; left-jusified
*        +49(2) spaces
*        +51(6) literal "AnsAct"
*        +57(1) space
*        +58(32) printable hex actual answer; left-justified
*
* Line 3: length 26
*        +00(4) spaces
*        +04(5) spaces or "ERROR"
*        +09(1) space
*        +10(5) literal "CCAct"
*        +15(1) space
*        +16(1) actual condition code; 0-3
*        +17(2) spaces
*        +19(5) literal "CCExp"
*        +24(1) space
*        +25(1) expected condition code; 3
*
* Line 4: length 44
*        +00(4) spaces
*        +04(5) spaces or "ERROR"
*        +09(1) space
*        +10(7) literal "ABCCAct"
*        +17(1) space
*        +18(8) actual abend completion code; fullword
*        +26(2) spaces
*        +28(7) literal "ABCCExp"
*        +35(1) space
*        +36(8) expected abend completion code; fullword
*
WTO1     WTO   'xx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx / xxxxxxxxxxxxxxxxxx
               xxxxxxxxxxxxxxx',MF=L
WT01Len  EQU   *-WTO1-4
*
W1T#     EQU   WTO1+4,1
W1Err    EQU   WTO1+4+1,1
W1Dvnd   EQU   WTO1+4+3,32
W1Dvsr   EQU   WTO1+4+38,32
*
WTO2     WTO   '    xxxxx AnsAct xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  AnsEx
               xp xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',MF=L
WTO2Len  EQU   *-WTO2-4
*
W2ELit   EQU   WTO2+4+4,5
W2AAns   EQU   WTO2+4+17,32
W2EAns   EQU   WTO2+4+58,32
*
WTO3     WTO   '    xxxxx CCAct x  CCExp x',MF=L
WTO3Len  EQU   *-WTO3-4
*
W3ELit   EQU   WTO3+4+4,5
W3ACC    EQU   WTO3+4+16,1
W3ECC    EQU   WTO3+4+25,1
*
WTO4     WTO   '    xxxxx ABCCAct xxxxxxxx  ABCCExp xxxxxxxx',MF=L
WTO4Len  EQU   *-WTO4-4
*
W4ELit   EQU   WTO4+4+4,5
W4AABCC  EQU   WTO4+4+18,8
W4EABCC  EQU   WTO4+4+36,8
*
DW       DS    4D,XL1              Work doublewords, pad
*
WK16     DS    XL16,XL1            Work area for number conversion, pad
*
H2P2     EQU   *-240               Convert to printable hex
         DC    C'0123456789ABCDEF'
*       
         DS    0D
***********************************************************************
*        End data
***********************************************************************
         DROP  R11                 End data area overlay
***********************************************************************
         EQUREGS ,
***********************************************************************
         IHASDWA ,                 DSECT for SDWA
*                                                                 
         END   TDP
