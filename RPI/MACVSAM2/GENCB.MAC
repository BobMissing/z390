         MACRO
.**********************************************************************
.* Copyright 2005 Automated Software Tools Corporation                *
.* This source code is part of z390 assembler/emulator package        *
.* The z390 package is distributed under GNU general public license   *
.* Author - Don Higgins                                               *
.* Date   - 09/16/07                                                  *
.**********************************************************************
.* 09/16/07 RPI 682 INITIAL CODING                                    *
.* 09/20/07 RPI 703 CORRECT MISSING QUOTE IN AIF                      *
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility           *
.*                                                                    *
.* 14/04/19          zVSAM V2 version (Melvyn Maltz)                  *
.*                   Reconstructed code                               *
.*                   &DSNAME removed                                  *
.*                   ZGENCB, ZGENACB, ZGENRPL combined                *
.**********************************************************************
.* MF=I or omitted    Generates code to create the block(s)
.* MF=L               Generates CBMR inline
.* MF=(L,addr)        Generates CBMR inline and then moves it to addr
.* MF=(L,addr,label)  as above and generates label equ size
.*
.* MF=(E,addr)        Modifies the CBMR at addr and generates code to
.*                    create the block(s) using the CBMR
.*
.* MF=(G,addr)        Generates CBMR inline and then moves it to addr
.*                    Create the block(s) using the CBMR
.* MF=(G,addr,label)  as above and generates label equ size
.*
.* addr can be label or (reg), reg cannot be R0, R1, R14 or R15
.*
&N       GENCB &AM=VSAM,          VSAM                                 X
               &BLK=,             ACB, RPL OR EXLST                    X
               &COPIES=,          NUMBER OF COPIES                     X
               &LENGTH=,          LENGTH OF WAREA                      X
               &LOC=,             AREA BELOW OR ANY                    X
               &WAREA=,           USER PROVIDED WORK AREA              X
               &EXLST=,           ACBEXLST                             X
               &DDNAME=,          ACBDDNM                              X
               &PASSWD=,          ACBPASSW                             X
               &MACRF=,           ACBMACR1-4                           X
               &BUFND=,           ACBBUFND                             X
               &BUFNI=,           ACBBUFNI                             X
               &BUFSP=,           ACBBUFSP                             X
               &RMODE31=,         ACBMODE                              X
               &STRNO=,           ACBSTRNO                             X
               &BSTRNO=,          ACBBSTNO                             X
               &MAREA=,           ACB NOT SUPPORTED                    X
               &MLEN=,            ACB NOT SUPPORTED                    X
               &RLSREAD=,         ACB NOT SUPPORTED                    X
               &SHRPOOL=,         ACBSHRP                              X
               &ACB=,             RPLDACB                              X
               &AREA=,            RPLAREA                              X
               &AREALEN=,         RPLAREAL                             X
               &ARG=,             RPLARG                               X
               &ECB=,             RPLECB                               X
               &MSGAREA=,         RPLMSGAR                             X
               &NXTRPL=,          RPLNXTRP                             X
               &RECLEN=,          RPLRECLN                             X
               &MSGLEN=,          RPLMSGLN                             X
               &KEYLEN=,          RPLKEYLN                             X
               &OPTCD=,           RPLOPTCD (RPLOPT1-2)                 X
               &TRANSID=,         RPL NOT SUPPORTED                    X
               &EODAD=,           EXLST EODAD                          X
               &LERAD=,           EXLST LERAD                          X
               &SYNAD=,           EXLST SYNAD                          X
               &JRNAD=,           EXLST NOT SUPPORTED                  X
               &UPAD=,            EXLST NOT SUPPORTED                  X
               &RLSWAIT=,         EXLST NOT SUPPORTED                  X
               &MF=I
.*
         LCLA  &TCOPY
         LCLA  &OFFREG(10)
         LCLC  &OFFCHR(10)
.* FOR EXLST
         LCLB  &EXLHAND
         LCLB  &EOD_A,&EOD_N,&EOD_L
         LCLB  &LER_A,&LER_N,&LER_L
         LCLB  &SYN_A,&SYN_N,&SYN_L
.* FOR ACB
         GBLB  &RMODEBF           PASSED TO ZGENMACF
         GBLC  &ZGENMACF1,&ZGENMACF2,&ZGENMACF3,&ZGENMACF4
         LCLB  &ACBHAND
         LCLB  &RMODECB
.* FOR RPL
         GBLC  &ZGENOPT1,&ZGENOPT2
         LCLB  &RPLHAND
.*
         AIF   ('&N' NE '')
&N       DS    0D
         AEND
.*
.* ELIMINATE POSITIONALS
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'GENCB UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AIF   (&NPOS GT 0).POSLOOP
.*
.POSEND  ANOP
         AIF   ('&AM' NE 'VSAM')
         MNOTE 12,'GENCB ONLY AM=VSAM IS SUPPORTED'
         AEND
.* VALIDATE MF=
         AIF   ('&MF(1)' NE 'I' AND                                    X
               '&MF(1)'  NE 'L' AND                                    X
               '&MF(1)'  NE 'E' AND                                    X
               '&MF(1)'  NE 'G')
         MNOTE 12,'GENCB MF= INVALID - &MF'
         AEND
.*
         AIF   ('&COPIES' NE '')
            AIF   (T'&COPIES NE 'N')
         MNOTE 12,'GENCB COPIES= IS NOT NUMERIC - &COPIES'
            AEND
            AIF   (&COPIES EQ 0)
         MNOTE 12,'GENCB COPIES= CANNOT BE ZERO'
            AEND
         AEND
.*
         AIF   ('&BLK' NE 'ACB' AND                                    X
               '&BLK'  NE 'RPL' AND                                    X
               '&BLK'  NE 'EXLST')
         MNOTE 12,'GENCB BLK= INVALID - &BLK'
         MEXIT
         AEND
.*
         AIF   ('&LOC' NE '')
            AIF   ('&LOC' NE 'BELOW' AND '&LOC' NE 'ANY')
         MNOTE 12,'GENCB LOC= INVALID - &LOC'
            AEND
         AEND
.*
.* GENERATE DSECT AND &BLK.LEN
         &BLK.D
&BLKEND  SETC   '&BLK.END'
&BLKSTRT SETC   'IHA&BLK'
&LBLK    SETA   &BLKEND-&BLKSTRT
         AIF   ('&COPIES' NE '')
&LBLKS   SETA   &COPIES*&LBLK
         AELSE
&LBLKS   SETA   &LBLK
         AEND
.*
         AIF   ('&BLK' EQ 'EXLST').DOEXLST
         AIF   ('&BLK' EQ 'ACB').DOACB
         AIF   ('&BLK' EQ 'RPL').DORPL
.*
.DOEXLST ANOP
.***************
.* GENCB EXLST *
.***************
         AIF   ('&DDNAME' NE '')
         MNOTE 12,'DDNAME IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&PASSWD' NE '')
         MNOTE 12,'PASSWD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MACRF' NE '')
         MNOTE 12,'MACRF IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFND' NE '')
         MNOTE 12,'BUFND IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFNI' NE '')
         MNOTE 12,'BUFNI IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFSP' NE '')
         MNOTE 12,'BUFSP IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RMODE31' NE '')
         MNOTE 12,'RMODE31 IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&STRNO' NE '')
         MNOTE 12,'STRNO IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BSTRNO' NE '')
         MNOTE 12,'BSTRNO IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&SHRPOOL' NE '')
         MNOTE 12,'SHRPOOL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&AREA' NE '')
         MNOTE 12,'AREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&AREALEN' NE '')
         MNOTE 12,'AREALEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&ARG' NE '')
         MNOTE 12,'ARG IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&ECB' NE '')
         MNOTE 12,'ECB IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&KEYLEN' NE '')
         MNOTE 12,'KEYLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MSGAREA' NE '')
         MNOTE 12,'MSGAREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MSGLEN' NE '')
         MNOTE 12,'MSGLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&NXTRPL' NE '')
         MNOTE 12,'NXTRPL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&OPTCD' NE '')
         MNOTE 12,'OPTCD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RECLEN' NE '')
         MNOTE 12,'RECLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT AN EXLST PARAMETER'
         AEND
.*
.* CHECK EXLST UNSUPPORTED FIELDS
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT SUPPORTED'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT SUPPORTED'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&MF(1)' EQ 'L').EXLMFL
         AIF   ('&MF(1)' EQ 'E').EXLMFEG
         AIF   ('&MF(1)' EQ 'G').EXLMFL
.*
.* PROCESS EXLST MF=I
.* R1=USER WORK AREA OR GETMAINED AREA ADDRESS
         AIF   ('&LENGTH' EQ '' AND '&WAREA' EQ '').EXLIGET
         AIF   ('&LENGTH' NE '' AND '&WAREA' NE '').EXLIWL
.*
         AIF   ('&LENGTH' NE '')
         MNOTE 12,'GENCB MISSING WAREA FOR LENGTH'
         AEND
.*
         AIF   ('&WAREA' NE '')
         MNOTE 12,'GENCB MISSING LENGTH FOR WAREA'
         AEND
.*
.EXLIWL  ANOP
         AIF   ('&WAREA' NE '' AND '&LOC' NE '')
         MNOTE 12,'GENCB WAREA AND LOC SPECIFIED'
         AEND
.*
         AIF   ('&WAREA'(1,1) EQ '(')            RPI 703
            AIF ('&WAREA' EQ '(0)'   OR                                X
               '&WAREA'   EQ '(R0)'  OR                                X
               '&WAREA'   EQ '(1)'   OR                                X
               '&WAREA'   EQ '(R1)'  OR                                X
               '&WAREA'   EQ '(14)'  OR                                X
               '&WAREA'   EQ '(R14)' OR                                X
               '&WAREA'   EQ '(15)'  OR                                X
               '&WAREA'   EQ '(R15)')
         MNOTE 12,'GENCB WAREA= INVALID REGISTER USE'
            AEND
         LR    1,&WAREA           R1=WORK AREA ADDRESS
         AELSE
         LA    1,&WAREA           R1=WORK AREA ADDRESS
         AEND
.*
         AIF   ('&LENGTH' GE '&LBLKS').EXLICLR
         MNOTE 12,'GENCB LENGTH TOO SHORT FOR COPIES=&COPIES OF &BLK'
.*
.EXLIGET ANOP
&LOC2    SETC  '&LOC'
         AIF   ('&LOC2' EQ '')
&LOC2    SETC  'BELOW'
         AEND
         GETMAIN RU,LV=&LBLKS,LOC=&LOC2
.EXLICLR ANOP
         XC    0(&LBLK,1),0(1)    CLEAR FIRST EXLST
.* GENERATE FIRST EXLST STARTING AT R1
         USING IFGEXLST,1
         LGFI  0,C'zLST'          R0=EXLST EYECATCHER
         ST    0,EXLEYE           STORE EXLST EYECATCHER
         MVHHI EXLLEN,&LBLK       MOVE EXLST LENGTH
         MVI   EXLSTYP,EXLSVSAM   MOVE EXLST SUBTYPE
         AIF   ('&EODAD' EQ '').DOLERI
.*
         AIF   ('&EODAD(1)' NE '')
            AIF   ('&EODAD(1)'(1,1) EQ '(')
         ST    &EODAD(1),EXLEODP  STORE EODAD ADDRESS
            AELSE
         LARL  15,=A(&EODAD(1))   BASE-FREE
         MVC   EXLEODP,0(15)      MOVE EODAD ADDRESS
            AEND
         AEND
         OI    EXLEODF,EXLEODS    SET EODAD PRESENT
.*
&EODCNT  SETA  2
.EODLOOP ANOP
         AIF   (&EODCNT GT N'&EODAD).EODDUN
         AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' NE 'A' AND                           X
               '&EODAD(&EODCNT)'  NE 'N' AND                           X
               '&EODAD(&EODCNT)'  NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
         AEND
&EODCNT  SETA  &EODCNT+1
         AGO   .EODLOOP
.*
.EODDUN  ANOP
         AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&EOD_A   SETB  0
&EOD_N   SETB  0
         AEND
         AIF   (&EOD_A OR NOT(&EOD_A OR &EOD_N))
         OI    EXLEODF,EXLEODA     SET EODAD ACTIVE
         AEND
         AIF   (&EOD_N)
         NI    EXLEODF,255-EXLEODA SET EODAD INACTIVE
         AEND
.*
.DOLERI  ANOP
         AIF   ('&LERAD' EQ '').DOSYNI
.*
         AIF   ('&LERAD(1)' NE '')
            AIF   ('&LERAD(1)'(1,1) EQ '(')
         ST    &LERAD(1),EXLLERP  STORE LERAD ADDRESS
            AELSE
         LARL  15,=A(&LERAD(1))   BASE-FREE
         MVC   EXLLERP,0(15)      MOVE LERAD ADDRESS
            AEND
         AEND
         OI    EXLLERF,EXLLERS    SET LERAD PRESENT
.*
&LERCNT  SETA  2
.LERLOOP ANOP
         AIF   (&LERCNT GT N'&LERAD).LERDUN
         AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' NE 'A' AND                           X
               '&LERAD(&LERCNT)'  NE 'N' AND                           X
               '&LERAD(&LERCNT)'  NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
         AEND
&LERCNT  SETA  &LERCNT+1
         AGO   .LERLOOP
.*
.LERDUN  ANOP
         AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&LER_A AND &LER_N)
         MNOTE 12,'LERAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&LER_A   SETB  0
&LER_N   SETB  0
         AEND
         AIF   (&LER_A OR NOT(&LER_A OR &LER_N))
         OI    EXLLERF,EXLLERA     SET LERAD ACTIVE
         AEND
         AIF   (&LER_N)
         NI    EXLLERF,255-EXLLERA SET LERAD INACTIVE
         AEND
.*
.DOSYNI  ANOP
         AIF   ('&SYNAD' EQ '').DOENDI
.*
         AIF   ('&SYNAD(1)' NE '')
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
         ST    &SYNAD(1),EXLSYNP  STORE SYNAD ADDRESS
            AELSE
         LARL  15,=A(&SYNAD(1))   BASE-FREE
         MVC   EXLSYNP,0(15)      MOVE SYNAD ADDRESS
            AEND
         AEND
         OI    EXLSYNF,EXLSYNS    SET SYNAD PRESENT
.*
&SYNCNT  SETA  2
.SYNLOOP ANOP
         AIF   (&SYNCNT GT N'&SYNAD).SYNDUN
         AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                           X
               '&SYNAD(&SYNCNT)'  NE 'N' AND                           X
               '&SYNAD(&SYNCNT)'  NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
         AEND
&SYNCNT  SETA  &SYNCNT+1
         AGO   .SYNLOOP
.*
.SYNDUN  ANOP
         AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&SYN_A AND &SYN_N)
         MNOTE 12,'SYNAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&SYN_A   SETB  0
&SYN_N   SETB  0
         AEND
         AIF   (&SYN_A OR NOT(&SYN_A OR &SYN_N))
         OI    EXLSYNF,EXLSYNA     SET SYNAD ACTIVE
         AEND
         AIF   (&SYN_N)
         NI    EXLSYNF,255-EXLSYNA SET SYNAD INACTIVE
         AEND
.*
.* GENERATE COPIES IF NOT 1
.DOENDI  ANOP
         AIF   (&COPIES NE 0)
&TCOPY   SETA  &COPIES-1
         AEND
         AIF   (&TCOPY NE 0)
         AHIK  14,1,&LBLK         R14=WORK AREA ADDRESS FOR COPIES
         LA    0,&TCOPY           R0=LOOP CONTROL
EXLSTI&SYSNDX DS 0H
         MVC   0(&LBLK,14),0(1)   COPY EXLST
         AHI   14,&LBLK           BUMP WAREA POINTER
         BCT   0,EXLSTI&SYSNDX    LOOP
         AEND
*
.* RETURN ADDRESS(R1) AND LENGTH(R0) OF ALL BLOCKS
         LA    0,&LBLKS           R0=LENGTH OF ALL BLOCKS
         SR    15,15              RC=0
         MEXIT
.*
.EXLMFL  ANOP
.* PROCESS EXLST GENCB MF=L
.* FOR EODAD, LERAD AND SYNAD THE DEFAULT IS A(ACTIVE)
.* IBM DOESN'T ALLOW MISSING OR ZERO ADDR, BUT I WILL
.* SO MUST GENERATE _MODS FOR EACH ONE
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&WAREA'(1,1) EQ '(')
         MNOTE 12,'GENCB WAREA= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
            AIF   ('&EODAD(1)'(1,1) EQ '(')
         MNOTE 12,'GENCB EODAD= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
            AIF   ('&LERAD(1)'(1,1) EQ '(')
         MNOTE 12,'GENCB LERAD= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
         MNOTE 12,'GENCB SYNAD= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
         AEND
.* COUNT NO. OF FIELDS
&FIELDS  SETA  0
         AIF   ('&COPIES' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
.* WAREA AND LENGTH, BOTH OR NEITHER
         AIF   ('&LENGTH' EQ '' AND '&WAREA' EQ '').EXLNOWL
         AIF   ('&LENGTH' NE '' AND '&WAREA' NE '').EXLLWL
         AIF   ('&LENGTH' NE '')
         MNOTE 12,'GENCB MISSING WAREA FOR LENGTH'
         AEND
.*
         AIF   ('&WAREA'  NE '')
         MNOTE 12,'GENCB MISSING LENGTH FOR WAREA'
         AEND
.EXLLWL  ANOP
&FIELDS  SETA  &FIELDS+2
.*
.EXLNOWL ANOP
.* NO WAREA AND LOC
         AIF   ('&WAREA' NE '' AND '&LOC' NE '')
         MNOTE 12,'GENCB WAREA AND LOC SPECIFIED'
         AEND
         AIF   ('&LOC' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
.*
         AIF   ('&EODAD' NE '')
&FIELDS  SETA  &FIELDS+2
         AEND
         AIF   ('&LERAD' NE '')
&FIELDS  SETA  &FIELDS+2
         AEND
         AIF   ('&SYNAD' NE '')
&FIELDS  SETA  &FIELDS+2
         AEND
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'GENCB NO LABEL FOR CBMR'
         AEND
&BRAS    SETA  0
         AIF   (T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+&FIELDS+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRXLST+CBMRGEN) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS)       CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         AIF   ('&COPIES' NE '')
         DC    AL1(CBMRXL_COPIES)
         AEND
         AIF   ('&WAREA' NE '')
         DC    AL1(CBMRXL_WAREA)
         AEND
         AIF   ('&LENGTH' NE '')
         DC    AL1(CBMRXL_LENGTH)
         AEND
         AIF   ('&LOC' NE '')
         DC    AL1(CBMRXL_LOC)
         AEND
         AIF   ('&EODAD' NE '')
         DC    AL1(CBMRXL_EODAD)
         DC    AL1(CBMRXL_EOD_MODS)
         AEND
         AIF   ('&LERAD' NE '')
         DC    AL1(CBMRXL_LERAD)
         DC    AL1(CBMRXL_LER_MODS)
         AEND
         AIF   ('&SYNAD' NE '')
         DC    AL1(CBMRXL_SYNAD)
         DC    AL1(CBMRXL_SYN_MODS)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS         HEADER+NO. OF VERBS
&I       SETA  1
.*
         AIF   ('&COPIES' NE '')
         DC    AL4(&COPIES)
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&WAREA' NE '')
         DC    AL4(&WAREA)
            AIF   ('&WAREA'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&WAREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&LENGTH' NE '')
         DC    AL4(&LENGTH)
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&LOC' NE '')
            AIF   ('&LOC' EQ 'BELOW')
         DC    X'80000000'
&OFFSET  SETA  &OFFSET+4
            AELSE
         DC    X'40000000'
&OFFSET  SETA  &OFFSET+4
            AEND
         AEND
.*
         AIF   ('&EODAD' NE '')
            AIF   ('&EODAD(1)' EQ '')
         DC    AL4(0)
            AELSE
         DC    AL4(&EODAD(1))
            AEND
            AIF   ('&EODAD(1)'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&EODAD(1)'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
.* MISSING MODIFIER DEFAULTS TO A
            AIF   (N'&EODAD EQ 1)
&EOD_A   SETB  1
            AEND
            AIF   (N'&EODAD GT 1)
&EODCNT  SETA  2
.EODLPL  ANOP
               AIF   (&EODCNT GT N'&EODAD).EODDUNL
               AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
               AEND
               AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
               AEND
               AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
               AEND
               AIF   ('&EODAD(&EODCNT)' NE 'A' AND                     X
               '&EODAD(&EODCNT)'        NE 'N' AND                     X
               '&EODAD(&EODCNT)'        NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
               AEND
&EODCNT  SETA  &EODCNT+1
               AGO   .EODLPL
.*
.EODDUNL ANOP
               AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
               AEND
               AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      ACTIVE IS ASSUMED'
&EOD_A   SETB  1
&EOD_N   SETB  0
               AEND
            AEND
         DC    B'&EOD_A&EOD_N.000000',3X'00'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&LERAD' NE '')
            AIF   ('&LERAD(1)' EQ '')
         DC    AL4(0)
            AELSE
         DC    AL4(&LERAD(1))
            AEND
            AIF   ('&LERAD(1)'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&LERAD(1)'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
.* MISSING MODIFIER DEFAULTS TO A
            AIF   (N'&LERAD EQ 1)
&LER_A   SETB  1
            AEND
            AIF   (N'&LERAD GT 1)
&LERCNT  SETA  2
.LERLPL  ANOP
               AIF   (&LERCNT GT N'&LERAD).LERDUNL
               AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
               AEND
               AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
               AEND
               AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
               AEND
               AIF   ('&LERAD(&LERCNT)' NE 'A' AND                     X
               '&LERAD(&LERCNT)'        NE 'N' AND                     X
               '&LERAD(&LERCNT)'        NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
               AEND
&LERCNT  SETA  &LERCNT+1
               AGO   .LERLPL
.*
.LERDUNL ANOP
               AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
               AEND
               AIF   (&LER_A AND &LER_N)
         MNOTE 12,'LERAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      ACTIVE IS ASSUMED'
&LER_A   SETB  1
&LER_N   SETB  0
               AEND
            AEND
         DC    B'&LER_A&LER_N.000000',3X'00'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&SYNAD' NE '')
            AIF   ('&SYNAD(1)' EQ '')
         DC    AL4(0)
            AELSE
         DC    AL4(&SYNAD(1))
            AEND
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&SYNAD(1)'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
.* MISSING MODIFIER DEFAULTS TO A
            AIF   (N'&SYNAD EQ 1)
&SYN_A   SETB  1
            AEND
            AIF   (N'&SYNAD GT 1)
&SYNCNT  SETA  2
.SYNLPL  ANOP
               AIF   (&SYNCNT GT N'&SYNAD).SYNDUNL
               AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
               AEND
               AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
               AEND
               AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
               AEND
               AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                     X
               '&SYNAD(&SYNCNT)'        NE 'N' AND                     X
               '&SYNAD(&SYNCNT)'        NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
               AEND
&SYNCNT  SETA  &SYNCNT+1
               AGO   .SYNLPL
.*
.SYNDUNL ANOP
               AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
               AEND
               AIF   (&SYN_A AND &SYN_N)
         MNOTE 12,'SYNAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      ACTIVE IS ASSUMED'
&SYN_A   SETB  1
&SYN_N   SETB  0
               AEND
            AEND
         DC    B'&SYN_A&SYN_N.000000',3X'00'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'GENCB MF= INVALID REGISTER USE'
            AEND
            AIF ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
&I       SETA  1
.EXLRGLP ANOP
            AIF   (&I GT 10).EXLRGDN
            AIF   (&OFFREG(&I) NE 0)
               AIF   (NOT &EXLHAND)
* HANDLE REGISTER NOTATION
&EXLHAND SETB  1
               AEND
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
            AEND
&I       SETA  &I+1
         AGO   .EXLRGLP
.*
.EXLRGDN ANOP
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').EXLMFEG
         SR    15,15              RC=0
         MEXIT
.*
.EXLMFEG ANOP
.* PROCESS GENCB EXLST MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* WHEN DONE, MOVE ALL THE CBMR VALUES INTO THE FIRST EXLST
.* AND GENERATE THE COPIES
.* IF COPIES= NOT IN THE CBMR, GENERATE 1
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'GENCB EXLST MF=E/G SECOND PARAMETER MISSING'
         MEXIT
         AEND
         AIF ('&MF(2)'(1,1) EQ '(')
         ZOPTLR 1,&MF(2)
         AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
.*
         USING CBMR,1
         BRAS  15,*+8             BYPASS CONSTANT
         DC    C'CBMR'
         CLC   CBMREYE,0(15)      CORRECT ?
         JNE   GENCB8&SYSNDX      ERROR IF NOT
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
GENCBSV&SYSNDX DS 0H
         DS    2AL4               SAVE AREA
         STM   0,1,GENCBSV&SYSNDX SAVE R0-R1
         AIF   ('&MF(1)' EQ 'G').EXLMFG
.*
         AIF   ('&COPIES' NE '')
         LHI   14,CBMRXL_COPIES   EXLST COPIES
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&COPIES)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&WAREA' NE '')
         LHI   14,CBMRXL_WAREA    EXLST WAREA
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&WAREA'(1,1) EQ '(')
               AIF ('&WAREA(1)' EQ '(0)'   OR                          X
               '&WAREA(1)'      EQ '(R0)'  OR                          X
               '&WAREA(1)'      EQ '(1)'   OR                          X
               '&WAREA(1)'      EQ '(R1)'  OR                          X
               '&WAREA(1)'      EQ '(14)'  OR                          X
               '&WAREA(1)'      EQ '(R14)' OR                          X
               '&WAREA(1)'      EQ '(15)'  OR                          X
               '&WAREA(1)'      EQ '(R15)')
         MNOTE 12,'GENCB WAREA= INVALID REGISTER USE'
               AEND
         ST    &WAREA,0(14)       STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&WAREA)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&LENGTH' NE '')
         LHI   14,CBMRXL_LENGTH   EXLST LENGTH
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&LENGTH)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&LOC' NE '')
         LHI   14,CBMRXL_LOC      EXLST LOC
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&LOC' EQ 'BELOW')
         LARL  15,=A(X'80000000') BASE-FREE
            AELSE
         LARL  15,=A(X'40000000') BASE-FREE
            AEND
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
&EOD_A   SETB  0
&EOD_N   SETB  0
&EOD_L   SETB  0
         AIF   ('&EODAD' NE '')
            AIF   ('&EODAD(1)'(1,1) EQ '(')
               AIF ('&EODAD(1)' EQ '(0)'   OR                          X
               '&EODAD(1)'      EQ '(R0)'  OR                          X
               '&EODAD(1)'      EQ '(1)'   OR                          X
               '&EODAD(1)'      EQ '(R1)'  OR                          X
               '&EODAD(1)'      EQ '(14)'  OR                          X
               '&EODAD(1)'      EQ '(R14)' OR                          X
               '&EODAD(1)'      EQ '(15)'  OR                          X
               '&EODAD(1)'      EQ '(R15)')
         MNOTE 12,'GENCB EODAD= INVALID REGISTER USE'
               AEND
         LHI   14,CBMRXL_EODAD    EXLST EODAD ADDRESS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         ST    &EODAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
               AIF ('&EODAD(1)' NE '')
         LHI   14,CBMRXL_EODAD    EXLST EODAD ADDRESS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&EODAD(1))   BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
               AEND
            AEND
            AIF   (N'&EODAD GT 1)
         LHI   14,CBMRXL_EOD_MODS EXLST EODAD MODIFIERS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
&EODCNT  SETA  2
.EODLPEG ANOP
               AIF   (&EODCNT GT N'&EODAD).EODDNEG
               AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
               AEND
               AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
               AEND
               AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
               AEND
               AIF   ('&EODAD(&EODCNT)' NE 'A' AND                     X
               '&EODAD(&EODCNT)'        NE 'N' AND                     X
               '&EODAD(&EODCNT)'        NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
               AEND
&EODCNT  SETA  &EODCNT+1
               AGO   .EODLPEG
.*
.EODDNEG ANOP
               AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
               AEND
               AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      ACTIVE IS ASSUMED'
&EOD_A   SETB  1
&EOD_N   SETB  0
               AEND
         LARL  15,=B'&EOD_A&EOD_N.000000000000000000000000000000' BASE--
               FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
&LER_A   SETB  0
&LER_N   SETB  0
&LER_L   SETB  0
         AIF   ('&LERAD' NE '')
            AIF   ('&LERAD(1)'(1,1) EQ '(')
               AIF ('&LERAD(1)' EQ '(0)'   OR                          X
               '&LERAD(1)'      EQ '(R0)'  OR                          X
               '&LERAD(1)'      EQ '(1)'   OR                          X
               '&LERAD(1)'      EQ '(R1)'  OR                          X
               '&LERAD(1)'      EQ '(14)'  OR                          X
               '&LERAD(1)'      EQ '(R14)' OR                          X
               '&LERAD(1)'      EQ '(15)'  OR                          X
               '&LERAD(1)'      EQ '(R15)')
         MNOTE 12,'GENCB LERAD= INVALID REGISTER USE'
               AEND
         LHI   14,CBMRXL_LERAD    EXLST LERAD ADDRESS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         ST    &LERAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
               AIF ('&LERAD(1)' NE '')
         LHI   14,CBMRXL_LERAD    EXLST LERAD ADDRESS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&LERAD(1))   BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
               AEND
            AEND
            AIF   (N'&LERAD GT 1)
         LHI   14,CBMRXL_LER_MODS EXLST LERAD MODIFIERS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
&LERCNT  SETA  2
.LERLPEG ANOP
               AIF   (&LERCNT GT N'&LERAD).LERDNEG
               AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
               AEND
               AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
               AEND
               AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
               AEND
               AIF   ('&LERAD(&LERCNT)' NE 'A' AND                     X
               '&LERAD(&LERCNT)'        NE 'N' AND                     X
               '&LERAD(&LERCNT)'        NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
               AEND
&LERCNT  SETA  &LERCNT+1
               AGO   .LERLPEG
.*
.LERDNEG ANOP
               AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
               AEND
               AIF   (&LER_A AND &LER_N)
         MNOTE 12,'LERAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      ACTIVE IS ASSUMED'
&LER_A   SETB  1
&LER_N   SETB  0
               AEND
         LARL  15,=B'&LER_A&LER_N.000000000000000000000000000000' BASE--
               FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
&SYN_A   SETB  0
&SYN_N   SETB  0
&SYN_L   SETB  0
         AIF   ('&SYNAD' NE '')
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
               AIF ('&SYNAD(1)' EQ '(0)'   OR                          X
               '&SYNAD(1)'      EQ '(R0)'  OR                          X
               '&SYNAD(1)'      EQ '(1)'   OR                          X
               '&SYNAD(1)'      EQ '(R1)'  OR                          X
               '&SYNAD(1)'      EQ '(14)'  OR                          X
               '&SYNAD(1)'      EQ '(R14)' OR                          X
               '&SYNAD(1)'      EQ '(15)'  OR                          X
               '&SYNAD(1)'      EQ '(R15)')
         MNOTE 12,'GENCB SYNAD= INVALID REGISTER USE'
               AEND
         LHI   14,CBMRXL_SYNAD    EXLST SYNAD ADDRESS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         ST    &SYNAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
               AIF ('&SYNAD(1)' NE '')
         LHI   14,CBMRXL_SYNAD    EXLST SYNAD ADDRESS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&SYNAD(1))   BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
               AEND
            AEND
            AIF   (N'&SYNAD GT 1)
         LHI   14,CBMRXL_SYN_MODS EXLST SYNAD MODIFIERS
         BRAS  15,GENCBS&SYSNDX   FIND VERB
&SYNCNT  SETA  2
.SYNLPEG ANOP
               AIF   (&SYNCNT GT N'&SYNAD).SYNDNEG
               AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
               AEND
               AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
               AEND
               AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
               AEND
               AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                     X
               '&SYNAD(&SYNCNT)'        NE 'N' AND                     X
               '&SYNAD(&SYNCNT)'        NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
               AEND
&SYNCNT  SETA  &SYNCNT+1
               AGO   .SYNLPEG
.*
.SYNDNEG ANOP
               AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
               AEND
               AIF   (&SYN_A AND &SYN_N)
         MNOTE 12,'SYNAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      ACTIVE IS ASSUMED'
&SYN_A   SETB  1
&SYN_N   SETB  0
               AEND
         LARL  15,=B'&SYN_A&SYN_N.000000000000000000000000000000' BASE--
               FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
.EXLMFG  ANOP
.* USE THE CBMR TO GENERATE THE EXLST
.* EXTRACT WAREA/LENGTH/COPIES/LOC FROM THE CBMR AS WE'LL NEED THEM FOR
.* GETMAIN AND SIZE CHECKING
.* FIND WAREA/LENGTH
         LHI   14,CBMRXL_WAREA    EXLST WAREA
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB2&SYSNDX      EXIT IF NOT
* WAREA FOUND
         MVC   GENCBZ&SYSNDX.(8),0(14) SAVE WAREA/LENGTH
GENCB2&SYSNDX DS 0H
* FIND COPIES
         LHI   14,CBMRXL_COPIES   EXLST COPIES
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB3&SYSNDX      EXIT IF NOT
* COPIES FOUND
         MVC   GENCBZ&SYSNDX+8(4),0(14) SAVE COPIES
GENCB3&SYSNDX DS 0H
* FIND LOC
         LHI   14,CBMRXL_LOC      EXLST LOC
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB4&SYSNDX      EXIT IF NOT
* LOC FOUND
         MVC   GENCBZ&SYSNDX+12(4),0(14) SAVE LOC
GENCB4&SYSNDX DS 0H
         LA    1,&LBLK            R1=EXLST LENGTH
         MS    1,GENCBZ&SYSNDX+8  * COPIES=SIZE NEEDED
         CGHSI GENCBZ&SYSNDX,-1   WAREA/LENGTH SAVED ?
         JE    GENCBU&SYSNDX      EXIT IF NOT
* WAREA/LENGTH SPECIFIED, CHECK LENGTH
         C     1,GENCBZ&SYSNDX+4  LENGTH OK ?
         JNH   GENCBW&SYSNDX      EXIT IF IT IS
* WAREA TOO SMALL
         LA    15,4               RC=4
         LA    0,9                REASON CODE=9 (WAREA TOO SMALL)
         J     GENCBX&SYSNDX      EXIT
*
GENCBU&SYSNDX DS 0H
* NO WAREA/LENGTH, DO GETMAIN
         TM    GENCBZ&SYSNDX+12,X'80' BELOW ?
         JO    GENCBB&SYSNDX      EXIT IF IT IS
* LOC FOUND AND ANY
         GETMAIN RU,LV=(1),LOC=ANY
         J     GENCBR&SYSNDX      EXIT
*
GENCBB&SYSNDX DS 0H
* LOC NOT FOUND OR LOC FOUND AND BELOW
         GETMAIN RU,LV=(1),LOC=BELOW
GENCBR&SYSNDX DS 0H
         ST    1,GENCBZ&SYSNDX    SAVE AREA ADDRESS
         ST    0,GENCBZ&SYSNDX+4  SAVE AREA LENGTH
         LR    15,1               R15=GETMAINED ADDRESS
         J     GENCBQ&SYSNDX      EXIT
*
GENCBW&SYSNDX DS 0H
         ST    1,GENCBZ&SYSNDX+4  SAVE LENGTH NEEDED
         L     15,GENCBZ&SYSNDX   R15=WAREA ADDRESS
GENCBQ&SYSNDX DS 0H
         IIHF  0,C'zLST'          R0=EXLST EYECATCHER
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
         ARK   14,0,1             R14=ADDRESS OF FIELDS
         USING IFGEXLST,15
* CREATE FIRST EXLST
         XC    0(&LBLK,15),0(15)  CLEAR FIRST EXLST
         STFH  0,EXLEYE           STORE EXLST EYECATCHER
         MVHHI EXLLEN,&LBLK       MOVE EXLST LENGTH
         MVI   EXLSTYP,EXLSVSAM   MOVE EXLST SUBTYPE
GENCBM&SYSNDX DS 0H
         CLI   0(1),CBMRXL_EODAD  EXLST EODAD ADDRESS ?
         JNE   *+18               EXIT IF NOT
         MVC   EXLEODP,0(14)      MOVE EODAD ADDRESS INTO EXLST
         OI    EXLEODF,EXLEODS    SET EODAD PRESENT
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_EOD_MODS EXLST EODAD MODIFIERS ?
         JNE   *+32               EXIT IF NOT
         TM    0(14),X'80'        EODAD ACTIVE ?
         JNO   *+8                EXIT IF NOT
         OI    EXLEODF,EXLEODA    SET EODAD ACTIVE
         TM    0(14),X'40'        EODAD INACTIVE ?
         JNO   *+8                EXIT IF NOT
         NI    EXLEODF,255-EXLEODA SET EODAD INACTIVE
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_LERAD  EXLST LERAD ADDRESS ?
         JNE   *+18               EXIT IF NOT
         MVC   EXLLERP,0(14)      MOVE LERAD ADDRESS INTO EXLST
         OI    EXLLERF,EXLLERS    SET LERAD PRESENT
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_LER_MODS EXLST LERAD MODIFIERS ?
         JNE   *+32               EXIT IF NOT
         TM    0(14),X'80'        LERAD ACTIVE ?
         JNO   *+8                EXIT IF NOT
         OI    EXLLERF,EXLLERA    SET LERAD ACTIVE
         TM    0(14),X'40'        LERAD INACTIVE ?
         JNO   *+8                EXIT IF NOT
         NI    EXLLERF,255-EXLLERA SET LERAD INACTIVE
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_SYNAD  EXLST SYNAD ADDRESS ?
         JNE   *+18               EXIT IF NOT
         MVC   EXLSYNP,0(14)      MOVE SYNAD ADDRESS INTO EXLST
         OI    EXLSYNF,EXLSYNS    SET SYNAD PRESENT
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_SYN_MODS EXLST SYNAD MODIFIERS ?
         JNE   *+28               EXIT IF NOT
         TM    0(14),X'80'        SYNAD ACTIVE ?
         JNO   *+8                EXIT IF NOT
         OI    EXLSYNF,EXLSYNA    SET SYNAD ACTIVE
         TM    0(14),X'40'        SYNAD INACTIVE ?
         JNO   *+8                EXIT IF NOT
         NI    EXLSYNF,255-EXLSYNA SET SYNAD INACTIVE
*
GENCBD&SYSNDX DS 0H
         AHI   14,4               BUMP FIELDS POINTER
         AHI   1,1                BUMP VERBS POINTER
         BRCT  0,GENCBM&SYSNDX    LOOP
*
         DROP  15
* FIRST EXLST BUILT, NOW DO COPIES
* IF COPIES NOT FOUND OR COPIES=1 THEN WE'RE DONE
         L     0,GENCBZ&SYSNDX+8  R0=COPIES
         AHI   0,-1               COPIES-1
         JZ    GENCBJ&SYSNDX      EXIT IF COPIES=1
         AHIK  14,15,&LBLK        R14=AREA ADDRESS FOR COPIES
GENCBI&SYSNDX DS 0H
         MVC   0(&LBLK,14),0(15)  COPY EXLST
         AHI   14,&LBLK           BUMP AREA POINTER
         BCT   0,GENCBI&SYSNDX    LOOP
GENCBJ&SYSNDX DS 0H
* SET R1=AREA AND R0=LENGTH USED
         L     1,GENCBZ&SYSNDX    R1=AREA ADDRESS
         L     0,GENCBZ&SYSNDX+4  R0=AREA LENGTH USED
         J     GENCBG&SYSNDX      EXIT
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
GENCBS&SYSNDX DS 0H
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
GENCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    GENCBF&SYSNDX      EXIT IF IT IS
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,GENCBL&SYSNDX    LOOP
*
         J     GENCB8&SYSNDX      ERROR IF NOT FOUND
*
* VERB SEARCH SUBROUTINE, RETURN WITH R0=8 IF NOT FOUND
GENCBT&SYSNDX DS 0H
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
GENCBN&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    GENCBF&SYSNDX      EXIT IF IT IS
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,GENCBN&SYSNDX    LOOP
*
         LA    0,8                R0=8
         BR    15                 RETURN
*
GENCBZ&SYSNDX DS 0H               SAVE CBMR FIELDS
         DC    FL4'-1'            SAVE CBMR WAREA
         DC    FL4'-1'            SAVE CBMR LENGTH
         DC    FL4'1'             SAVE CBMR COPIES (DEFAULT=1)
         DC    X'80000000'        SAVE CBMR LOC    (DEFAULT=BELOW)
*
GENCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,GENCBSV&SYSNDX  R14=NO. OF VERBS
         SR    14,0               R14=VERB POSITION
         SLL   14,2               *4
         A     14,GENCBSV&SYSNDX+4 +A(CBMRBODY)
         A     14,GENCBSV&SYSNDX  +NO. OF VERBS=FIELD POSITION
         SR    0,0                R0=0
         BR    15                 RETURN
*
GENCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (WRONG CB TYPE/FIELD NOT FOUND)
         J     GENCBX&SYSNDX      EXIT
*
GENCBG&SYSNDX DS 0H
         SR    15,15              RC=0
GENCBX&SYSNDX DS 0H
         MEXIT
.*
.DOACB   ANOP
&RMODEBF SETB 0
.*************
.* GENCB ACB *
.*************
         AIF   ('&AREA' NE '')
         MNOTE 12,'AREA IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&AREALEN' NE '')
         MNOTE 12,'AREALEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&ARG' NE '')
         MNOTE 12,'ARG IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&ECB' NE '')
         MNOTE 12,'ECB IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&KEYLEN' NE '')
         MNOTE 12,'KEYLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&MSGAREA' NE '')
         MNOTE 12,'MSGAREA IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&MSGLEN' NE '')
         MNOTE 12,'MSGLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&NXTRPL' NE '')
         MNOTE 12,'NXTRPL IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&OPTCD' NE '')
         MNOTE 12,'OPTCD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RECLEN' NE '')
         MNOTE 12,'RECLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&EODAD' NE '')
         MNOTE 12,'EODAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&LERAD' NE '')
         MNOTE 12,'LERAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&SYNAD' NE '')
         MNOTE 12,'SYNAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT AN ACB PARAMETER'
         AEND
.*
.* CHECK ACB UNSUPPORTED FIELDS
.*
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT SUPPORTED'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT SUPPORTED'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&MF(1)' EQ 'L').ACBMFL
         AIF   ('&MF(1)' EQ 'E').ACBMFEG
         AIF   ('&MF(1)' EQ 'G').ACBMFL
.*
.* PROCESS ACB MF=I
.* R1=USER WORK AREA OR GETMAINED AREA ADDRESS
         AIF   ('&LENGTH' EQ '' AND '&WAREA' EQ '').ACBIGET
         AIF   ('&LENGTH' NE '' AND '&WAREA' NE '').ACBIWL
.*
         AIF   ('&LENGTH' NE '')
         MNOTE 12,'GENCB MISSING WAREA FOR LENGTH'
         AEND
.*
         AIF   ('&WAREA' NE '')
         MNOTE 12,'GENCB MISSING LENGTH FOR WAREA'
         AEND
.*
.ACBIWL  ANOP
         AIF   ('&WAREA' NE '' AND '&LOC' NE '')
         MNOTE 12,'GENCB WAREA AND LOC SPECIFIED'
         AEND
.*
         AIF   ('&WAREA'(1,1) EQ '(')            RPI 703
            AIF ('&WAREA' EQ '(0)'   OR                                X
               '&WAREA'   EQ '(R0)'  OR                                X
               '&WAREA'   EQ '(1)'   OR                                X
               '&WAREA'   EQ '(R1)'  OR                                X
               '&WAREA'   EQ '(14)'  OR                                X
               '&WAREA'   EQ '(R14)' OR                                X
               '&WAREA'   EQ '(15)'  OR                                X
               '&WAREA'   EQ '(R15)')
         MNOTE 12,'GENCB WAREA= INVALID REGISTER USE'
            AEND
         LR    1,&WAREA           R1=WORK AREA ADDRESS
         AELSE
         LA    1,&WAREA           R1=WORK AREA ADDRESS
         AEND
.*
         AIF   ('&LENGTH' GE '&LBLKS').ACBICLR
         MNOTE 12,'GENCB LENGTH TOO SHORT FOR COPIES=&COPIES OF &BLK'
.*
.ACBIGET ANOP
&LOC2    SETC  '&LOC'
         AIF   ('&LOC2' EQ '')
&LOC2    SETC  'BELOW'
         AEND
         GETMAIN RU,LV=&LBLKS,LOC=&LOC2
.ACBICLR ANOP
         XC    0(&LBLK,1),0(1)    CLEAR FIRST ACB
.* GENERATE FIRST ACB STARTING AT R1
         USING IHAACB,1
         LGFI  0,C'zACB'          R0=ACB EYECATCHER
         ST    0,ACBEYE           STORE ACB EYECATCHER
         MVI   ACBID,ACBIDVAL     MOVE ACB IDENTIFIER
         MVI   ACBSTYP,ACBSVSAM   MOVE ACB SUBTYPE
         MVHHI ACBLEN,&LBLK       MOVE ACB LENGTH
&DD      SETC  '&DDNAME'
.* IF DDNAME NOT SPECIFIED USE ACB NAME
.* IF NEITHER SPECIFIED, USE CL8' '
         AIF   ('&DD' EQ '' AND '&N' EQ '')
         LARL  15,=CL8' '         BASE-FREE
         MVC   ACBDDNM,0(15)      MOVE ACB BLANK DDNAME
         AGO   .DORMODE
         AEND
.*
         AIF   ('&DD' EQ '')
&DD      SETC  '&N'
         AEND
         AIF   (K'&DD EQ 0 OR K'&DD GT 8)
         MNOTE 15,'DDNAME MUST BE 1-8 BYTES'
         AEND
         LARL  15,=CL8'&DD'       BASE-FREE
         MVC   ACBDDNM,0(15)      MOVE ACB DDNAME
.*
.DORMODE ANOP
         AIF   ('&RMODE31' EQ ''     OR                                X
               '&RMODE31'  EQ 'ALL'  OR                                X
               '&RMODE31'  EQ 'BUFF' OR                                X
               '&RMODE31'  EQ 'CB'   OR                                X
               '&RMODE31'  EQ 'NONE').RMODOK
         MNOTE 15,'INVALID RMODE31 - &RMODE31'
.RMODOK  ANOP
         AIF   ('&RMODE31' EQ 'ALL' OR '&RMODE31' EQ 'BUFF')
&RMODEBF SETB 1
         AEND
         AIF   ('&RMODE31' EQ 'ALL' OR '&RMODE31' EQ 'CB')
&RMODECB SETB 1
         AEND
.*
.* SET ZGENMAC1-4 USING ZGENMACF
.* RMODEBF IS USED BY ZGENMACF
         ZGENMACF MACRF=&MACRF,MODE=ACB GENERATE 4-BYTE MACRF
         MVI   ACBMACR1,B'&ZGENMACF1' MOVE ACBMACF1
         MVI   ACBMACR2,B'&ZGENMACF2' MOVE ACBMACF2
         MVI   ACBMACR3,B'&ZGENMACF3' MOVE ACBMACF3
         MVI   ACBMACR4,B'&ZGENMACF4' MOVE ACBMACF4
.*
         AIF   (T'&BUFND NE 'O')
            AIF   (&BUFND GT 32767)
         MNOTE 15,'BUFND TOO LARGE - &BUFND'
            AEND
         MVHHI ACBBUFND,&BUFND    MOVE ACB BUFND
         AEND
.*
         AIF   (T'&BUFNI NE 'O')
            AIF   (&BUFNI GT 32767)
         MNOTE 15,'BUFNI TOO LARGE - &BUFNI'
            AEND
         MVHHI ACBBUFNI,&BUFNI    MOVE ACB BUFNI
         AEND
.*
         AIF   (T'&BUFSP NE 'O')
            AIF   (&BUFSP GT 16777215)
         MNOTE 15,'BUFSP TOO LARGE - &BUFSP'
            AEND
         MVHI  ACBBUFSP,&BUFSP    MOVE ACB BUFSP
         AEND
.*
         AIF   (T'&PASSWD NE 'O')
            AIF   ('&PASSWD'(1,1) EQ '(')
               AIF ('&PASSWD' EQ '(0)'   OR                            X
               '&PASSWD'      EQ '(R0)'  OR                            X
               '&PASSWD'      EQ '(1)'   OR                            X
               '&PASSWD'      EQ '(R1)'  OR                            X
               '&PASSWD'      EQ '(14)'  OR                            X
               '&PASSWD'      EQ '(R14)' OR                            X
               '&PASSWD'      EQ '(15)'  OR                            X
               '&PASSWD'      EQ '(R15)')
         MNOTE 12,'GENCB PASSWD= INVALID REGISTER USE'
               AEND
         ST    &PASSWD,ACBPASSW   STORE ACB PASSWORD
            AELSE
         LARL  15,=A(&PASSWD)     BASE-FREE
         MVC   ACBPASSW,0(15)     MOVE ACB PASSWORD
            AEND
         AEND
.*
         AIF   (T'&EXLST NE 'O')
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF ('&EXLST' EQ '(0)'   OR                             X
               '&EXLST'      EQ '(R0)'  OR                             X
               '&EXLST'      EQ '(1)'   OR                             X
               '&EXLST'      EQ '(R1)'  OR                             X
               '&EXLST'      EQ '(14)'  OR                             X
               '&EXLST'      EQ '(R14)' OR                             X
               '&EXLST'      EQ '(15)'  OR                             X
               '&EXLST'      EQ '(R15)')
         MNOTE 12,'GENCB EXLST= INVALID REGISTER USE'
               AEND
         ST    &EXLST,ACBEXLST    STORE ACB EXLST
            AELSE
         LARL  15,=A(&EXLST)      BASE-FREE
         MVC   ACBEXLST,0(15)     MOVE ACB EXLST
            AEND
.*
&OFLAGS  SETC  '&RMODEBF&RMODECB.000000'
         MVI   ACBOFLGS,B'&OFLAGS' MOVE ACBOFLGS
.*
         AIF   (T'&BSTRNO NE 'O')
            AIF   (&BSTRNO GT 255)
         MNOTE 15,'BSTRNO TOO LARGE - &BSTRNO'
            AEND
         MVI   ACBBSTNO,&BSTRNO   MOVE ACB BSTRNO
         AEND
.*
         AIF   (T'&STRNO NE 'O')
            AIF   (&STRNO GT 255)
         MNOTE 15,'STRNO TOO LARGE - &STRNO'
            AEND
         MVI   ACBSTRNO,&STRNO    MOVE ACB STRNO
         AEND
.*
         AIF   (T'&SHRPOOL NE 'O')
            AIF   (&SHRPOOL GT 255)
         MNOTE 15,'SHRPOOL TOO LARGE - &SHRPOOL'
            AEND
         MVI   ACBSHRP,&SHRPOOL   MOVE ACB SHRPOOL
         AEND
.*
.* zVSAM EXTENSIONS
         MVI   ACBVER,X'02'       MOVE ACBVER zACB v2
.*
.* GENERATE COPIES IF NOT 1
         AIF   (&COPIES NE 0)
&TCOPY   SETA  &COPIES-1
         AEND
         AIF   (&TCOPY NE 0)
         AHIK  14,1,&LBLK         R14=WORK AREA ADDRESS FOR COPIES
         LA    0,&TCOPY           R0=LOOP CONTROL
ACBI&SYSNDX DS 0H
         MVC   0(&LBLK,14),0(1)   COPY ACB
         AHI   14,&LBLK           BUMP WAREA POINTER
         BCT   0,ACBI&SYSNDX      LOOP
         AEND
*
.* RETURN ADDRESS(R1) AND LENGTH(R0) OF ALL BLOCKS
         LA    0,&LBLKS           R0=LENGTH OF ALL BLOCKS
         SR    15,15              RC=0
         MEXIT
.*
.ACBMFL  ANOP
.* PROCESS ACB GENCB MF=L
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&WAREA'(1,1) EQ '(')
         MNOTE 12,'GENCB WAREA= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
            AIF   ('&PASSWD'(1,1) EQ '(')
         MNOTE 12,'GENCB PASSWD= REGISTER NOTATION NOT ALLOWED WITH MF=-
               L'
            AEND
            AIF   ('&EXLST'(1,1) EQ '(')
         MNOTE 12,'GENCB EXLST= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
         AEND
.* COUNT NO. OF FIELDS
&FIELDS  SETA  0
         AIF   ('&COPIES' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
.* WAREA AND LENGTH, BOTH OR NEITHER
         AIF   ('&LENGTH' EQ '' AND '&WAREA' EQ '').ACBNOWL
         AIF   ('&LENGTH' NE '' AND '&WAREA' NE '').ACBLWL
         AIF   ('&LENGTH' NE '')
         MNOTE 12,'GENCB MISSING WAREA FOR LENGTH'
         AEND
.*
         AIF   ('&WAREA'  NE '')
         MNOTE 12,'GENCB MISSING LENGTH FOR WAREA'
         AEND
.ACBLWL  ANOP
&FIELDS  SETA  &FIELDS+2
.*
.ACBNOWL ANOP
.* NO WAREA AND LOC
         AIF   ('&WAREA' NE '' AND '&LOC' NE '')
         MNOTE 12,'GENCB WAREA AND LOC SPECIFIED'
         AEND
         AIF   ('&LOC' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
.*
         AIF   ('&BSTRNO' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFND' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFNI' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFSP' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&DDNAME' NE '')
&FIELDS  SETA  &FIELDS+2
&BYTE8   SETA  &BYTE8+1
         AEND
         AIF   ('&EXLST' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&MACRF NE 'O')
&FIELDS  SETA  &FIELDS+1
         ZGENMACF MACRF=&MACRF,MODE=ACB GENERATE 4-BYTE MACRF
         AEND
         AIF   ('&PASSWD' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&RMODE31' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&SHRPOOL' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&STRNO' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'GENCB NO LABEL FOR CBMR'
         AEND
&BRAS    SETA  0
         AIF   (T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS-&BYTE8(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+(&FIELDS-&BYTE8)+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRACB+CBMRGEN) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS-&BYTE8) CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         AIF   ('&COPIES' NE '')
         DC    AL1(CBMRACB_COPIES)
         AEND
         AIF   ('&WAREA' NE '')
         DC    AL1(CBMRACB_WAREA)
         AEND
         AIF   ('&LENGTH' NE '')
         DC    AL1(CBMRACB_LENGTH)
         AEND
         AIF   ('&LOC' NE '')
         DC    AL1(CBMRACB_LOC)
         AEND
         AIF   ('&BSTRNO' NE '')
         DC    AL1(CBMRACB_BSTRNO)
         AEND
         AIF   ('&BUFND' NE '')
         DC    AL1(CBMRACB_BUFND)
         AEND
         AIF   ('&BUFNI' NE '')
         DC    AL1(CBMRACB_BUFNI)
         AEND
         AIF   ('&BUFSP' NE '')
         DC    AL1(CBMRACB_BUFSP)
         AEND
         AIF   ('&DDNAME' NE '')
         DC    AL1(CBMRACB_DDNM)
         AEND
         AIF   ('&EXLST' NE '')
         DC    AL1(CBMRACB_EXLST)
         AEND
         AIF   ('&RMODE31' NE '')
         DC    AL1(CBMRACB_RMODE31)
         AEND
         AIF   (T'&MACRF NE 'O')
         DC    AL1(CBMRACB_MACRF)
         AEND
         AIF   ('&PASSWD' NE '')
         DC    AL1(CBMRACB_PASSWD)
         AEND
         AIF   ('&SHRPOOL' NE '')
         DC    AL1(CBMRACB_SHRPL)
         AEND
         AIF   ('&STRNO' NE '')
         DC    AL1(CBMRACB_STRNO)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS-&BYTE8  HEADER+NO. OF VERBS
&I       SETA  1
.*
         AIF   ('&COPIES' NE '')
         DC    AL4(&COPIES)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&WAREA' NE '')
         DC    AL4(&WAREA)
            AIF   ('&WAREA'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&WAREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&LENGTH' NE '')
         DC    AL4(&LENGTH)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&LOC' NE '')
            AIF   ('&LOC' EQ 'BELOW')
         DC    X'80000000'
&OFFSET  SETA  &OFFSET+4
            AELSE
         DC    X'40000000'
&OFFSET  SETA  &OFFSET+4
            AEND
         AEND
.*
         AIF   ('&BSTRNO' NE '')
            AIF   (&BSTRNO GT 255)
         MNOTE 12,'BSTRNO GT 255 - &BSTRNO'
            AEND
         DC    AL4(&BSTRNO)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFND' NE '')
            AIF   (&BUFND GT 32767)
         MNOTE 12,'BUFND GT 32767 - &BUFND'
            AEND
         DC    AL4(&BUFND)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFNI' NE '')
            AIF   (&BUFNI GT 32767)
         MNOTE 12,'BUFNI GT 32767 - &BUFNI'
            AEND
         DC    AL4(&BUFNI)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFSP' NE '')
            AIF   (&BUFSP GT 16777215)
         MNOTE 15,'BUFSP TOO LARGE - &BUFSP'
            AEND
         DC    AL4(&BUFSP)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&DDNAME' NE '')
         DC    CL8'&DDNAME'
&OFFSET  SETA  &OFFSET+8
         AEND
.*
         AIF   ('&EXLST' NE '')
         DC    AL4(&EXLST)
            AIF   ('&EXLST'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&EXLST'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&RMODE31' EQ ''     OR                                X
               '&RMODE31'  EQ 'ALL'  OR                                X
               '&RMODE31'  EQ 'BUFF' OR                                X
               '&RMODE31'  EQ 'CB'   OR                                X
               '&RMODE31'  EQ 'NONE').RMODOK2
         MNOTE 15,'INVALID RMODE31 - &RMODE31'
.RMODOK2 ANOP
         AIF   ('&RMODE31' EQ 'ALL' OR '&RMODE31' EQ 'BUFF')
.* RMODEBF IS PASSED TO ZGENMACF
&RMODEBF SETB 1
         AEND
         AIF   ('&RMODE31' EQ 'ALL')
         DC    X'80000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'BUFF')
         DC    X'40000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'CB')
         DC    X'20000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'NONE')
         DC    X'10000000'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   (T'&MACRF NE 'O')
         DC    B'&ZGENMACF1'
         DC    B'&ZGENMACF2'
         DC    B'&ZGENMACF3'
         DC    B'&ZGENMACF4'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&PASSWD' NE '')
         DC    AL4(&PASSWD)
            AIF   ('&PASSWD'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&PASSWD'
&I       SETA  &I+1
            AEND
         AEND
.*
         AIF   ('&SHRPOOL' NE '')
            AIF   (&SHRPOOL GT 255)
         MNOTE 12,'SHRPOOL GT 255 - &SHRPOOL'
            AEND
         DC    AL4(&SHRPOOL)
         AEND
.*
         AIF   ('&STRNO' NE '')
            AIF   (&STRNO GT 255)
         MNOTE 12,'STRNO GT 255 - &STRNO'
            AEND
         DC    AL4(&STRNO)
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'GENCB MF= INVALID REGISTER USE'
            AEND
            AIF    ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
&I       SETA  1
.ACBRGLP ANOP
            AIF   (&I GT 10).ACBRGDN
            AIF   (&OFFREG(&I) NE 0)
               AIF   (NOT &ACBHAND)
* HANDLE REGISTER NOTATION
&ACBHAND SETB  1
               AEND
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
            AEND
&I       SETA  &I+1
         AGO   .ACBRGLP
.*
.ACBRGDN ANOP
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').ACBMFEG
         SR    15,15              RC=0
         MEXIT
.*
.ACBMFEG ANOP
.* PROCESS GENCB ACB MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* WHEN DONE, MOVE ALL THE CBMR VALUES INTO THE FIRST ACB
.* AND GENERATE THE COPIES
.* IF COPIES= NOT IN THE CBMR, GENERATE 1
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'GENCB ACB MF=E/G SECOND PARAMETER MISSING'
         MEXIT
         AEND
         AIF   ('&MF(2)'(1,1) EQ '(')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'GENCB MF= INVALID REGISTER USE'
            AEND
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
         USING CBMR,1
         BRAS  15,*+8             BYPASS CONSTANT
         DC    C'CBMR'
         CLC   CBMREYE,0(15)      CORRECT ?
         JNE   GENCB8&SYSNDX      ERROR IF NOT
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
GENCBSV&SYSNDX DS 0H
         DS    2AL4
         STM   0,1,GENCBSV&SYSNDX SAVE R0-R1
         AIF   ('&MF(1)' EQ 'G').ACBMFG
.*
         AIF   ('&COPIES' NE '')
         LHI   14,CBMRACB_COPIES  ACB COPIES
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&COPIES)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&WAREA' NE '')
         LHI   14,CBMRACB_WAREA   ACB WAREA
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&WAREA'(1,1) EQ '(')
               AIF ('&WAREA' EQ '(0)'   OR                             X
               '&WAREA'      EQ '(R0)'  OR                             X
               '&WAREA'      EQ '(1)'   OR                             X
               '&WAREA'      EQ '(R1)'  OR                             X
               '&WAREA'      EQ '(14)'  OR                             X
               '&WAREA'      EQ '(R14)' OR                             X
               '&WAREA'      EQ '(15)'  OR                             X
               '&WAREA'      EQ '(R15)')
         MNOTE 12,'GENCB WAREA= INVALID REGISTER USE'
               AEND
         ST    &WAREA,0(14)       STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&WAREA)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&LENGTH' NE '')
         LHI   14,CBMRACB_LENGTH  ACB LENGTH
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&LENGTH)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&LOC' NE '')
         LHI   14,CBMRACB_LOC     ACB LOC
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&LOC' EQ 'BELOW')
         LARL  15,=A(X'80000000') BASE-FREE
            AELSE
         LARL  15,=A(X'40000000') BASE-FREE
            AEND
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&BSTRNO' NE '')
         LHI   14,CBMRACB_BSTRNO  ACB BSTRNO VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BSTRNO)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&BUFND' NE '')
         LHI   14,CBMRACB_BUFND   ACB BUFND VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BUFND)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&BUFNI' NE '')
         LHI   14,CBMRACB_BUFNI   ACB BUFNI VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BUFNI)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&BUFSP' NE '')
         LHI   14,CBMRACB_BUFSP   ACB BUFSP VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BUFSP)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&DDNAME' NE '')
         LHI   14,CBMRACB_DDNM    ACB DDNAME VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=CL8'&DDNAME'   BASE-FREE
         MVC   0(8,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&EXLST' NE '')
         LHI   14,CBMRACB_EXLST   ACB EXLST VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF ('&EXLST' EQ '(0)'   OR                             X
               '&EXLST'      EQ '(R0)'  OR                             X
               '&EXLST'      EQ '(1)'   OR                             X
               '&EXLST'      EQ '(R1)'  OR                             X
               '&EXLST'      EQ '(14)'  OR                             X
               '&EXLST'      EQ '(R14)' OR                             X
               '&EXLST'      EQ '(15)'  OR                             X
               '&EXLST'      EQ '(R15)')
         MNOTE 12,'GENCB EXLST= INVALID REGISTER USE'
               AEND
         ST    &EXLST,0(14)       STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&EXLST)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&RMODE31' EQ 'ALL')
&RMODEBF SETB 1
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=X'80000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'BUFF')
&RMODEBF SETB 1
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=X'40000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'CB')
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=X'20000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'NONE')
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=X'10000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&MACRF' NE '')
         LHI   14,CBMRACB_MACRF   ACB MACRF VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         J     *+8                BYPASS CONSTANTS
         ZGENMACF MACRF=&MACRF,MODE=ACB GENERATE 4-BYTE MACRF
         DC    B'&ZGENMACF1'
         DC    B'&ZGENMACF2'
         DC    B'&ZGENMACF3'
         DC    B'&ZGENMACF4'
         MVC   0(4,14),4(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&PASSWD' NE '')
         LHI   14,CBMRACB_PASSWD  ACB PASSWD VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&PASSWD'(1,1) EQ '(')
               AIF ('&PASSWD' EQ '(0)'   OR                            X
               '&PASSWD'      EQ '(R0)'  OR                            X
               '&PASSWD'      EQ '(1)'   OR                            X
               '&PASSWD'      EQ '(R1)'  OR                            X
               '&PASSWD'      EQ '(14)'  OR                            X
               '&PASSWD'      EQ '(R14)' OR                            X
               '&PASSWD'      EQ '(15)'  OR                            X
               '&PASSWD'      EQ '(R15)')
         MNOTE 12,'GENCB PASSWD= INVALID REGISTER USE'
               AEND
         ST    &PASSWD,0(14)      STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&PASSWD)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&SHRPOOL' NE '')
         LHI   14,CBMRACB_SHRPL   ACB SHRPOOL VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&SHRPOOL)    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&STRNO' NE '')
         LHI   14,CBMRACB_STRNO   ACB STRNO VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&STRNO)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
.ACBMFG  ANOP
.* USE THE CBMR TO GENERATE THE ACB
.* EXTRACT WAREA/LENGTH/COPIES/LOC FROM THE CBMR AS WE'LL NEED THEM FOR
.* GETMAIN AND SIZE CHECKING
.* FIND WAREA/LENGTH
         LHI   14,CBMRACB_WAREA   ACB WAREA
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB2&SYSNDX      EXIT IF NOT
* WAREA FOUND
         MVC   GENCBZ&SYSNDX.(8),0(14) SAVE WAREA/LENGTH
GENCB2&SYSNDX DS 0H
* FIND COPIES
         LHI   14,CBMRACB_COPIES  ACB COPIES
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB3&SYSNDX      EXIT IF NOT
* COPIES FOUND
         MVC   GENCBZ&SYSNDX+8(4),0(14) SAVE COPIES
GENCB3&SYSNDX DS 0H
* FIND LOC
         LHI   14,CBMRACB_LOC     ACB LOC
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB4&SYSNDX      EXIT IF NOT
* LOC FOUND
         MVC   GENCBZ&SYSNDX+12(4),0(14) SAVE LOC
GENCB4&SYSNDX DS 0H
         LA    1,&LBLK            R1=ACB LENGTH
         MS    1,GENCBZ&SYSNDX+8  * COPIES=SIZE NEEDED
         CGHSI GENCBZ&SYSNDX,-1   WAREA/LENGTH SAVED ?
         JE    GENCBU&SYSNDX      EXIT IF NOT
* WAREA/LENGTH SPECIFIED, CHECK LENGTH
         C     1,GENCBZ&SYSNDX+4  LENGTH OK ?
         JNH   GENCBW&SYSNDX      EXIT IF IT IS
* WAREA TOO SMALL
         LA    15,4               RC=4
         LA    0,9                REASON CODE=9 (WAREA TOO SMALL)
         J     GENCBX&SYSNDX      EXIT
*
GENCBU&SYSNDX DS 0H
* NO WAREA/LENGTH, DO GETMAIN
         TM    GENCBZ&SYSNDX+12,X'80' BELOW ?
         JO    GENCBB&SYSNDX      EXIT IF IT IS
* LOC FOUND AND ANY
         GETMAIN RU,LV=(1),LOC=ANY
         J     GENCBR&SYSNDX      EXIT
*
GENCBB&SYSNDX DS 0H
* LOC NOT FOUND OR LOC FOUND AND BELOW
         GETMAIN RU,LV=(1),LOC=BELOW
GENCBR&SYSNDX DS 0H
         ST    1,GENCBZ&SYSNDX    SAVE AREA ADDRESS
         ST    0,GENCBZ&SYSNDX+4  SAVE AREA LENGTH
         LR    15,1               R15=GETMAINED ADDRESS
         J     GENCBQ&SYSNDX      EXIT
*
GENCBW&SYSNDX DS 0H
         ST    1,GENCBZ&SYSNDX+4  SAVE LENGTH NEEDED
         L     15,GENCBZ&SYSNDX   R15=WAREA ADDRESS
GENCBQ&SYSNDX DS 0H
         IIHF  0,C'zACB'          R0=ACB EYECATCHER
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
         ARK   14,0,1             R14=ADDRESS OF FIELDS
         USING IHAACB,15
* CREATE FIRST ACB
         XC    0(&LBLK,15),0(15)  CLEAR FIRST ACB
         STFH  0,ACBEYE           STORE ACB EYECATCHER
         MVI   ACBID,ACBIDVAL     MOVE ACB IDENTIFIER
         MVI   ACBSTYP,ACBSVSAM   MOVE ACB SUBTYPE
         MVHHI ACBLEN,&LBLK       MOVE ACB LENGTH
         IIHF  0,C'    '          R0=BLANKS
         STFH  0,ACBDDNM          STORE ACB
         STFH  0,ACBDDNM+4                  BLANK DDNAME
         MVI   ACBVER,X'02'       MOVE ACBVER zACB v2
GENCBM&SYSNDX DS 0H
.* MISS NON-ACB VERBS
         CLI   0(1),CBMRACB_WAREA WAREA ?
         JE    GENCBD&SYSNDX      EXIT IF IT IS
         CLI   0(1),CBMRACB_COPIES COPIES ?
         JE    GENCBD&SYSNDX      EXIT IF IT IS
         CLI   0(1),CBMRACB_LOC   LOC ?
         JE    GENCBD&SYSNDX      EXIT IF IT IS
.* DO ACB VERBS
         CLI   0(1),CBMRACB_BSTRNO BSTRNO ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBSTNO,3(14)     MOVE BSTRNO INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_BUFND BUFND ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBUFND,2(14)     MOVE BUFND INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_BUFNI BUFNI ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBUFNI,2(14)     MOVE BUFNI INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_BUFSP BUFSP ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBUFSP,0(14)     MOVE BUFSP INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_DDNM  DDNAME ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBDDNM,0(14)      MOVE DDNAME INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_EXLST EXLST ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBEXLST,0(14)     MOVE EXLST INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_RMODE31 RMODE31 ?
         JNE   *+64               EXIT IF NOT
         NI    ACBOFLGS,255-(ACBR31B+ACBR31C) TURN OFF RMODE31 BITS
         TM    0(14),X'10'        RMODE31=NONE ?
         JO    GENCBD&SYSNDX      EXIT IF IT IS
         TM    0(14),X'80'        RMODE31=ALL ?
         JNO   *+12               EXIT IF NOT
         OI    ACBOFLGS,ACBR31B+ACBR31C TURN ON BUFF+CB
         J     GENCBD&SYSNDX      EXIT
*
         TM    0(14),X'40'        RMODE31=BUFF ?
         JNO   *+12               EXIT IF NOT
         OI    ACBOFLGS,ACBR31B   TURN ON BUFF
         J     GENCBD&SYSNDX      EXIT
*
         TM    0(14),X'20'        RMODE31=CB ?
         JNO   GENCBD&SYSNDX      EXIT IF NOT
         OI    ACBOFLGS,ACBR31C   TURN ON CB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_MACRF MACRF ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBMACRF(4),0(14)  MOVE MACR1-4 INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_PASSWD PASSWORD ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBPASSW,0(14)     MOVE PASSWORD ADDRESS INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_SHRPL SHAREPOOL NUMBER ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBSHRP,3(14)      MOVE SHAREPOOL INTO ACB
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_STRNO STRNO ?
         JNE   *+10               EXIT IF NOT
         MVC   ACBSTRNO,3(14)     MOVE STRNO INTO ACB
GENCBD&SYSNDX DS 0H
         AHI   14,4               BUMP FIELDS POINTER
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+8                EXIT IF NOT
         AHI   14,4               BUMP FIELDS POINTER
         AHI   1,1                BUMP VERBS POINTER
         BRCT  0,GENCBM&SYSNDX    LOOP
*
         DROP  15
* FIRST ACB BUILT, NOW DO COPIES
* IF COPIES NOT FOUND OR COPIES=1 THEN WE'RE DONE
         L     0,GENCBZ&SYSNDX+8  R0=COPIES
         AHI   0,-1               COPIES-1
         JZ    GENCBJ&SYSNDX      EXIT IF COPIES=1
         AHIK  14,15,&LBLK        R14=AREA ADDRESS FOR COPIES
GENCBI&SYSNDX DS 0H
         MVC   0(&LBLK,14),0(15)  COPY ACB
         AHI   14,&LBLK           BUMP AREA POINTER
         BCT   0,GENCBI&SYSNDX    LOOP
GENCBJ&SYSNDX DS 0H
* SET R1=AREA AND R0=LENGTH USED
         L     1,GENCBZ&SYSNDX    R1=AREA ADDRESS
         L     0,GENCBZ&SYSNDX+4  R0=AREA LENGTH USED
         J     GENCBG&SYSNDX      EXIT
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
GENCBS&SYSNDX DS 0H
         SGR   1,1                CLEAR R1 HIGH
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
GENCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    GENCBF&SYSNDX      EXIT IF IT IS
         AIH   1,4                ASSUME 4-BYTE FIELD
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+10               EXIT IF NOT
         AIH   1,4                8-BYTE FIELD
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,GENCBL&SYSNDX    LOOP
*
.* YOU CANNOT MODIFY A VERB NOT PREVIOUSLY CREATED
         J     GENCB8&SYSNDX      ERROR IF NOT FOUND
*
* VERB SEARCH SUBROUTINE, RETURN WITH R0=8 IF NOT FOUND
GENCBT&SYSNDX DS 0H
         SGR   1,1                CLEAR R1 HIGH
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
GENCBN&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    GENCBF&SYSNDX      EXIT IF IT IS
         AIH   1,4                ASSUME 4-BYTE FIELD
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+10               EXIT IF NOT
         AIH   1,4                8-BYTE FIELD
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,GENCBN&SYSNDX    LOOP
*
         LA    0,8                R0=8
         BR    15                 RETURN
*
GENCBZ&SYSNDX DS 0H               SAVE CBMR FIELDS
         DC    FL4'-1'            SAVE CBMR WAREA
         DC    FL4'-1'            SAVE CBMR LENGTH
         DC    FL4'1'             SAVE CBMR COPIES (DEFAULT=1)
         DC    X'80000000'        SAVE CBMR LOC    (DEFAULT=BELOW)
*
GENCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,GENCBSV&SYSNDX+4 14=ADDRESS OF VERB CODES (CBMRBODY)
         A     14,GENCBSV&SYSNDX  +NO. OF VERBS=START OF FIELDS
         SRLG  1,1,32             R1=FIELD OFFSET
         AR    14,1               R14=FIELD POSITION
         SR    0,0                R0=0
         BR    15                 RETURN
*
GENCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (WRONG CB TYPE/FIELD NOT FOUND)
         J     GENCBX&SYSNDX      EXIT
*
GENCBG&SYSNDX DS 0H
         SR    15,15              RC=0
GENCBX&SYSNDX DS 0H
         MEXIT
.*
.DORPL   ANOP
.*************
.* GENCB RPL *
.*************
         AIF   ('&EXLST' NE '')
         MNOTE 12,'EXLST IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&DDNAME' NE '')
         MNOTE 12,'DDNAME IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&PASSWD' NE '')
         MNOTE 12,'PASSWD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MACRF' NE '')
         MNOTE 12,'MACRF IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFND' NE '')
         MNOTE 12,'BUFND IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFNI' NE '')
         MNOTE 12,'BUFNI IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFSP' NE '')
         MNOTE 12,'BUFSP IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RMODE31' NE '')
         MNOTE 12,'RMODE31 IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&STRNO' NE '')
         MNOTE 12,'STRNO IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BSTRNO' NE '')
         MNOTE 12,'BSTRNO IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&SHRPOOL' NE '')
         MNOTE 12,'SHRPOOL IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&EODAD' NE '')
         MNOTE 12,'EODAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&LERAD' NE '')
         MNOTE 12,'LERAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&SYNAD' NE '')
         MNOTE 12,'SYNAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT AN RPL PARAMETER'
         AEND
.*
.* CHECK RPL UNSUPPORTED FIELDS
.*
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&MF(1)' EQ 'L').RPLMFL
         AIF   ('&MF(1)' EQ 'E').RPLMFEG
         AIF   ('&MF(1)' EQ 'G').RPLMFL
.*
.* PROCESS RPL MF=I
.* R1=USER WORK AREA OR GETMAINED AREA ADDRESS
         AIF   ('&LENGTH' EQ '' AND '&WAREA' EQ '').RPLIGET
         AIF   ('&LENGTH' NE '' AND '&WAREA' NE '').RPLIWL
.*
         AIF   ('&LENGTH' NE '')
         MNOTE 12,'GENCB MISSING WAREA FOR LENGTH'
         AEND
.*
         AIF   ('&WAREA' NE '')
         MNOTE 12,'GENCB MISSING LENGTH FOR WAREA'
         AEND
.*
.RPLIWL  ANOP
         AIF   ('&WAREA' NE '' AND '&LOC' NE '')
         MNOTE 12,'GENCB WAREA AND LOC SPECIFIED'
         AEND
.*
         AIF   ('&WAREA'(1,1) EQ '(')            RPI 703
            AIF ('&WAREA' EQ '(0)'   OR                                X
               '&WAREA'   EQ '(R0)'  OR                                X
               '&WAREA'   EQ '(1)'   OR                                X
               '&WAREA'   EQ '(R1)'  OR                                X
               '&WAREA'   EQ '(14)'  OR                                X
               '&WAREA'   EQ '(R14)' OR                                X
               '&WAREA'   EQ '(15)'  OR                                X
               '&WAREA'   EQ '(R15)')
         MNOTE 12,'GENCB WAREA= INVALID REGISTER USE'
            AEND
         LR    1,&WAREA           R1=WORK AREA ADDRESS
         AELSE
         LA    1,&WAREA           R1=WORK AREA ADDRESS
         AEND
.*
         AIF   ('&LENGTH' GE '&LBLKS').RPLICLR
         MNOTE 12,'GENCB LENGTH TOO SHORT FOR COPIES=&COPIES OF &BLK'
.*
.RPLIGET ANOP
&LOC2    SETC  '&LOC'
         AIF   ('&LOC2' EQ '')
&LOC2    SETC  'BELOW'
         AEND
         GETMAIN RU,LV=&LBLKS,LOC=&LOC2
.RPLICLR ANOP
         XC    0(&LBLK,1),0(1)    CLEAR FIRST RPL
.* GENERATE FIRST RPL STARTING AT R1
         USING IHARPL,1
         LGFI  0,C'zRPL'          R0=RPL EYECATCHER
         ST    0,RPLEYE           STORE RPL EYECATCHER
.*
         AIF   (T'&ACB NE 'O')
            AIF   ('&ACB'(1,1) EQ '(')
               AIF ('&ACB' EQ '(0)'   OR                               X
               '&ACB'      EQ '(R0)'  OR                               X
               '&ACB'      EQ '(1)'   OR                               X
               '&ACB'      EQ '(R1)'  OR                               X
               '&ACB'      EQ '(14)'  OR                               X
               '&ACB'      EQ '(R14)' OR                               X
               '&ACB'      EQ '(15)'  OR                               X
               '&ACB'      EQ '(R15)')
         MNOTE 12,'GENCB ACB= INVALID REGISTER USE'
               AEND
         ST    &ACB,RPLDACB       STORE RPL ACB
            AELSE
         LARL  15,=A(&ACB)        BASE-FREE
         MVC   RPLDACB,0(15)      MOVE RPL ACB
            AEND
         AEND
.*
         AIF   (T'&AREA NE 'O')
            AIF   ('&AREA'(1,1) EQ '(')
               AIF ('&AREA' EQ '(0)'   OR                              X
               '&AREA'      EQ '(R0)'  OR                              X
               '&AREA'      EQ '(1)'   OR                              X
               '&AREA'      EQ '(R1)'  OR                              X
               '&AREA'      EQ '(14)'  OR                              X
               '&AREA'      EQ '(R14)' OR                              X
               '&AREA'      EQ '(15)'  OR                              X
               '&AREA'      EQ '(R15)')
         MNOTE 12,'GENCB AREA= INVALID REGISTER USE'
               AEND
         ST    &AREA,RPLAREA      STORE RPL AREA
            AELSE
         LARL  15,=A(&AREA)       BASE-FREE
         MVC   RPLAREA,0(15)      MOVE RPL AREA
            AEND
         AEND
.*
         AIF   (T'&AREALEN NE 'O')
            AIF   (&AREALEN GT 16777215)
         MNOTE 15,'AREALEN TOO LARGE - &AREALEN'
            AEND
         MVHI  RPLAREAL,&AREALEN  MOVE RPL AREALEN
         AEND
.*
         AIF   (T'&ARG NE 'O')
            AIF   ('&ARG'(1,1) EQ '(')
               AIF ('&ARG' EQ '(0)'   OR                               X
               '&ARG'      EQ '(R0)'  OR                               X
               '&ARG'      EQ '(1)'   OR                               X
               '&ARG'      EQ '(R1)'  OR                               X
               '&ARG'      EQ '(14)'  OR                               X
               '&ARG'      EQ '(R14)' OR                               X
               '&ARG'      EQ '(15)'  OR                               X
               '&ARG'      EQ '(R15)')
         MNOTE 12,'GENCB ARG= INVALID REGISTER USE'
               AEND
         ST    &ARG,RPLARG        STORE RPL ARG
            AELSE
         LARL  15,=A(&ARG)        BASE-FREE
         MVC   RPLARG,0(15)       MOVE RPL ARG
            AEND
         AEND
.*
         AIF   (T'&ECB NE 'O')
            AIF   ('&ECB'(1,1) EQ '(')
               AIF ('&ECB' EQ '(0)'   OR                               X
               '&ECB'      EQ '(R0)'  OR                               X
               '&ECB'      EQ '(1)'   OR                               X
               '&ECB'      EQ '(R1)'  OR                               X
               '&ECB'      EQ '(14)'  OR                               X
               '&ECB'      EQ '(R14)' OR                               X
               '&ECB'      EQ '(15)'  OR                               X
               '&ECB'      EQ '(R15)')
         MNOTE 12,'GENCB ECB= INVALID REGISTER USE'
               AEND
         ST    &ECB,RPLECB        STORE RPL ECB
            AELSE
         LARL  15,=A(&ECB)        BASE-FREE
         MVC   RPLECB,0(15)       MOVE RPL ECB
            AEND
         AEND
.*
         AIF   (T'&MSGAREA NE 'O')
            AIF   ('&MSGAREA'(1,1) EQ '(')
               AIF ('&MSGAREA' EQ '(0)'   OR                           X
               '&MSGAREA'      EQ '(R0)'  OR                           X
               '&MSGAREA'      EQ '(1)'   OR                           X
               '&MSGAREA'      EQ '(R1)'  OR                           X
               '&MSGAREA'      EQ '(14)'  OR                           X
               '&MSGAREA'      EQ '(R14)' OR                           X
               '&MSGAREA'      EQ '(15)'  OR                           X
               '&MSGAREA'      EQ '(R15)')
         MNOTE 12,'GENCB MSGAREA= INVALID REGISTER USE'
               AEND
         ST    &MSGAREA,RPLMSGAR  STORE RPL MSGAREA
            AELSE
         LARL  15,=A(&MSGAREA)    BASE-FREE
         MVC   RPLMSGAR,0(15)     MOVE RPL MSGAREA
            AEND
         AEND
.*
         AIF   (T'&NXTRPL NE 'O')
            AIF   ('&NXTRPL'(1,1) EQ '(')
               AIF ('&NXTRPL' EQ '(0)'   OR                            X
               '&NXTRPL'      EQ '(R0)'  OR                            X
               '&NXTRPL'      EQ '(1)'   OR                            X
               '&NXTRPL'      EQ '(R1)'  OR                            X
               '&NXTRPL'      EQ '(14)'  OR                            X
               '&NXTRPL'      EQ '(R14)' OR                            X
               '&NXTRPL'      EQ '(15)'  OR                            X
               '&NXTRPL'      EQ '(R15)')
         MNOTE 12,'GENCB NXTRPL= INVALID REGISTER USE'
               AEND
         ST    &NXTRPL,RPLNXTRP   STORE RPL NEXTRPL
            AELSE
         LARL  15,=A(&NXTRPL)     BASE-FREE
         MVC   RPLNXTRP,0(15)     MOVE RPL NEXTRPL
            AEND
         AEND
.*
         AIF   (T'&RECLEN NE 'O')
            AIF   (&RECLEN GT 16777215)
         MNOTE 15,'RECLEN TOO LARGE - &RECLEN'
            AEND
         MVHI  RPLRECLN,&RECLEN   MOVE RPL RECLEN
         AEND
.*
         AIF   (T'&MSGLEN NE 'O')
            AIF   (&MSGLEN GT 32767)
         MNOTE 15,'MSGLEN TOO LARGE - &MSGLEN'
            AEND
         MVHHI RPLMSGLN,&MSGLEN   MOVE RPL MSGLEN
         AEND
.*
         AIF   (T'&KEYLEN NE 'O')
            AIF   (&KEYLEN GT 255)
         MNOTE 15,'KEYLEN TOO LARGE - &KEYLEN'
            AEND
         MVI   RPLKEYLN,&KEYLEN   MOVE RPL KEYLEN
         AEND
.*
         ZGENOPTD OPTCD=&OPTCD,MODE=RPL GENERATE 2-BYTE OPTCD
         MVI   RPLOPT1,B'&ZGENOPT1' MOVE RPLOPT1
         MVI   RPLOPT2,B'&ZGENOPT2' MOVE RPLOPT2
.*
.* GENERATE COPIES IF NOT 1
         AIF   (&COPIES NE 0)
&TCOPY   SETA  &COPIES-1
         AEND
         AIF   (&TCOPY NE 0)
         AHIK  14,1,&LBLK         R14=WORK AREA ADDRESS FOR COPIES
         LA    0,&TCOPY           R0=LOOP CONTROL
RPLI&SYSNDX DS 0H
         MVC   0(&LBLK,14),0(1)   COPY RPL
         AHI   14,&LBLK           BUMP WAREA POINTER
         BCT   0,RPLI&SYSNDX      LOOP
         AEND
*
.* RETURN ADDRESS(R1) AND LENGTH(R0) OF ALL BLOCKS
         LA    0,&LBLKS           R0=LENGTH OF ALL BLOCKS
         SR    15,15              RC=0
         MEXIT
.*
.RPLMFL  ANOP
.* PROCESS RPL GENCB MF=L
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&WAREA'(1,1) EQ '(')
         MNOTE 12,'GENCB WAREA= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
            AIF   ('&ACB'(1,1) EQ '(')
         MNOTE 12,'GENCB ACB= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&AREA'(1,1) EQ '(')
         MNOTE 12,'GENCB AREA= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&ARG'(1,1) EQ '(')
         MNOTE 12,'GENCB ARG= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&ECB'(1,1) EQ '(')
         MNOTE 12,'GENCB ECB= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&MSGAREA'(1,1) EQ '(')
         MNOTE 12,'GENCB MSGAREA= REGISTER NOTATION NOT ALLOWED WITH MF-
               =L'
            AEND
            AIF   ('&NXTRPL'(1,1) EQ '(')
         MNOTE 12,'GENCB NXTRPL= REGISTER NOTATION NOT ALLOWED WITH MF=-
               L'
            AEND
         AEND
.* COUNT NO. OF FIELDS
&FIELDS  SETA  0
         AIF   ('&COPIES' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
.* WAREA AND LENGTH, BOTH OR NEITHER
         AIF   ('&LENGTH' EQ '' AND '&WAREA' EQ '').RPLNOWL
         AIF   ('&LENGTH' NE '' AND '&WAREA' NE '').RPLLWL
         AIF   ('&LENGTH' NE '')
         MNOTE 12,'GENCB MISSING WAREA FOR LENGTH'
         AEND
.*
         AIF   ('&WAREA'  NE '')
         MNOTE 12,'GENCB MISSING LENGTH FOR WAREA'
         AEND
.RPLLWL  ANOP
&FIELDS  SETA  &FIELDS+2
.*
.RPLNOWL ANOP
.* NO WAREA AND LOC
         AIF   ('&WAREA' NE '' AND '&LOC' NE '')
         MNOTE 12,'GENCB WAREA AND LOC SPECIFIED'
         AEND
         AIF   ('&LOC' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
.*
         AIF   ('&ACB' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&AREA' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&AREALEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&ARG' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&ECB' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&MSGAREA' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&NXTRPL' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&RECLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&MSGLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&KEYLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&OPTCD NE 'O')
&FIELDS  SETA  &FIELDS+1
         ZGENOPTD OPTCD=&OPTCD,MODE=RPL GENERATE 2-BYTE OPTCD
         AEND
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'GENCB NO LABEL FOR CBMR'
         AEND
&BRAS    SETA  0
         AIF   (T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+&FIELDS+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRRPL+CBMRGEN) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS)       CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         AIF   ('&COPIES' NE '')
         DC    AL1(CBMRRPL_COPIES)
         AEND
         AIF   ('&WAREA' NE '')
         DC    AL1(CBMRRPL_WAREA)
         AEND
         AIF   ('&LENGTH' NE '')
         DC    AL1(CBMRRPL_LENGTH)
         AEND
         AIF   ('&LOC' NE '')
         DC    AL1(CBMRRPL_LOC)
         AEND
         AIF   ('&ACB' NE '')
         DC    AL1(CBMRRPL_ACB)
         AEND
         AIF   ('&AREA' NE '')
         DC    AL1(CBMRRPL_AREA)
         AEND
         AIF   ('&AREALEN' NE '')
         DC    AL1(CBMRRPL_AREALEN)
         AEND
         AIF   ('&ARG' NE '')
         DC    AL1(CBMRRPL_ARG)
         AEND
         AIF   ('&ECB' NE '')
         DC    AL1(CBMRRPL_ECB)
         AEND
         AIF   ('&MSGAREA' NE '')
         DC    AL1(CBMRRPL_MSGAREA)
         AEND
         AIF   ('&NXTRPL' NE '')
         DC    AL1(CBMRRPL_NEXTRPL)
         AEND
         AIF   ('&RECLEN' NE '')
         DC    AL1(CBMRRPL_RECLEN)
         AEND
         AIF   ('&MSGLEN' NE '')
         DC    AL1(CBMRRPL_MSGLEN)
         AEND
         AIF   ('&KEYLEN' NE '')
         DC    AL1(CBMRRPL_KEYLEN)
         AEND
         AIF   ('&OPTCD' NE '')
         DC    AL1(CBMRRPL_OPTCD)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS         HEADER+NO. OF VERBS
&I       SETA  1
         AIF   ('&COPIES' NE '')
         DC    AL4(&COPIES)
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&WAREA' NE '')
         DC    AL4(&WAREA)
            AIF   ('&WAREA'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&WAREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&LENGTH' NE '')
         DC    AL4(&LENGTH)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&LOC' NE '')
            AIF   ('&LOC' EQ 'BELOW')
         DC    X'80000000'
&OFFSET  SETA  &OFFSET+4
            AELSE
         DC    X'40000000'
&OFFSET  SETA  &OFFSET+4
            AEND
         AEND
.*
         AIF   ('&ACB' NE '')
         DC    AL4(&ACB)
            AIF   ('&ACB'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ACB'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&AREA' NE '')
         DC    AL4(&AREA)
            AIF   ('&AREA'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&AREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&AREALEN' NE '')
            AIF   (&AREALEN GT 16777215)
         MNOTE 15,'AREALEN TOO LARGE - &AREALEN'
            AEND
         DC    AL4(&AREALEN)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ARG' NE '')
         DC    AL4(&ARG)
            AIF   ('&ARG'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ARG'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ECB' NE '')
         DC    AL4(&ECB)
            AIF   ('&ECB'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ECB'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&MSGAREA' NE '')
         DC    AL4(&MSGAREA)
            AIF   ('&MSGAREA'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&MSGAREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&NXTRPL' NE '')
         DC    AL4(&NXTRPL)
            AIF   ('&NXTRPL'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&NXTRPL'
&I       SETA  &I+1
            AEND
         AEND
.*
         AIF   ('&RECLEN' NE '')
            AIF   (&RECLEN GT 16777215)
         MNOTE 15,'RECLEN TOO LARGE - &RECLEN'
            AEND
         DC    AL4(&RECLEN)
         AEND
.*
         AIF   ('&MSGLEN' NE '')
            AIF   (&MSGLEN GT 32767)
         MNOTE 15,'MSGLEN TOO LARGE - &MSGLEN'
            AEND
         DC    AL4(&MSGLEN)
         AEND
.*
         AIF   ('&KEYLEN' NE '')
            AIF   (&KEYLEN GT 255)
         MNOTE 15,'KEYLEN TOO LARGE - &KEYLEN'
            AEND
         DC    AL4(&KEYLEN)
         AEND
.*
         AIF   (T'&OPTCD NE 'O')
         DC    B'&ZGENOPT1'
         DC    B'&ZGENOPT2'
         DC    2B'00'
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'GENCB MF= INVALID REGISTER USE'
            AEND
            AIF    ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
&I       SETA  1
.RPLRGLP ANOP
            AIF   (&I GT 10).RPLRGDN
            AIF   (&OFFREG(&I) NE 0)
               AIF   (NOT &RPLHAND)
* HANDLE REGISTER NOTATION
&RPLHAND SETB  1
               AEND
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
            AEND
&I       SETA  &I+1
         AGO   .RPLRGLP
.*
.RPLRGDN ANOP
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').RPLMFEG
         SR    15,15              RC=0
         MEXIT
.*
.RPLMFEG ANOP
.* PROCESS GENCB RPL MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* WHEN DONE, MOVE ALL THE CBMR VALUES INTO THE FIRST RPL
.* AND GENERATE THE COPIES
.* IF COPIES= NOT IN THE CBMR, GENERATE 1
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'GENCB RPL MF=E/G SECOND PARAMETER MISSING'
         MEXIT
         AEND
         AIF   ('&MF(2)'(1,1) EQ '(')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'GENCB MF= INVALID REGISTER USE'
            AEND
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
         USING CBMR,1
         BRAS  15,*+8             BYPASS CONSTANT
         DC    C'CBMR'
         CLC   CBMREYE,0(15)      CORRECT ?
         JNE   GENCB8&SYSNDX      ERROR IF NOT
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
GENCBSV&SYSNDX DS 0H
         DS    2AL4
         STM   0,1,GENCBSV&SYSNDX SAVE R0-R1
         AIF   ('&MF(1)' EQ 'G').RPLMFG
.*
         AIF   ('&COPIES' NE '')
         LHI   14,CBMRRPL_COPIES  RPL COPIES
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&COPIES)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&WAREA' NE '')
         LHI   14,CBMRRPL_WAREA   RPL WAREA
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&WAREA'(1,1) EQ '(')
         ST    &WAREA,0(14)       STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&WAREA)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&LENGTH' NE '')
         LHI   14,CBMRRPL_LENGTH  RPL LENGTH
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&LENGTH)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&LOC' NE '')
         LHI   14,CBMRRPL_LOC     RPL LOC
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&LOC' EQ 'BELOW')
         LARL  15,=A(X'80000000') BASE-FREE
            AELSE
         LARL  15,=A(X'40000000') BASE-FREE
            AEND
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&ACB' NE '')
         LHI   14,CBMRRPL_ACB     RPL ACB VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&ACB'(1,1) EQ '(')
         ST    &ACB,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&ACB)        BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&AREA' NE '')
         LHI   14,CBMRRPL_AREA    RPL AREA VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&AREA'(1,1) EQ '(')
         ST    &AREA,0(14)        STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&AREA)       BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&AREALEN' NE '')
         LHI   14,CBMRRPL_AREALEN RPL AREALEN VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&AREALEN)    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&ARG' NE '')
         LHI   14,CBMRRPL_ARG     RPL ARG VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&ARG'(1,1) EQ '(')
         ST    &ARG,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&ARG)        BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&ECB' NE '')
         LHI   14,CBMRRPL_ECB     RPL ECB VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&ECB'(1,1) EQ '(')
         ST    &ECB,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&ECB)        BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&MSGAREA' NE '')
         LHI   14,CBMRRPL_MSGAREA RPL MSGAREA VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&MSGAREA'(1,1) EQ '(')
         ST    &MSGAREA,0(14)     STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&MSGAREA)    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&NXTRPL' NE '')
         LHI   14,CBMRRPL_NEXTRPL RPL NEXTRPL VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
            AIF   ('&NXTRPL'(1,1) EQ '(')
         ST    &NXTRPL,0(14)      STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&NXTRPL)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&RECLEN' NE '')
         LHI   14,CBMRRPL_RECLEN  RPL RECLEN VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&RECLEN)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&MSGLEN' NE '')
         LHI   14,CBMRRPL_MSGLEN  RPL MSGLEN VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&MSGLEN)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&KEYLEN' NE '')
         LHI   14,CBMRRPL_KEYLEN  RPL KEYLEN VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         LARL  15,=A(&KEYLEN)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&OPTCD' NE '')
         LHI   14,CBMRRPL_OPTCD   RPL OPTCD VERB
         BRAS  15,GENCBS&SYSNDX   FIND VERB
         J     *+8                BYPASS CONSTANTS
         ZGENOPTD OPTCD=&OPTCD,MODE=RPL GENERATE 2-BYTE OPTCD
         DC    B'&ZGENOPT1'
         DC    B'&ZGENOPT2'
         DC    2B'00'
         MVC   0(4,14),4(15)      MOVE FIELD TO CBMR
         AEND
.*
.RPLMFG  ANOP
.* USE THE CBMR TO GENERATE THE RPL
.* EXTRACT WAREA/LENGTH/COPIES/LOC FROM THE CBMR AS WE'LL NEED THEM FOR
.* GETMAIN AND SIZE CHECKING
.* FIND WAREA/LENGTH
         LHI   14,CBMRRPL_WAREA   RPL WAREA
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB2&SYSNDX      EXIT IF NOT
* WAREA FOUND
         MVC   GENCBZ&SYSNDX.(8),0(14) SAVE WAREA/LENGTH
GENCB2&SYSNDX DS 0H
* FIND COPIES
         LHI   14,CBMRRPL_COPIES  RPL COPIES
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB3&SYSNDX      EXIT IF NOT
* COPIES FOUND
         MVC   GENCBZ&SYSNDX+8(4),0(14) SAVE COPIES
GENCB3&SYSNDX DS 0H
* FIND LOC
         LHI   14,CBMRRPL_LOC     RPL LOC
         BRAS  15,GENCBT&SYSNDX   FIND VERB
         CHI   0,8                FOUND ?
         JE    GENCB4&SYSNDX      EXIT IF NOT
* LOC FOUND
         MVC   GENCBZ&SYSNDX+12(4),0(14) SAVE LOC
GENCB4&SYSNDX DS 0H
         LA    1,&LBLK            R1=RPL LENGTH
         MS    1,GENCBZ&SYSNDX+8  * COPIES=SIZE NEEDED
         CGHSI GENCBZ&SYSNDX,-1   WAREA/LENGTH SAVED ?
         JE    GENCBU&SYSNDX      EXIT IF NOT
* WAREA/LENGTH SPECIFIED, CHECK LENGTH
         C     1,GENCBZ&SYSNDX+4  LENGTH OK ?
         JNH   GENCBW&SYSNDX      EXIT IF IT IS
* WAREA TOO SMALL
         LA    15,4               RC=4
         LA    0,9                REASON CODE=9 (WAREA TOO SMALL)
         J     GENCBX&SYSNDX      EXIT
*
GENCBU&SYSNDX DS 0H
* NO WAREA/LENGTH, DO GETMAIN
         TM    GENCBZ&SYSNDX+12,X'80' BELOW ?
         JO    GENCBB&SYSNDX      EXIT IF IT IS
* LOC FOUND AND ANY
         GETMAIN RU,LV=(1),LOC=ANY
         J     GENCBR&SYSNDX      EXIT
*
GENCBB&SYSNDX DS 0H
* LOC NOT FOUND OR LOC FOUND AND BELOW
         GETMAIN RU,LV=(1),LOC=BELOW
GENCBR&SYSNDX DS 0H
         ST    1,GENCBZ&SYSNDX    SAVE AREA ADDRESS
         ST    0,GENCBZ&SYSNDX+4  SAVE AREA LENGTH
         LR    15,1               R15=GETMAINED ADDRESS
         J     GENCBQ&SYSNDX      EXIT
*
GENCBW&SYSNDX DS 0H
         ST    1,GENCBZ&SYSNDX+4  SAVE LENGTH NEEDED
         L     15,GENCBZ&SYSNDX   R15=WAREA ADDRESS
GENCBQ&SYSNDX DS 0H
         IIHF  0,C'zRPL'          R0=RPL EYECATCHER
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
         ARK   14,0,1             R14=ADDRESS OF FIELDS
         USING IHARPL,15
* CREATE FIRST RPL
         XC    0(&LBLK,15),0(15)  CLEAR FIRST RPL
         STFH  0,RPLEYE           STORE RPL EYECATCHER
GENCBM&SYSNDX DS 0H
.* MISS NON-RPL VERBS
         CLI   0(1),CBMRRPL_WAREA WAREA ?
         JE    GENCBD&SYSNDX      EXIT IF IT IS
         CLI   0(1),CBMRRPL_COPIES COPIES ?
         JE    GENCBD&SYSNDX      EXIT IF IT IS
         CLI   0(1),CBMRRPL_LOC   LOC ?
         JE    GENCBD&SYSNDX      EXIT IF IT IS
.* DO RPL VERBS
         CLI   0(1),CBMRRPL_ACB   ACB ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLDACB,0(14)      MOVE ACB INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_AREA  AREA ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLAREA,0(14)      MOVE AREA INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_AREALEN AREALEN ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLAREAL,0(14)     MOVE AREALEN INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_ARG   ARG ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLARG,0(14)       MOVE ARG INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_ECB   ECB ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLECB,0(14)       MOVE ECB INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_MSGAREA MSGAREA ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLMSGAR,0(14)     MOVE MSGAREA INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_NEXTRPL NEXTRPL ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLNXTRP,0(14)     MOVE NEXTRPL INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_RECLEN RECLEN ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLRECLN,0(14)     MOVE RECLEN INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_MSGLEN MSGLEN ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLMSGLN,2(14)     MOVE MSGLEN INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_KEYLEN KEYLEN ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLKEYLN,3(14)     MOVE KEYLEN INTO RPL
         J     GENCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_OPTCD OPTCD ?
         JNE   *+10               EXIT IF NOT
         MVC   RPLOPTCD,0(14)     MOVE OPTCD1-2 INTO RPL
GENCBD&SYSNDX DS 0H
         AHI   14,4               BUMP FIELDS POINTER
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+8                EXIT IF NOT
         AHI   14,4               BUMP FIELDS POINTER
         AHI   1,1                BUMP VERBS POINTER
         BRCT  0,GENCBM&SYSNDX    LOOP
*
         DROP  15
* FIRST RPL BUILT, NOW DO COPIES
* IF COPIES NOT FOUND OR COPIES=1 THEN WE'RE DONE
         L     0,GENCBZ&SYSNDX+8  R0=COPIES
         AHI   0,-1               COPIES-1
         JZ    GENCBJ&SYSNDX      EXIT IF COPIES=1
         AHIK  14,15,&LBLK        R14=AREA ADDRESS FOR COPIES
GENCBI&SYSNDX DS 0H
         MVC   0(&LBLK,14),0(15)  COPY RPL
         AHI   14,&LBLK           BUMP AREA POINTER
         BCT   0,GENCBI&SYSNDX    LOOP
GENCBJ&SYSNDX DS 0H
* SET R1=AREA AND R0=LENGTH USED
         L     1,GENCBZ&SYSNDX    R1=AREA ADDRESS
         L     0,GENCBZ&SYSNDX+4  R0=AREA LENGTH USED
         J     GENCBG&SYSNDX      EXIT
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
GENCBS&SYSNDX DS 0H
         SGR   1,1                CLEAR R1 HIGH
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
GENCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    GENCBF&SYSNDX      EXIT IF IT IS
         AIH   1,4                ASSUME 4-BYTE FIELD
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+10               EXIT IF NOT
         AIH   1,4                8-BYTE FIELD
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,GENCBL&SYSNDX    LOOP
*
.* YOU CANNOT MODIFY A VERB NOT PREVIOUSLY CREATED
         J     GENCB8&SYSNDX      ERROR IF NOT FOUND
*
* VERB SEARCH SUBROUTINE, RETURN WITH R0=8 IF NOT FOUND
GENCBT&SYSNDX DS 0H
         SGR   1,1                CLEAR R1 HIGH
         LM    0,1,GENCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
GENCBN&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    GENCBF&SYSNDX      EXIT IF IT IS
         AIH   1,4                ASSUME 4-BYTE FIELD
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+10               EXIT IF NOT
         AIH   1,4                8-BYTE FIELD
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,GENCBN&SYSNDX    LOOP
*
         LA    0,8                R0=8
         BR    15                 RETURN
*
GENCBZ&SYSNDX DS 0H               SAVE CBMR FIELDS
         DC    FL4'-1'            SAVE CBMR WAREA
         DC    FL4'-1'            SAVE CBMR LENGTH
         DC    FL4'1'             SAVE CBMR COPIES (DEFAULT=1)
         DC    X'80000000'        SAVE CBMR LOC    (DEFAULT=BELOW)
*
GENCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,GENCBSV&SYSNDX+4 14=ADDRESS OF VERB CODES (CBMRBODY)
         A     14,GENCBSV&SYSNDX  +NO. OF VERBS=START OF FIELDS
         SRLG  1,1,32             R1=FIELD OFFSET
         AR    14,1               R14=FIELD POSITION
         SR    0,0                R0=0
         BR    15                 RETURN
*
GENCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (WRONG CB TYPE/FIELD NOT FOUND)
         J     GENCBX&SYSNDX      EXIT
*
GENCBG&SYSNDX DS 0H
         SR    15,15              RC=0
GENCBX&SYSNDX DS 0H
         MEXIT
.*
         MEND
