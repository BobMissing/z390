         MACRO
.**********************************************************************
.* Copyright 2005 Automated Software Tools Corporation                *
.* This source code is part of z390 assembler/emulator package        *
.* The z390 package is distributed under GNU general public license   *
.* Author - Don Higgins                                               *
.* Date   - 09/30/05                                                  *
.**********************************************************************
.* 08/10/07 INITIAL CODING TO SUPPORT AREA, RECLEN INITIALLY          *
.* 08/22/07 RPI 680  CORRECT RPLRECLN                                 *
.* 08/27/07 RPI 688  SUPPORT RPL=(REG)                                *
.* 09/03/07 RPI 690  ADD ARG= AND OPTCD= SUPPORT                      *
.* 09/03/07 RPI 672  FIX 3 MISSPELL LABELS,&OPTCDF,OPTF1/2,&MODS ERRS *
.*                   ADD CROSS CHECK FOR ACB/RPL OPTION MATCHES       *
.* 09/15/07 RPI 696  ADD SUPPORT FOR RPL OPTCD FWD DEFAULT OPTION SET *
.*                   ADD RPL FIELD ACB ADDR                           *
.* 09/17/07 RPI 682  ADD ACB DDNAME, DSNAME, VCLRN,                   *
.*                   and use ZGENMACF and ZGENOPTD                    *
.* 09/19/07 RPI 697  SET RC=0                                         *
.* 12/08/07 RPI 750  ADD RPL KEYLEN= PARM FOR GENERIC KEY LENGTH      *
.* 04/19/08 RPI 833  add SETC quotes for HLASM compatibility          *
.* 04/23/09 RPI 1023 jm1 MNOTE 4 instead of 12 if STRNO specified     *
.* 04/23/09 RPI 1023 jm2 MODCB generates OI and NI instead of MVI     *
.* 04/23/09 RPI 1023 jm3 support for AREALEN                          *
.*                                                                    *
.* 01/01/19          zVSAM V2 version (Melvyn Maltz)                  *
.*                   &DSNAME removed                                  *
.*                   &VCLRN  removed                                  *
.*                   RPLLKEY to RPLKEYLN, LENGTH=1                    *
.*                   Reconstructed code, &MODS removed                *
.**********************************************************************
.* MF=I or omitted    Generates code to modify the block
.* MF=L               Generates CBMR inline
.* MF=(L,addr)        Generates CBMR inline and then moves it to addr
.* MF=(L,addr,label)  as above and generates label equ size
.*
.* MF=(E,addr)        Modifies the CBMR at addr and generates code to
.*                    modify the block using the CBMR
.*
.* MF=(G,addr)        Generates CBMR inline and then moves it to addr
.*                    Modify the block using the CBMR
.* MF=(G,addr,label)  as above and generates label equ size
.*
.* addr can be label or reg, reg cannot be R0, R1, R14 or R15
.*
&N       MODCB &AM=VSAM,          VSAM                                 X
               &RPL=,             RPL ADDRESS                          X
               &ACB=,             ACB ADDRESS/RPLDACB                  X
               &EXLST=,           EXLST ADDRESS/ACBEXLST               X
               &DDNAME=,          ACBDDNM                              X
               &PASSWD=,          ACBPASSW                             X
               &MACRF=,           ACBMACR1-4                           X
               &BUFND=,           ACBBUFND                             X
               &BUFNI=,           ACBBUFNI                             X
               &BUFSP=,           ACBBUFSP                             X
               &RMODE31=,         ACBMODE                              X
               &STRNO=,           ACBSTRNO                             X
               &BSTRNO=,          ACBBSTNO                             X
               &MAREA=,           ACB NOT SUPPORTED                    X
               &MLEN=,            ACB NOT SUPPORTED                    X
               &RLSREAD=,         ACB NOT SUPPORTED                    X
               &SHRPOOL=,         ACBSHRP                              X
               &AREA=,            RPLAREA                              X
               &AREALEN=,         RPLAREAL              jm3            X
               &ARG=,             RPLARG                               X
               &ECB=,             RPLECB                               X
               &MSGAREA=,         RPLMSGAR                             X
               &NXTRPL=,          RPLNXTRP                             X
               &RECLEN=,          RPLRECLN                             X
               &MSGLEN=,          RPLMSGLN                             X
               &KEYLEN=,          RPLKEYLN                             X
               &OPTCD=,           RPLOPTCD (RPLOPT1-2)                 X
               &TRANSID=,         RPL NOT SUPPORTED                    X
               &EODAD=,           EXLST EODAD                          X
               &LERAD=,           EXLST LERAD                          X
               &SYNAD=,           EXLST SYNAD                          X
               &JRNAD=,           EXLST NOT SUPPORTED                  X
               &UPAD=,            EXLST NOT SUPPORTED                  X
               &RLSWAIT=,         EXLST NOT SUPPORTED                  X
               &MF=I
.*
         LCLA  &OFFREG(10)
         LCLC  &OFFCHR(10)
.* FOR EXLST
         LCLB  &EOD_A,&EOD_N,&EOD_L
         LCLB  &LER_A,&LER_N,&LER_L
         LCLB  &SYN_A,&SYN_N,&SYN_L
.* FOR RPL
         GBLC  &THERPL            PASS RPL NAME TO ZGENOPTD
         GBLC  &ZGENOPT1,&ZGENOPT2,&ZGENOPT3,&ZGENOPT4
.* FOR ACB
         GBLC  &THEACB            PASS ACB NAME TO ZGENMACF
         GBLB  &RMODEBF           PASSED TO ZGENMACF
         GBLC  &ZGENMACF1,&ZGENMACF2,&ZGENMACF3,&ZGENMACF4
.*
         AIF   ('&N' NE '')
&N       DS    0D
         AEND
.*
.* ELIMINATE POSITIONALS
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'MODCB UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AIF   (&NPOS GT 0).POSLOOP
.*
.POSEND  ANOP
         AIF   ('&AM' NE 'VSAM')
         MNOTE 12,'MODCB ONLY AM=VSAM IS SUPPORTED'
         AEND
.* VALIDATE MF=
         AIF   ('&MF(1)' NE 'I' AND                                    X
               '&MF(1)'  NE 'L' AND                                    X
               '&MF(1)'  NE 'E' AND                                    X
               '&MF(1)'  NE 'G')
         MNOTE 12,'MODCB MF= INVALID - &MF'
         AEND
.*
         AIF   ('&RPL' NE '').DORPL
         AIF   ('&ACB' NE '').DOACB
         AIF   ('&EXLST' NE '').DOEXLST
         MNOTE 12,'MODCB BLOCK TYPE UNRECOGNISED'
         MEXIT
.*
.DOEXLST ANOP
.***************
.* MODCB EXLST *
.***************
.* NOTE: YOU CAN'T CHANGE AN ADDRESS TO ZERO
.*       YOU CAN ACTIVATE AN ADDRESS THAT IS ALREADY ZERO
         AIF   ('&ACB' NE '')
         MNOTE 12,'ACB IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&DDNAME' NE '')
         MNOTE 12,'DDNAME IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&PASSWD' NE '')
         MNOTE 12,'PASSWD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MACRF' NE '')
         MNOTE 12,'MACRF IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFND' NE '')
         MNOTE 12,'BUFND IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFNI' NE '')
         MNOTE 12,'BUFNI IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFSP' NE '')
         MNOTE 12,'BUFSP IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RMODE31' NE '')
         MNOTE 12,'RMODE31 IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&STRNO' NE '')
         MNOTE 12,'STRNO IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BSTRNO' NE '')
         MNOTE 12,'BSTRNO IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&SHRPOOL' NE '')
         MNOTE 12,'SHRPOOL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&AREA' NE '')
         MNOTE 12,'AREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&AREALEN' NE '')
         MNOTE 12,'AREALEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&ARG' NE '')
         MNOTE 12,'ARG IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&ECB' NE '')
         MNOTE 12,'ECB IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&KEYLEN' NE '')
         MNOTE 12,'KEYLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MSGAREA' NE '')
         MNOTE 12,'MSGAREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MSGLEN' NE '')
         MNOTE 12,'MSGLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&NXTRPL' NE '')
         MNOTE 12,'NXTRPL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&OPTCD' NE '')
         MNOTE 12,'OPTCD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RECLEN' NE '')
         MNOTE 12,'RECLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RPL' NE '')
         MNOTE 12,'RPL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT AN EXLST PARAMETER'
         AEND
.*
.* CHECK EXLST UNSUPPORTED FIELDS
.*
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT SUPPORTED'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT SUPPORTED'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&EXLST'(1,1) EQ '(')
            AIF ('&EXLST' EQ '(0)'   OR                                X
               '&EXLST'   EQ '(R0)'  OR                                X
               '&EXLST'   EQ '(1)'   OR                                X
               '&EXLST'   EQ '(R1)'  OR                                X
               '&EXLST'   EQ '(14)'  OR                                X
               '&EXLST'   EQ '(R14)' OR                                X
               '&EXLST'   EQ '(15)'  OR                                X
               '&EXLST'   EQ '(R15)')
         MNOTE 12,'MODCB EXLST= INVALID REGISTER USE'
            AEND
         AEND
.*
         AIF   ('&MF(1)' EQ 'L').EXLMFL
         AIF   ('&MF(1)' EQ 'E').EXLMFEG
         AIF   ('&MF(1)' EQ 'G').EXLMFL
.*
.* PROCESS EXLST MF=I
         AIF   ('&EODAD' EQ '').DOLERI
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF   ('&EODAD(1)'(1,1) EQ '(')
         ST    &EODAD(1),EXLEODP-IFGEXLST(&EXLST) STORE EODAD ADDRESS
               AELSE
         MVC   EXLEODP-IFGEXLST(4,&EXLST),=A(&EODAD(1)) MOVE EODAD ADDR
               AEND
         OI    EXLEODF-IFGEXLST(&EXLST),EXLEODS SET EODAD PRESENT
            AELSE
               AIF   ('&EODAD(1)'(1,1) EQ '(')
         ST    &EODAD(1),&EXLST+EXLEODP-IFGEXLST STORE EODAD ADDRESS
               AELSE
         MVC   &EXLST+EXLEODP-IFGEXLST(4),=A(&EODAD(1)) MOVE EODAD ADDR
               AEND
         OI    &EXLST+EXLEODF-IFGEXLST,EXLEODS SET EODAD PRESENT
            AEND
         AEND
.*
&EODCNT  SETA  2
.EODLOOP ANOP
         AIF   (&EODCNT GT N'&EODAD).EODDUN
         AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' NE 'A' AND                           X
               '&EODAD(&EODCNT)'  NE 'N' AND                           X
               '&EODAD(&EODCNT)'  NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
         AEND
&EODCNT  SETA  &EODCNT+1
         AGO   .EODLOOP
.*
.EODDUN  ANOP
         AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&EOD_A   SETB  0
&EOD_N   SETB  0
         AEND
         AIF   (&EOD_A)
         AIF   ('&EXLST'(1,1) EQ '(')
         OI    EXLEODF-IFGEXLST(&EXLST),EXLEODA SET EODAD ACTIVE
         AELSE
         OI    &EXLST+EXLEODF-IFGEXLST,EXLEODA SET EODAD ACTIVE
         AEND
         AEND
         AIF   (&EOD_N)
         AIF   ('&EXLST'(1,1) EQ '(')
         NI    EXLEODF-IFGEXLST(&EXLST),255-EXLEODA SET EODAD INACTIVE
         AELSE
         NI    &EXLST+EXLEODF-IFGEXLST,255-EXLEODA SET EODAD INACTIVE
         AEND
         AEND
.*
.DOLERI  ANOP
         AIF   ('&LERAD' EQ '').DOSYNI
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF   ('&LERAD(1)'(1,1) EQ '(')
         ST    &LERAD(1),EXLLERP-IFGEXLST(&EXLST) STORE LERAD ADDRESS
               AELSE
         MVC   EXLLERP-IFGEXLST(4,&EXLST),=A(&LERAD(1)) MOVE LERAD ADDR
               AEND
         OI    EXLLERF-IFGEXLST(&EXLST),EXLLERS SET LERAD PRESENT
            AELSE
               AIF   ('&LERAD(1)'(1,1) EQ '(')
         ST    &LERAD(1),&EXLST+EXLLERP-IFGEXLST STORE LERAD ADDRESS
               AELSE
         MVC   &EXLST+EXLLERP-IFGEXLST(4),=A(&LERAD(1)) MOVE LERAD ADDR
               AEND
         OI    &EXLST+EXLLERF-IFGEXLST,EXLLERS SET LERAD PRESENT
            AEND
         AEND
.*
&LERCNT  SETA  2
.LERLOOP ANOP
         AIF   (&LERCNT GT N'&LERAD).LERDUN
         AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' NE 'A' AND                           X
               '&LERAD(&LERCNT)'  NE 'N' AND                           X
               '&LERAD(&LERCNT)'  NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
         AEND
&LERCNT  SETA  &LERCNT+1
         AGO   .LERLOOP
.*
.LERDUN  ANOP
         AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&LER_A AND &LER_N)
         MNOTE 12,'LERAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&LER_A   SETB  0
&LER_N   SETB  0
         AEND
         AIF   (&LER_A)
         AIF   ('&EXLST'(1,1) EQ '(')
         OI    EXLLERF-IFGEXLST(&EXLST),EXLLERA SET LERAD ACTIVE
         AELSE
         OI    &EXLST+EXLLERF-IFGEXLST,EXLLERA SET LERAD ACTIVE
         AEND
         AEND
         AIF   (&LER_N)
         AIF   ('&EXLST'(1,1) EQ '(')
         NI    EXLLERF-IFGEXLST(&EXLST),255-EXLLERA SET LERAD INACTIVE
         AELSE
         NI    &EXLST+EXLLERF-IFGEXLST,255-EXLLERA SET LERAD INACTIVE
         AEND
         AEND
.*
.DOSYNI  ANOP
         AIF   ('&SYNAD' EQ '').DOENDI
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF   ('&SYNAD(1)'(1,1) EQ '(')
         ST    &SYNAD(1),EXLSYNP-IFGEXLST(&EXLST) STORE SYNAD ADDRESS
               AELSE
         MVC   EXLSYNP-IFGEXLST(4,&EXLST),=A(&SYNAD(1)) MOVE SYNAD ADDR
               AEND
         OI    EXLSYNF-IFGEXLST(&EXLST),EXLSYNS SET SYNAD PRESENT
            AELSE
               AIF   ('&SYNAD(1)'(1,1) EQ '(')
         ST    &SYNAD(1),&EXLST+EXLSYNP-IFGEXLST STORE SYNAD ADDRESS
               AELSE
         MVC   &EXLST+EXLSYNP-IFGEXLST(4),=A(&SYNAD(1)) MOVE SYNAD ADDR
               AEND
         OI    &EXLST+EXLSYNF-IFGEXLST,EXLSYNS SET SYNAD PRESENT
            AEND
         AEND
.*
&SYNCNT  SETA  2
.SYNLOOP ANOP
         AIF   (&SYNCNT GT N'&SYNAD).SYNDUN
         AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                           X
               '&SYNAD(&SYNCNT)'  NE 'N' AND                           X
               '&SYNAD(&SYNCNT)'  NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
         AEND
&SYNCNT  SETA  &SYNCNT+1
         AGO   .SYNLOOP
.*
.SYNDUN  ANOP
         AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&SYN_A AND &SYN_N)
         MNOTE 12,'SYNAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&SYN_A   SETB  0
&SYN_N   SETB  0
         AEND
         AIF   (&SYN_A)
         AIF   ('&EXLST'(1,1) EQ '(')
         OI    EXLSYNF-IFGEXLST(&EXLST),EXLSYNA SET SYNAD ACTIVE
         AELSE
         OI    &EXLST+EXLSYNF-IFGEXLST,EXLSYNA SET SYNAD ACTIVE
         AEND
         AEND
         AIF   (&SYN_N)
         AIF   ('&EXLST'(1,1) EQ '(')
         NI    EXLSYNF-IFGEXLST(&EXLST),255-EXLSYNA SET SYNAD INACTIVE
         AELSE
         NI    &EXLST+EXLSYNF-IFGEXLST,255-EXLSYNA SET SYNAD INACTIVE
         AEND
         AEND
.*
.DOENDI  ANOP
         SR    15,15              RC=0
         AIF   ('&EXLST'(1,1) EQ '(')
         LGFI  0,C'zLST'          R0=EXLST EYECATCHER
         C     0,EXLEYE-IFGEXLST(&EXLST) IS IT AN EXLST ?
         AELSE
         LGFI  0,C'zLST'          R0=EXLST EYECATCHER
         C     0,&EXLST+EXLEYE-IFGEXLST IS IT AN EXLST ?
         AEND
         JE    MODCBI&SYSNDX      EXIT IF IT IS
         LA    15,4               RC=4
         LR    0,15               R0=REASON CODE 4 (WRONG BLOCK TYPE)
MODCBI&SYSNDX DS 0H
         MEXIT
.*
.EXLMFL  ANOP
.* PROCESS EXLST MODCB MF=L
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&EODAD(1)'(1,1) EQ '(')
         MNOTE 12,'MODCB EODAD= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
            AIF   ('&LERAD(1)'(1,1) EQ '(')
         MNOTE 12,'MODCB LERAD= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
         MNOTE 12,'MODCB SYNAD= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
         AEND
.* COUNT NO. OF FIELDS
&FIELDS  SETA  0
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (N'&EODAD GT 1)
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (N'&LERAD GT 1)
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (N'&SYNAD GT 1)
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'MODCB NO LABEL FOR CBMR'
         AEND
&BRAS    SETA  0
         AIF   (T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+&FIELDS+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRXLST+CBMRMOD) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS)       CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
         DC    AL1(CBMRXL_EODAD)
         AEND
         AIF   (N'&EODAD GT 1)
         DC    AL1(CBMRXL_EOD_MODS)
         AEND
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
         DC    AL1(CBMRXL_LERAD)
         AEND
         AIF   (N'&LERAD GT 1)
         DC    AL1(CBMRXL_LER_MODS)
         AEND
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
         DC    AL1(CBMRXL_SYNAD)
         AEND
         AIF   (N'&SYNAD GT 1)
         DC    AL1(CBMRXL_SYN_MODS)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS         HEADER+NO. OF VERBS
&I       SETA  1
.*
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
         DC    AL4(&EODAD(1))
            AIF   ('&EODAD(1)'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&EODAD(1)'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   (N'&EODAD GT 1)
&EODCNT  SETA  2
.EODLPL  ANOP
         AIF   (&EODCNT GT N'&EODAD).EODDUNL
            AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' NE 'A' AND                        X
               '&EODAD(&EODCNT)'     NE 'N' AND                        X
               '&EODAD(&EODCNT)'     NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
            AEND
&EODCNT  SETA  &EODCNT+1
         AGO   .EODLPL
.*
.EODDUNL ANOP
            AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
            AEND
            AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&EOD_A   SETB  0
&EOD_N   SETB  0
            AEND
         DC    B'&EOD_A&EOD_N.000000',3X'00'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
         DC    AL4(&LERAD(1))
            AIF   ('&LERAD(1)'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&LERAD(1)'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   (N'&LERAD GT 1)
&LERCNT  SETA  2
.LERLPL  ANOP
            AIF   (&LERCNT GT N'&LERAD).LERDUNL
            AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' NE 'A' AND                        X
               '&LERAD(&LERCNT)'     NE 'N' AND                        X
               '&LERAD(&LERCNT)'     NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
            AEND
&LERCNT  SETA  &LERCNT+1
         AGO   .LERLPL
.*
.LERDUNL ANOP
            AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
            AEND
         DC    B'&LER_A&LER_N.000000',3X'00'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
         DC    AL4(&SYNAD(1))
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&SYNAD(1)'
            AEND
         AEND
         AIF   (N'&SYNAD GT 1)
&SYNCNT  SETA  2
.SYNLPL  ANOP
            AIF   (&SYNCNT GT N'&SYNAD).SYNDUNL
            AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                        X
               '&SYNAD(&SYNCNT)'     NE 'N' AND                        X
               '&SYNAD(&SYNCNT)'     NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
            AEND
&SYNCNT  SETA  &SYNCNT+1
         AGO   .SYNLPL
.*
.SYNDUNL ANOP
            AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
            AEND
         DC    B'&SYN_A&SYN_N.000000',3X'00'
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB MF= INVALID REGISTER USE'
            AEND
            AIF   ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
* HANDLE REGISTER NOTATION
&I       SETA  1
.EXLRGLP ANOP
         AIF   (&I GT 10).EXLRGDN
         AIF   (&OFFREG(&I) NE 0)
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
         AEND
&I       SETA  &I+1
         AGO   .EXLRGLP
.*
.EXLRGDN ANOP
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').EXLMFEG
         SR    15,15              RC=0
         MEXIT
.*
.EXLMFEG ANOP
.* PROCESS MODCB EXLST MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* WHEN DONE, MOVE ALL THE CBMR VALUES INTO THE EXLST
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'MODCB EXLST MF=E/G SECOND PARAMETER MISSING'
         MEXIT
         AEND
         AIF ('&MF(2)'(1,1) EQ '(')
         ZOPTLR 1,&MF(2)
         AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
         USING CBMR,1
         BRAS  15,*+8             BYPASS CONSTANT
         DC    C'CBMR'
         CLC   CBMREYE,0(15)      CORRECT ?
         JNE   MODCB8&SYSNDX      ERROR IF NOT
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
MODCBSV&SYSNDX DS 0H
         DS    2AL4               SAVE AREA
         STM   0,1,MODCBSV&SYSNDX SAVE R0-R1
         AIF   ('&MF(1)' EQ 'G').EXLMFG
.*
&EOD_A   SETB  0
&EOD_N   SETB  0
&EOD_L   SETB  0
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
         LHI   14,CBMRXL_EODAD    EXLST EODAD ADDRESS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&EODAD(1)'(1,1) EQ '(')
               AIF ('&EODAD(1)' EQ '(0)'   OR                          X
               '&EODAD(1)'      EQ '(R0)'  OR                          X
               '&EODAD(1)'      EQ '(1)'   OR                          X
               '&EODAD(1)'      EQ '(R1)'  OR                          X
               '&EODAD(1)'      EQ '(14)'  OR                          X
               '&EODAD(1)'      EQ '(R14)' OR                          X
               '&EODAD(1)'      EQ '(15)'  OR                          X
               '&EODAD(1)'      EQ '(R15)')
         MNOTE 12,'MODCB EODAD= INVALID REGISTER USE'
               AEND
         ST    &EODAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&EODAD(1))   BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   (N'&EODAD GT 1)
         LHI   14,CBMRXL_EOD_MODS EXLST EODAD MODIFIERS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
&EODCNT  SETA  2
.EODLPEG ANOP
         AIF   (&EODCNT GT N'&EODAD).EODDNEG
         AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
         AEND
         AIF   ('&EODAD(&EODCNT)' NE 'A' AND                           X
               '&EODAD(&EODCNT)'  NE 'N' AND                           X
               '&EODAD(&EODCNT)'  NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
         AEND
&EODCNT  SETA  &EODCNT+1
         AGO   .EODLPEG
.*
.EODDNEG ANOP
         AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&EOD_A   SETB  0
&EOD_N   SETB  0
         AEND
         LARL  15,=B'&EOD_A&EOD_N.000000000000000000000000000000' BASE--
               FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
&LER_A   SETB  0
&LER_N   SETB  0
&LER_L   SETB  0
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
         LHI   14,CBMRXL_LERAD    EXLST LERAD ADDRESS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&LERAD(1)'(1,1) EQ '(')
               AIF ('&LERAD(1)' EQ '(0)'   OR                          X
               '&LERAD(1)'      EQ '(R0)'  OR                          X
               '&LERAD(1)'      EQ '(1)'   OR                          X
               '&LERAD(1)'      EQ '(R1)'  OR                          X
               '&LERAD(1)'      EQ '(14)'  OR                          X
               '&LERAD(1)'      EQ '(R14)' OR                          X
               '&LERAD(1)'      EQ '(15)'  OR                          X
               '&LERAD(1)'      EQ '(R15)')
         MNOTE 12,'MODCB LERAD= INVALID REGISTER USE'
               AEND
         ST    &LERAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&LERAD(1))   BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
.*
         AIF   (N'&LERAD GT 1)
         LHI   14,CBMRXL_LER_MODS EXLST LERAD MODIFIERS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
&LERCNT  SETA  2
.LERLPEG ANOP
         AIF   (&LERCNT GT N'&LERAD).LERDNEG
         AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
         AEND
         AIF   ('&LERAD(&LERCNT)' NE 'A' AND                           X
               '&LERAD(&LERCNT)'  NE 'N' AND                           X
               '&LERAD(&LERCNT)'  NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
         AEND
&LERCNT  SETA  &LERCNT+1
         AGO   .LERLPEG
.*
.LERDNEG ANOP
         AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&LER_A AND &LER_N)
         MNOTE 12,'LERAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&LER_A   SETB  0
&LER_N   SETB  0
         AEND
         LARL  15,=B'&LER_A&LER_N.000000000000000000000000000000' BASE--
               FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
&SYN_A   SETB  0
&SYN_N   SETB  0
&SYN_L   SETB  0
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
         LHI   14,CBMRXL_SYNAD    EXLST SYNAD ADDRESS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
               AIF ('&SYNAD(1)' EQ '(0)'   OR                          X
               '&SYNAD(1)'      EQ '(R0)'  OR                          X
               '&SYNAD(1)'      EQ '(1)'   OR                          X
               '&SYNAD(1)'      EQ '(R1)'  OR                          X
               '&SYNAD(1)'      EQ '(14)'  OR                          X
               '&SYNAD(1)'      EQ '(R14)' OR                          X
               '&SYNAD(1)'      EQ '(15)'  OR                          X
               '&SYNAD(1)'      EQ '(R15)')
         MNOTE 12,'MODCB SYNAD= INVALID REGISTER USE'
               AEND
         ST    &SYNAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&SYNAD(1))   BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
.*
         AIF   (N'&SYNAD GT 1)
         LHI   14,CBMRXL_SYN_MODS EXLST SYNAD MODIFIERS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
&SYNCNT  SETA  2
.SYNLPEG ANOP
         AIF   (&SYNCNT GT N'&SYNAD).SYNDNEG
         AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
         AEND
         AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                           X
               '&SYNAD(&SYNCNT)'  NE 'N' AND                           X
               '&SYNAD(&SYNCNT)'  NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
         AEND
&SYNCNT  SETA  &SYNCNT+1
         AGO   .SYNLPEG
.*
.SYNDNEG ANOP
         AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
         AEND
         AIF   (&SYN_A AND &SYN_N)
         MNOTE 12,'SYNAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&SYN_A   SETB  0
&SYN_N   SETB  0
         AEND
         LARL  15,=B'&SYN_A&SYN_N.000000000000000000000000000000' BASE--
               FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
.* USE THE CBMR TO MODIFY THE EXLST
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
.EXLMFG  ANOP
         ARK   14,0,1             R14=ADDRESS OF FIELDS
         AIF   ('&EXLST'(1,1) EQ '(')
         ZOPTLR 15,&EXLST
         AELSE
         LA    15,&EXLST          R15=ADDRESS OF EXLST
         AEND
         USING IFGEXLST,15
MODCBM&SYSNDX DS 0H
         CLI   0(1),CBMRXL_EODAD  EXLST EODAD ADDRESS ?
         JNE   *+18               EXIT IF NOT
         MVC   EXLEODP,0(14)      MOVE EODAD ADDRESS INTO EXLST
         OI    EXLEODF,EXLEODS    SET EODAD PRESENT
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_EOD_MODS EXLST EODAD MODIFIERS ?
         JNE   *+32               EXIT IF NOT
         TM    0(14),X'80'        EODAD ACTIVE ?
         JNO   *+8                EXIT IF NOT
         OI    EXLEODF,EXLEODA    SET EODAD ACTIVE
         TM    0(14),X'40'        EODAD INACTIVE ?
         JNO   *+8                EXIT IF NOT
         NI    EXLEODF,255-EXLEODA SET EODAD INACTIVE
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_LERAD  EXLST LERAD ADDRESS ?
         JNE   *+18               EXIT IF NOT
         MVC   EXLLERP,0(14)      MOVE LERAD ADDRESS INTO EXLST
         OI    EXLLERF,EXLLERS    SET LERAD PRESENT
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_LER_MODS EXLST LERAD MODIFIERS ?
         JNE   *+32               EXIT IF NOT
         TM    0(14),X'80'        LERAD ACTIVE ?
         JNO   *+8                EXIT IF NOT
         OI    EXLLERF,EXLLERA    SET LERAD ACTIVE
         TM    0(14),X'40'        LERAD INACTIVE ?
         JNO   *+8                EXIT IF NOT
         NI    EXLLERF,255-EXLLERA SET LERAD INACTIVE
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_SYNAD  EXLST SYNAD ADDRESS ?
         JNE   *+18               EXIT IF NOT
         MVC   EXLSYNP,0(14)      MOVE SYNAD ADDRESS INTO EXLST
         OI    EXLSYNF,EXLSYNS    SET SYNAD PRESENT
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRXL_SYN_MODS EXLST SYNAD MODIFIERS ?
         JNE   *+28               EXIT IF NOT
         TM    0(14),X'80'        SYNAD ACTIVE ?
         JNO   *+8                EXIT IF NOT
         OI    EXLSYNF,EXLSYNA    SET SYNAD ACTIVE
         TM    0(14),X'40'        SYNAD INACTIVE ?
         JNO   *+8                EXIT IF NOT
         NI    EXLSYNF,255-EXLSYNA SET SYNAD INACTIVE
*
MODCBD&SYSNDX DS 0H
         AHI   14,4               BUMP FIELDS POINTER
         AHI   1,1                BUMP VERBS POINTER
         BRCT  0,MODCBM&SYSNDX    LOOP
*
         LGFI  0,C'zLST'          R0=EXLST EYECATCHER
         C     0,EXLEYE           IS IT AN EXLST ?
         JE    MODCB0&SYSNDX      EXIT IF IT IS
         J     MODCB4&SYSNDX      EXIT
         DROP  15
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
MODCBS&SYSNDX DS 0H
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
MODCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    MODCBF&SYSNDX      EXIT IF IT IS
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,MODCBL&SYSNDX    LOOP
*
         J     MODCB8&SYSNDX      ERROR IF NOT FOUND
*
MODCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,MODCBSV&SYSNDX  R14=NO. OF VERBS
         SR    14,0               R14=VERB POSITION
         SLL   14,2               *4
         A     14,MODCBSV&SYSNDX+4 +A(CBMRBODY)
         A     14,MODCBSV&SYSNDX  +NO. OF VERBS=FIELD POSITION
         BR    15                 RETURN
*
MODCB0&SYSNDX DS 0H
         SR    15,15              RC=0
         J     MODCBG&SYSNDX      EXIT
*
MODCB4&SYSNDX DS 0H
         LA    15,4               RC=4
         LR    0,15               R0=REASON CODE 4 (WRONG BLOCK TYPE)
         J     MODCBG&SYSNDX      EXIT
*
MODCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (WRONG CB TYPE/FIELD NOT FOUND)
MODCBG&SYSNDX DS 0H
         MEXIT
.*
.DORPL   ANOP
.*************
.* MODCB RPL *
.*************
         AIF   ('&EXLST' NE '')
         MNOTE 12,'EXLST IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&DDNAME' NE '')
         MNOTE 12,'DDNAME IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&PASSWD' NE '')
         MNOTE 12,'PASSWD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MACRF' NE '')
         MNOTE 12,'MACRF IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFND' NE '')
         MNOTE 12,'BUFND IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFNI' NE '')
         MNOTE 12,'BUFNI IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFSP' NE '')
         MNOTE 12,'BUFSP IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RMODE31' NE '')
         MNOTE 12,'RMODE31 IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&STRNO' NE '')
         MNOTE 12,'STRNO IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BSTRNO' NE '')
         MNOTE 12,'BSTRNO IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&SHRPOOL' NE '')
         MNOTE 12,'SHRPOOL IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&EODAD' NE '')
         MNOTE 12,'EODAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&LERAD' NE '')
         MNOTE 12,'LERAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&SYNAD' NE '')
         MNOTE 12,'SYNAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT AN RPL PARAMETER'
         AEND
.*
.* CHECK RPL UNSUPPORTED FIELDS
.*
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&RPL'(1,1) EQ '(')
            AIF ('&RPL' EQ '(0)'   OR                                  X
               '&RPL'   EQ '(R0)'  OR                                  X
               '&RPL'   EQ '(1)'   OR                                  X
               '&RPL'   EQ '(R1)'  OR                                  X
               '&RPL'   EQ '(14)'  OR                                  X
               '&RPL'   EQ '(R14)' OR                                  X
               '&RPL'   EQ '(15)'  OR                                  X
               '&RPL'   EQ '(R15)')
         MNOTE 12,'MODCB RPL= INVALID REGISTER USE'
            AEND
         AEND
.*
         AIF   ('&MF(1)' EQ 'L').RPLMFL
         AIF   ('&MF(1)' EQ 'E').RPLMFEG
         AIF   ('&MF(1)' EQ 'G').RPLMFL
.*
.* PROCESS RPL MF=I
         AIF   ('&ACB' NE '')
         ZMODCB &RPL,RPLDACB-IHARPL,&ACB,4
         AEND
.*
         AIF   ('&AREA' NE '')
         ZMODCB &RPL,RPLAREA-IHARPL,&AREA,4
         AEND
.*
         AIF   ('&AREALEN' NE '')            jm3
         ZMODCB &RPL,RPLAREAL-IHARPL,&AREALEN,4                    jm3
         AEND
.*
         AIF   ('&ARG' NE '')
         ZMODCB &RPL,RPLARG-IHARPL,&ARG,4
         AEND
.*
         AIF   ('&ECB' NE '')
         ZMODCB &RPL,RPLECB-IHARPL,&ECB,4
         AEND
.*
         AIF   ('&KEYLEN' NE '')
         ZMODCB &RPL,RPLKEYLN-IHARPL,&KEYLEN,1
         AEND
.*
         AIF   ('&MSGAREA' NE '')
         ZMODCB &RPL,RPLMSGAR-IHARPL,&MSGAREA,4
         AEND
.*
         AIF   ('&MSGLEN' NE '')
         ZMODCB &RPL,RPLMSGLN-IHARPL,&MSGLEN,2
         AEND
.*
         AIF   ('&NXTRPL' NE '')
         ZMODCB &RPL,RPLNXTRP-IHARPL,&NXTRPL,4
         AEND
.*
         AIF   ('&OPTCD'  NE '')
&THERPL  SETC  '&RPL'             PASS RPL NAME
         ZGENOPTD OPTCD=&OPTCD,MODE=CODE GENERATE CODE TO MODIFY OPTCD
         AEND
.*
         AIF   ('&RECLEN' NE '')
         ZMODCB &RPL,RPLRECLN-IHARPL,&RECLEN,4
         AEND
.*
         SR    15,15              RC=0
         AIF   ('&RPL'(1,1) EQ '(')
         LGFI  0,C'zRPL'          R0=RPL EYECATCHER
         C     0,RPLEYE-IHARPL(&RPL) IS IT AN RPL ?
         AELSE
         LGFI  0,C'zRPL'          R0=RPL EYECATCHER
         C     0,&RPL+RPLEYE-IHARPL IS IT AN RPL ?
         AEND
         JE    MODCBI&SYSNDX      EXIT IF IT IS
         LA    15,4               RC=4
         LR    0,15               R0=REASON CODE 4 (WRONG BLOCK TYPE)
MODCBI&SYSNDX DS 0H
         MEXIT
.*
.RPLMFL  ANOP
.* PROCESS RPL MODCB MF=L
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&ACB'(1,1) EQ '(')
         MNOTE 12,'MODCB ACB= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&AREA'(1,1) EQ '(')
         MNOTE 12,'MODCB AREA= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&ARG'(1,1) EQ '(')
         MNOTE 12,'MODCB ARG= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&ECB'(1,1) EQ '(')
         MNOTE 12,'MODCB ECB= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&MSGAREA'(1,1) EQ '(')
         MNOTE 12,'MODCB MSGAREA= REGISTER NOTATION NOT ALLOWED WITH MF-
               =L'
            AEND
            AIF   ('&NXTRPL'(1,1) EQ '(')
         MNOTE 12,'MODCB NXTRPL= REGISTER NOTATION NOT ALLOWED WITH MF=-
               L'
            AEND
         AEND
.* COUNT NO. OF FIELDS
&FIELDS  SETA  0
         AIF   (T'&OPTCD NE 'O')
&FIELDS  SETA  &FIELDS+1
         ZGENOPTD OPTCD=&OPTCD,MODE=MODCB GENERATE 4-BYTE OPTCD
         AEND
         AIF   ('&ACB' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&AREA' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&AREALEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&ARG' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&ECB' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&MSGAREA' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&NXTRPL' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&RECLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&MSGLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&KEYLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'MODCB NO LABEL FOR CBMR'
         AEND
&BRAS    SETA  0
         AIF   (T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+&FIELDS+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRRPL+CBMRMOD) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS)       CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         AIF   (T'&OPTCD NE 'O')
         DC    AL1(CBMRRPL_OPTCD)
         AEND
         AIF   ('&ACB' NE '')
         DC    AL1(CBMRRPL_ACB)
         AEND
         AIF   ('&AREA' NE '')
         DC    AL1(CBMRRPL_AREA)
         AEND
         AIF   ('&AREALEN' NE '')
         DC    AL1(CBMRRPL_AREALEN)
         AEND
         AIF   ('&ARG' NE '')
         DC    AL1(CBMRRPL_ARG)
         AEND
         AIF   ('&KEYLEN' NE '')
         DC    AL1(CBMRRPL_KEYLEN)
         AEND
         AIF   ('&ECB' NE '')
         DC    AL1(CBMRRPL_ECB)
         AEND
         AIF   ('&MSGAREA' NE '')
         DC    AL1(CBMRRPL_MSGAREA)
         AEND
         AIF   ('&MSGLEN' NE '')
         DC    AL1(CBMRRPL_MSGLEN)
         AEND
         AIF   ('&NXTRPL' NE '')
         DC    AL1(CBMRRPL_NEXTRPL)
         AEND
         AIF   ('&RECLEN' NE '')
         DC    AL1(CBMRRPL_RECLEN)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS         HEADER+NO. OF VERBS
&I       SETA  1
         AIF   (T'&OPTCD NE 'O')
         DC    B'&ZGENOPT1'
         DC    B'&ZGENOPT2'
         DC    B'&ZGENOPT3'
         DC    B'&ZGENOPT4'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ACB' NE '')
         DC    AL4(&ACB)
            AIF   ('&ACB'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ACB'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&AREA' NE '')
         DC    AL4(&AREA)
            AIF   ('&AREA'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&AREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&AREALEN' NE '')
         DC    AL4(&AREALEN)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ARG' NE '')
         DC    AL4(&ARG)
            AIF   ('&ARG'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ARG'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&KEYLEN' NE '')
            AIF   (&KEYLEN GT 255)
            MNOTE 12,'KEYLEN GT 255 - &KEYLEN'
            AEND
         DC    AL4(&KEYLEN)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ECB' NE '')
         DC    AL4(&ECB)
            AIF   ('&ECB'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ECB'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&MSGAREA' NE '')
         DC    AL4(&MSGAREA)
            AIF   ('&MSGAREA'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&MSGAREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&MSGLEN' NE '')
            AIF   (&MSGLEN GT 65535)
            MNOTE 12,'MSGLEN GT 65535 - &MSGLEN'
            AEND
         DC    AL4(&MSGLEN)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&NXTRPL' NE '')
         DC    AL4(&NXTRPL)
            AIF   ('&NXTRPL'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&NXTRPL'
&I       SETA  &I+1
            AEND
         AEND
.*
         AIF   ('&RECLEN' NE '')
         DC    AL4(&RECLEN)
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB MF= INVALID REGISTER USE'
            AEND
            AIF   ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
* HANDLE REGISTER NOTATION
&I       SETA  1
.RPLRGLP ANOP
            AIF   (&I GT 10).RPLRGDN
            AIF   (&OFFREG(&I) NE 0)
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
            AEND
&I       SETA  &I+1
         AGO   .RPLRGLP
.*
.RPLRGDN ANOP
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').RPLMFEG
         SR    15,15              RC=0
         MEXIT
.*
.RPLMFEG ANOP
.* PROCESS MODCB RPL MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* WHEN DONE, MOVE ALL THE CBMR VALUES INTO THE RPL
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'MODCB RPL MF=E/G SECOND PARAMETER MISSING'
         MEXIT
         AEND
         AIF ('&MF(2)'(1,1) EQ '(')
         ZOPTLR 1,&MF(2)
         AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
         USING CBMR,1
         BRAS  15,*+8             BYPASS CONSTANT
         DC    C'CBMR'
         CLC   CBMREYE,0(15)      CORRECT ?
         JNE   MODCB8&SYSNDX      ERROR IF NOT
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
MODCBSV&SYSNDX DS 0H
         DS    2AL4               SAVE AREA
         STM   0,1,MODCBSV&SYSNDX SAVE R0-R1
         AIF   ('&MF(1)' EQ 'G').RPLMFG
.*
         AIF   ('&ACB' NE '')
         LHI   14,CBMRRPL_ACB     RPL ACB VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&ACB'(1,1) EQ '(')
               AIF ('&ACB' EQ '(0)'   OR                               X
               '&ACB'      EQ '(R0)'  OR                               X
               '&ACB'      EQ '(1)'   OR                               X
               '&ACB'      EQ '(R1)'  OR                               X
               '&ACB'      EQ '(14)'  OR                               X
               '&ACB'      EQ '(R14)' OR                               X
               '&ACB'      EQ '(15)'  OR                               X
               '&ACB'      EQ '(R15)')
         MNOTE 12,'MODCB ACB= INVALID REGISTER USE'
               AEND
         ST    &ACB,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&ACB)        BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&AREA' NE '')
         LHI   14,CBMRRPL_AREA    RPL AREA VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&AREA'(1,1) EQ '(')
               AIF ('&AREA' EQ '(0)'   OR                              X
               '&AREA'      EQ '(R0)'  OR                              X
               '&AREA'      EQ '(1)'   OR                              X
               '&AREA'      EQ '(R1)'  OR                              X
               '&AREA'      EQ '(14)'  OR                              X
               '&AREA'      EQ '(R14)' OR                              X
               '&AREA'      EQ '(15)'  OR                              X
               '&AREA'      EQ '(R15)')
         MNOTE 12,'MODCB AREA= INVALID REGISTER USE'
               AEND
         ST    &AREA,0(14)        STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&AREA)       BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&AREALEN' NE '')
         LHI   14,CBMRRPL_AREALEN RPL AREALEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&AREALEN)    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&ARG' NE '')
         LHI   14,CBMRRPL_ARG     RPL ARG VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&ARG'(1,1) EQ '(')
               AIF ('&ARG' EQ '(0)'   OR                               X
               '&ARG'      EQ '(R0)'  OR                               X
               '&ARG'      EQ '(1)'   OR                               X
               '&ARG'      EQ '(R1)'  OR                               X
               '&ARG'      EQ '(14)'  OR                               X
               '&ARG'      EQ '(R14)' OR                               X
               '&ARG'      EQ '(15)'  OR                               X
               '&ARG'      EQ '(R15)')
         MNOTE 12,'MODCB ARG= INVALID REGISTER USE'
               AEND
         ST    &ARG,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&ARG)        BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&ECB' NE '')
         LHI   14,CBMRRPL_ECB     RPL ECB VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&ECB'(1,1) EQ '(')
               AIF ('&ECB' EQ '(0)'   OR                               X
               '&ECB'      EQ '(R0)'  OR                               X
               '&ECB'      EQ '(1)'   OR                               X
               '&ECB'      EQ '(R1)'  OR                               X
               '&ECB'      EQ '(14)'  OR                               X
               '&ECB'      EQ '(R14)' OR                               X
               '&ECB'      EQ '(15)'  OR                               X
               '&ECB'      EQ '(R15)')
         MNOTE 12,'MODCB ECB= INVALID REGISTER USE'
               AEND
         ST    &ECB,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&ECB)        BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&KEYLEN' NE '')
         LHI   14,CBMRRPL_KEYLEN  RPL KEYLEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&KEYLEN)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&MSGAREA' NE '')
         LHI   14,CBMRRPL_MSGAREA RPL MSGAREA VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&MSGAREA'(1,1) EQ '(')
               AIF ('&MSGAREA' EQ '(0)'   OR                           X
               '&MSGAREA'      EQ '(R0)'  OR                           X
               '&MSGAREA'      EQ '(1)'   OR                           X
               '&MSGAREA'      EQ '(R1)'  OR                           X
               '&MSGAREA'      EQ '(14)'  OR                           X
               '&MSGAREA'      EQ '(R14)' OR                           X
               '&MSGAREA'      EQ '(15)'  OR                           X
               '&MSGAREA'      EQ '(R15)')
         MNOTE 12,'MODCB MSGAREA= INVALID REGISTER USE'
               AEND
         ST    &MSGAREA,0(14)     STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&MSGAREA)    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&MSGLEN' NE '')
         LHI   14,CBMRRPL_MSGLEN RPL MSGLEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&MSGLEN)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&NXTRPL' NE '')
         LHI   14,CBMRRPL_NEXTRPL RPL NXTRPL VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&NXTRPL'(1,1) EQ '(')
               AIF ('&NXTRPL' EQ '(0)'   OR                            X
               '&NXTRPL'      EQ '(R0)'  OR                            X
               '&NXTRPL'      EQ '(1)'   OR                            X
               '&NXTRPL'      EQ '(R1)'  OR                            X
               '&NXTRPL'      EQ '(14)'  OR                            X
               '&NXTRPL'      EQ '(R14)' OR                            X
               '&NXTRPL'      EQ '(15)'  OR                            X
               '&NXTRPL'      EQ '(R15)')
         MNOTE 12,'MODCB NXTRPL= INVALID REGISTER USE'
               AEND
         ST    &NXTRPL,0(14)      STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&NXTRPL)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&OPTCD' NE '')
         LHI   14,CBMRRPL_OPTCD RPL OPTCD VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         J     *+8                BYPASS CONSTANTS
         ZGENOPTD OPTCD=&OPTCD,MODE=MODCB GENERATE 4-BYTE OPTCD
         DC    B'&ZGENOPT1'
         DC    B'&ZGENOPT2'
         DC    B'&ZGENOPT3'
         DC    B'&ZGENOPT4'
         MVC   0(4,14),4(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RECLEN' NE '')
         LHI   14,CBMRRPL_RECLEN RPL RECLEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&RECLEN)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
.* USE THE CBMR TO MODIFY THE RPL
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
.RPLMFG  ANOP
         ARK   14,0,1             R14=ADDRESS OF FIELDS
         AIF   ('&RPL'(1,1) EQ '(')
         ZOPTLR 15,&RPL
         AELSE
         LA    15,&RPL            R15=ADDRESS OF RPL
         AEND
         USING IHARPL,15
MODCBM&SYSNDX DS 0H
         CLI   0(1),CBMRRPL_ACB   ACB ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLDACB,0(14)      MOVE ACB INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_AREA  AREA ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLAREA,0(14)      MOVE AREA INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_AREALEN AREALEN ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLAREAL,0(14)     MOVE AREALEN INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_ARG   ARG ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLARG,0(14)       MOVE ARG INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_ECB   ECB ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLECB,0(14)       MOVE ECB INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_KEYLEN KEYLEN ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLKEYLN,3(14)     MOVE KEYLEN INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_MSGAREA MSGAREA ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLMSGAR,0(14)     MOVE MAREA INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_MSGLEN MSGLEN ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLMSGLN,2(14)     MOVE MLEN INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_NEXTRPL NXTRPL ?
         JNE   *+14               EXIT IF NOT
         MVC   RPLNXTRP,0(14)     MOVE NEXT INTO RPL
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRRPL_OPTCD OPTCD ?
         JNE   MODCBO&SYSNDX      EXIT IF NOT
         AIF   ('&ZGENOPT1'(1,1) EQ '1') KEY=KEY ON
         OI    RPLOPT1,RPLOPT1_KEY KEY=KEY ON
         AEND
         AIF   ('&ZGENOPT1'(2,1) EQ '1') ADR=KEY OFF
         NI    RPLOPT1,255-RPLOPT1_KEY ADR=KEY OFF
         AEND
         AIF   ('&ZGENOPT1'(3,1) EQ '1') SKP=SEQ OFF, SKP ON
         NI    RPLOPT1,255-RPLOPT1_SEQ SKP=SEQ OFF
         OI    RPLOPT1,RPLOPT1_SKP SKP=SKP ON
         AEND
         AIF   ('&ZGENOPT1'(4,1) EQ '1') SEQ=SEQ ON, SKP OFF
         OI    RPLOPT1,RPLOPT1_SEQ SEQ=SEQ ON
         NI    RPLOPT1,255-RPLOPT1_SKP SEQ=SKP OFF
         AEND
         AIF   ('&ZGENOPT1'(5,1) EQ '1') DIR=SEQ+SKP OFF
         NI    RPLOPT1,255-(RPLOPT1_SEQ+RPLOPT1_SKP) DIR=SEQ+SKP OFF
         AEND
         AIF   ('&ZGENOPT1'(6,1) EQ '1') ARD=ARD ON
         OI    RPLOPT1,RPLOPT1_ARD ARD=ARD ON
         AEND
         AIF   ('&ZGENOPT1'(7,1) EQ '1') LRD=ARD OFF
         NI    RPLOPT1,255-RPLOPT1_ARD LRD=ARD OFF
         AEND
         AIF   ('&ZGENOPT1'(8,1) EQ '1') FWD=FWD ON
         OI    RPLOPT1,RPLOPT1_FWD FWD=FWD ON
         AEND
         AIF   ('&ZGENOPT2'(1,1) EQ '1') BWD=FWD OFF
         NI    RPLOPT1,255-RPLOPT1_FWD BWD=FWD OFF
         AEND
         AIF   ('&ZGENOPT2'(2,1) EQ '1') SYN=SYN ON
         OI    RPLOPT1,RPLOPT1_SYN SYN=SYN ON
         AEND
         AIF   ('&ZGENOPT2'(3,1) EQ '1') ASY=SYN OFF
         NI    RPLOPT1,255-RPLOPT1_SYN ASY=SYN OFF
         AEND
         AIF   ('&ZGENOPT2'(4,1) EQ '1') NSP=NUP OFF, NSP ON
         NI    RPLOPT1,255-RPLOPT1_NUP NSP=NUP OFF
         OI    RPLOPT1,RPLOPT1_NSP NSP=NSP ON
         AEND
         AIF   ('&ZGENOPT2'(5,1) EQ '1') NUP=NSP OFF, NUP ON
         NI    RPLOPT1,255-RPLOPT1_NSP NSP=NSP OFF
         OI    RPLOPT1,RPLOPT1_NUP NUP=NUP ON
         AEND
         AIF   ('&ZGENOPT2'(6,1) EQ '1') UPD=NUP+NSP OFF
         NI    RPLOPT1,255-(RPLOPT1_NUP+RPLOPT1_NSP) UPD=NUP+NSP OFF
         AEND
         AIF   ('&ZGENOPT2'(7,1) EQ '1') KEQ=KEQ ON
         OI    RPLOPT2,RPLOPT2_KEQ KEQ=KEQ ON
         AEND
         AIF   ('&ZGENOPT2'(8,1) EQ '1') KGE=KEQ OFF
         NI    RPLOPT2,255-RPLOPT2_KEQ KGE=KEQ OFF
         AEND
         AIF   ('&ZGENOPT3'(1,1) EQ '1') FKS=FKS ON
         OI    RPLOPT2,RPLOPT2_FKS FKS=FKS ON
         AEND
         AIF   ('&ZGENOPT3'(2,1) EQ '1') GEN=FKS OFF
         NI    RPLOPT2,255-RPLOPT2_FKS GEN=FKS OFF
         AEND
         AIF   ('&ZGENOPT3'(3,1) EQ '1') MVE=MVE ON
         OI    RPLOPT2,RPLOPT2_MVE MVE=MVE ON
         AEND
         AIF   ('&ZGENOPT3'(4,1) EQ '1') LOC=MVE OFF
         NI    RPLOPT2,255-RPLOPT2_MVE LOC=MVE OFF
         AEND
         AIF   ('&ZGENOPT3'(5,1) EQ '1') RBA=RBA ON
         OI    RPLOPT2,RPLOPT2_RBA RBA=RBA ON
         AEND
         AIF   ('&ZGENOPT3'(6,1) EQ '1') XRBA=RBA OFF
         NI    RPLOPT2,255-RPLOPT2_RBA XRBA=RBA OFF
         AEND
         J     MODCBD&SYSNDX      EXIT
*
MODCBO&SYSNDX DS 0H
         CLI   0(1),CBMRRPL_RECLEN RECLEN ?
         JNE   *+10               EXIT IF NOT
         MVC   RPLRECLN,0(14)     MOVE RECLEN INTO RPL
MODCBD&SYSNDX DS 0H
         AHI   14,4               BUMP FIELDS POINTER
         AHI   1,1                BUMP VERBS POINTER
         BRCT  0,MODCBM&SYSNDX    LOOP
*
         LGFI  0,C'zRPL'          R0=RPL EYECATCHER
         C     0,RPLEYE           IS IT AN RPL ?
         JE    MODCB0&SYSNDX      EXIT IF IT IS
         J     MODCB4&SYSNDX      EXIT
         DROP  15
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
MODCBS&SYSNDX DS 0H
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
MODCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    MODCBF&SYSNDX      EXIT IF IT IS
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,MODCBL&SYSNDX    LOOP
*
         J     MODCB8&SYSNDX      ERROR IF NOT FOUND
*
MODCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,MODCBSV&SYSNDX  R14=NO. OF VERBS
         SR    14,0               R14=VERB POSITION
         SLL   14,2               *4
         A     14,MODCBSV&SYSNDX+4 +A(CBMRBODY)
         A     14,MODCBSV&SYSNDX  +NO. OF VERBS=FIELD POSITION
         BR    15                 RETURN
*
MODCB0&SYSNDX DS 0H
         SR    15,15              RC=0
         J     MODCBG&SYSNDX      EXIT
*
MODCB4&SYSNDX DS 0H
         LA    15,4               RC=4
         LR    0,15               R0=REASON CODE 4 (WRONG BLOCK TYPE)
         J     MODCBG&SYSNDX      EXIT
*
MODCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (WRONG CB TYPE/FIELD NOT FOUND)
MODCBG&SYSNDX DS 0H
         MEXIT
*
.DOACB   ANOP
&RMODEBF SETB 0
.*************
.* MODCB ACB *
.*************
         AIF   ('&AREA' NE '')
         MNOTE 12,'AREA IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&AREALEN' NE '')
         MNOTE 12,'AREALEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&ARG' NE '')
         MNOTE 12,'ARG IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&ECB' NE '')
         MNOTE 12,'ECB IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&KEYLEN' NE '')
         MNOTE 12,'KEYLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&MSGAREA' NE '')
         MNOTE 12,'MSGAREA IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&MSGLEN' NE '')
         MNOTE 12,'MSGLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&NXTRPL' NE '')
         MNOTE 12,'NXTRPL IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&OPTCD' NE '')
         MNOTE 12,'OPTCD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RECLEN' NE '')
         MNOTE 12,'RECLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RPL' NE '')
         MNOTE 12,'RPL IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&EODAD' NE '')
         MNOTE 12,'EODAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&LERAD' NE '')
         MNOTE 12,'LERAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&SYNAD' NE '')
         MNOTE 12,'SYNAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT AN ACB PARAMETER'
         AEND
.*
.* CHECK ACB UNSUPPORTED FIELDS
.*
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT SUPPORTED'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT SUPPORTED'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&ACB'(1,1) EQ '(')
            AIF ('&ACB' EQ '(0)'   OR                                  X
               '&ACB'   EQ '(R0)'  OR                                  X
               '&ACB'   EQ '(1)'   OR                                  X
               '&ACB'   EQ '(R1)'  OR                                  X
               '&ACB'   EQ '(14)'  OR                                  X
               '&ACB'   EQ '(R14)' OR                                  X
               '&ACB'   EQ '(15)'  OR                                  X
               '&ACB'   EQ '(R15)')
         MNOTE 12,'MODCB ACB= INVALID REGISTER USE'
            AEND
         AEND
.*
         AIF   ('&MF(1)' EQ 'L').ACBMFL
         AIF   ('&MF(1)' EQ 'E').ACBMFEG
         AIF   ('&MF(1)' EQ 'G').ACBMFL
.*
.* PROCESS ACB MF=I
         AIF   ('&BSTRNO' NE '')
         ZMODCB &ACB,ACBBSTNO-IHAACB,&BSTRNO,1
         AEND
.*
         AIF   ('&BUFND' NE '')
         ZMODCB &ACB,ACBBUFND-IHAACB,&BUFND,2
         AEND
.*
         AIF   ('&BUFNI' NE '')
         ZMODCB &ACB,ACBBUFNI-IHAACB,&BUFNI,2
         AEND
.*
         AIF   ('&BUFSP' NE '')
         ZMODCB &ACB,ACBBUFSP-IHAACB,&BUFSP,4
         AEND
.*
         AIF   ('&DDNAME' NE '')
         ZMODCB &ACB,ACBDDNM-IHAACB,&DDNAME,8
         AEND
.*
         AIF   ('&EXLST' NE '')
         ZMODCB &ACB,ACBEXLST-IHAACB,&EXLST,4
         AEND
.*
         AIF   ('&RMODE31' NE '')
         AIF   ('&ACB'(1,1) EQ '(')
         NI    ACBOFLGS-IHAACB(&ACB),255-(ACBR31B+ACBR31C) TURN OFF RMO-
               DE31 BITS
         AELSE
         NI    &ACB+ACBOFLGS-IHAACB,255-(ACBR31B+ACBR31C) TURN OFF RMOD-
               E31 BITS
         AEND
         AIF   ('&RMODE31' EQ 'ALL'  OR                                X
               '&RMODE31'  EQ 'BUFF' OR                                X
               '&RMODE31'  EQ 'CB'   OR                                X
               '&RMODE31'  EQ 'NONE').RMODOK1
         MNOTE 15,'INVALID RMODE31 - &RMODE31'
.RMODOK1 ANOP
         AIF   ('&RMODE31' EQ 'ALL' OR '&RMODE31' EQ 'BUFF')
.* RMODEBF IS PASSED TO ZGENMACF
&RMODEBF SETB 1
         AIF   ('&ACB'(1,1) EQ '(')
         OI    ACBOFLGS-IHAACB(&ACB),ACBR31B TURN ON ACBR31B
         AELSE
         OI    &ACB+ACBOFLGS-IHAACB,ACBR31B TURN ON ACBR31B
         AEND
         AEND
         AIF   ('&RMODE31' EQ 'ALL' OR '&RMODE31' EQ 'CB')
         AIF   ('&ACB'(1,1) EQ '(')
         OI    ACBOFLGS-IHAACB(&ACB),ACBR31C TURN ON ACBR31C
         AELSE
         OI    &ACB+ACBOFLGS-IHAACB,ACBR31C TURN ON ACBR31C
         AEND
         AEND
.*
         AIF   ('&MACRF' NE '')
&THEACB  SETC  '&ACB'             PASS ACB NAME
         ZGENMACF MACRF=&MACRF,MODE=CODE GENERATE CODE TO MODIFY MACRF
         AEND
.*
         AIF   ('&PASSWD' NE '')
         ZMODCB &ACB,ACBPASSW-IHAACB,&PASSWD,4
         AEND
.*
         AIF   ('&SHRPOOL' NE '')
         ZMODCB &ACB,ACBSHRP-IHAACB,&SHRPOOL,1
         AEND
.*
         AIF   ('&STRNO' NE '')
         ZMODCB &ACB,ACBSTRNO-IHAACB,&STRNO,1
         AEND
.*
         SR    15,15              RC=0
         AIF   ('&ACB'(1,1) EQ '(')
         LGFI  0,C'zACB'          R0=ACB EYECATCHER
         C     0,ACBEYE-IHAACB(&ACB) IS IT AN ACB ?
         AELSE
         LGFI  0,C'zACB'          R0=ACB EYECATCHER
         C     0,&ACB+ACBEYE-IHAACB IS IT AN ACB ?
         AEND
         JE    MODCBB&SYSNDX      EXIT IF IT IS
         LA    15,4               RC=4
         LR    0,15               R0=REASON CODE 4 (WRONG BLOCK TYPE)
         J     MODCBI&SYSNDX      EXIT
*
MODCBB&SYSNDX DS 0H
         AIF   ('&ACB'(1,1) EQ '(')
         TM    ACBOFLGS-IHAACB(&ACB),ACBOPEN IS ACB OPEN ?
         AELSE
         TM    &ACB+ACBOFLGS-IHAACB,ACBOPEN IS ACB OPEN ?
         AEND
         JNO   MODCBI&SYSNDX      EXIT IF NOT
         LA    15,4               RC=4
         LA    0,12               R0=REASON CODE 12 (ACB IS OPEN)
MODCBI&SYSNDX DS 0H
         MEXIT
.*
.ACBMFL  ANOP
.* PROCESS ACB MODCB MF=L
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&PASSWD'(1,1) EQ '(')
         MNOTE 12,'GENCB PASSWD= REGISTER NOTATION NOT ALLOWED WITH MF=-
               L'
            AEND
            AIF   ('&EXLST'(1,1) EQ '(')
         MNOTE 12,'GENCB EXLST= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
         AEND
.* COUNT NO. OF FIELDS
&FIELDS  SETA  0
         AIF   ('&BSTRNO' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFND' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFNI' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFSP' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&DDNAME' NE '')
&FIELDS  SETA  &FIELDS+2
&BYTE8   SETA  &BYTE8+1
         AEND
         AIF   ('&EXLST' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&MACRF NE 'O')
&FIELDS  SETA  &FIELDS+1
         ZGENMACF MACRF=&MACRF,MODE=MODCB GENERATE 4-BYTE MACRF
         AEND
         AIF   ('&PASSWD' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&RMODE31' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&SHRPOOL' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&STRNO' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'MODCB NO LABEL FOR CBMR'
         AEND
&BRAS    SETA  0
         AIF   (T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS-&BYTE8(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+(&FIELDS-&BYTE8)+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRACB+CBMRMOD) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS-&BYTE8) CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         AIF   ('&BSTRNO' NE '')
         DC    AL1(CBMRACB_BSTRNO)
         AEND
         AIF   ('&BUFND' NE '')
         DC    AL1(CBMRACB_BUFND)
         AEND
         AIF   ('&BUFNI' NE '')
         DC    AL1(CBMRACB_BUFNI)
         AEND
         AIF   ('&BUFSP' NE '')
         DC    AL1(CBMRACB_BUFSP)
         AEND
         AIF   ('&DDNAME' NE '')
         DC    AL1(CBMRACB_DDNM)
         AEND
         AIF   ('&EXLST' NE '')
         DC    AL1(CBMRACB_EXLST)
         AEND
         AIF   ('&RMODE31' NE '')
         DC    AL1(CBMRACB_RMODE31)
         AEND
         AIF   (T'&MACRF NE 'O')
         DC    AL1(CBMRACB_MACRF)
         AEND
         AIF   ('&PASSWD' NE '')
         DC    AL1(CBMRACB_PASSWD)
         AEND
         AIF   ('&SHRPOOL' NE '')
         DC    AL1(CBMRACB_SHRPL)
         AEND
         AIF   ('&STRNO' NE '')
         DC    AL1(CBMRACB_STRNO)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS-&BYTE8  HEADER+NO. OF VERBS
&I       SETA  1
.*
         AIF   ('&BSTRNO' NE '')
            AIF   (&BSTRNO GT 255)
            MNOTE 12,'BSTRNO GT 255 - &BSTRNO'
            AEND
         DC    AL4(&BSTRNO)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFND' NE '')
            AIF   (&BUFND GT 65535)
            MNOTE 12,'BUFND GT 65535 - &BUFND'
            AEND
         DC    AL4(&BUFND)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFNI' NE '')
            AIF   (&BUFNI GT 65535)
            MNOTE 12,'BUFNI GT 65535 - &BUFNI'
            AEND
         DC    AL4(&BUFNI)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFSP' NE '')
         DC    AL4(&BUFSP)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&DDNAME' NE '')
         DC    CL8'&DDNAME'
&OFFSET  SETA  &OFFSET+8
         AEND
.*
         AIF   ('&EXLST' NE '')
         DC    AL4(&EXLST)
            AIF   ('&EXLST'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&EXLST'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&RMODE31' EQ ''     OR                                X
               '&RMODE31'  EQ 'ALL'  OR                                X
               '&RMODE31'  EQ 'BUFF' OR                                X
               '&RMODE31'  EQ 'CB'   OR                                X
               '&RMODE31'  EQ 'NONE').RMODOK2
         MNOTE 15,'INVALID RMODE31 - &RMODE31'
.RMODOK2 ANOP
         AIF   ('&RMODE31' EQ 'ALL' OR '&RMODE31' EQ 'BUFF')
.* RMODEBF IS PASSED TO ZGENMACF
&RMODEBF SETB 1
         AEND
         AIF   ('&RMODE31' EQ 'ALL')
         DC    X'80000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'BUFF')
         DC    X'40000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'CB')
         DC    X'20000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'NONE')
         DC    X'10000000'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   (T'&MACRF NE 'O')
         DC    B'&ZGENMACF1'
         DC    B'&ZGENMACF2'
         DC    B'&ZGENMACF3'
         DC    B'&ZGENMACF4'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&PASSWD' NE '')
         DC    AL4(&PASSWD)
            AIF   ('&PASSWD'(1,1) EQ '(')
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&PASSWD'
&I       SETA  &I+1
            AEND
         AEND
.*
         AIF   ('&SHRPOOL' NE '')
            AIF   (&SHRPOOL GT 255)
         MNOTE 12,'SHRPOOL GT 255 - &SHRPOOL'
            AEND
         DC    AL4(&SHRPOOL)
         AEND
.*
         AIF   ('&STRNO' NE '')
            AIF   (&STRNO GT 255)
         MNOTE 12,'STRNO GT 255 - &STRNO'
            AEND
         DC    AL4(&STRNO)
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB MF= INVALID REGISTER USE'
            AEND
            AIF   ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
* HANDLE REGISTER NOTATION
&I       SETA  1
.ACBRGLP ANOP
            AIF   (&I GT 10).ACBRGDN
            AIF   (&OFFREG(&I) NE 0)
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
            AEND
&I       SETA  &I+1
         AGO   .ACBRGLP
.*
.ACBRGDN ANOP
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').ACBMFEG
         SR    15,15              RC=0
         MEXIT
.*
.ACBMFEG ANOP
.* PROCESS MODCB ACB MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* WHEN DONE, MOVE ALL THE CBMR VALUES INTO THE ACB
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'MODCB ACB MF=E/G SECOND PARAMETER MISSING'
         MEXIT
         AEND
         AIF   ('&MF(2)'(1,1) EQ '(')
         ZOPTLR 1,&MF(2)
         AELSE
         LA    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
         USING CBMR,1
         BRAS  15,*+8             BYPASS CONSTANT
         DC    C'CBMR'
         CLC   CBMREYE,0(15)      CORRECT ?
         JNE   MODCB8&SYSNDX      ERROR IF NOT
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
MODCBSV&SYSNDX DS 0H
         DS    2AL4
         STM   0,1,MODCBSV&SYSNDX SAVE R0-R1
         AIF   ('&MF(1)' EQ 'G').ACBMFG
.*
         AIF   ('&BSTRNO' NE '')
         LHI   14,CBMRACB_BSTRNO  ACB BSTRNO VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BSTRNO)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&BUFND' NE '')
         LHI   14,CBMRACB_BUFND   ACB BUFND VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BUFND)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&BUFNI' NE '')
         LHI   14,CBMRACB_BUFNI   ACB BUFNI VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BUFNI)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&BUFSP' NE '')
         LHI   14,CBMRACB_BUFSP   ACB BUFSP VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&BUFSP)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&DDNAME' NE '')
         LHI   14,CBMRACB_DDNM    ACB DDNAME VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=CL8'&DDNAME'   BASE-FREE
         MVC   0(8,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&EXLST' NE '')
         LHI   14,CBMRACB_EXLST   ACB EXLST VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF ('&EXLST' EQ '(0)'   OR                             X
               '&EXLST'      EQ '(R0)'  OR                             X
               '&EXLST'      EQ '(1)'   OR                             X
               '&EXLST'      EQ '(R1)'  OR                             X
               '&EXLST'      EQ '(14)'  OR                             X
               '&EXLST'      EQ '(R14)' OR                             X
               '&EXLST'      EQ '(15)'  OR                             X
               '&EXLST'      EQ '(R15)')
         MNOTE 12,'MODCB EXLST= INVALID REGISTER USE'
               AEND
         ST    &EXLST,0(14)       STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&EXLST)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&RMODE31' EQ 'ALL')
&RMODEBF SETB 1
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=X'80000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'BUFF')
&RMODEBF SETB 1
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=X'40000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'CB')
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=X'20000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'NONE')
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=X'10000000'    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&MACRF' NE '')
         LHI   14,CBMRACB_MACRF   ACB MACRF VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         J     *+8                BYPASS CONSTANTS
         ZGENMACF MACRF=&MACRF,MODE=MODCB GENERATE 4-BYTE MACRF
         DC    B'&ZGENMACF1'
         DC    B'&ZGENMACF2'
         DC    B'&ZGENMACF3'
         DC    B'&ZGENMACF4'
         MVC   0(4,14),4(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&PASSWD' NE '')
         LHI   14,CBMRACB_PASSWD  ACB PASSWD VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&PASSWD'(1,1) EQ '(')
               AIF ('&PASSWD' EQ '(0)'   OR                            X
               '&PASSWD'      EQ '(R0)'  OR                            X
               '&PASSWD'      EQ '(1)'   OR                            X
               '&PASSWD'      EQ '(R1)'  OR                            X
               '&PASSWD'      EQ '(14)'  OR                            X
               '&PASSWD'      EQ '(R14)' OR                            X
               '&PASSWD'      EQ '(15)'  OR                            X
               '&PASSWD'      EQ '(R15)')
         MNOTE 12,'MODCB PASSWD= INVALID REGISTER USE'
               AEND
         ST    &PASSWD,0(14)      STORE FIELD IN CBMR
            AELSE
         LARL  15,=A(&PASSWD)     BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
            AEND
         AEND
.*
         AIF   ('&SHRPOOL' NE '')
         LHI   14,CBMRACB_SHRPL   ACB SHRPOOL VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&SHRPOOL)    BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&STRNO' NE '')
         LHI   14,CBMRACB_STRNO   ACB STRNO VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=A(&STRNO)      BASE-FREE
         MVC   0(4,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
.* USE THE CBMR TO MODIFY THE ACB
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
.ACBMFG  ANOP
         ARK   14,0,1             R14=ADDRESS OF FIELDS
         AIF   ('&ACB'(1,1) EQ '(')
         ZOPTLR 15,&ACB
         AELSE
         LA    15,&ACB            R15=ADDRESS OF ACB
         AEND
         USING IHAACB,15
MODCBM&SYSNDX DS 0H
         CLI   0(1),CBMRACB_BSTRNO BSTRNO ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBSTNO,3(14)     MOVE BSTRNO INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_BUFND BUFND ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBUFND,2(14)     MOVE BUFND INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_BUFNI BUFNI ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBUFNI,2(14)     MOVE BUFNI INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_BUFSP BUFSP ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBBUFSP,0(14)     MOVE BUFSP INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_DDNM  DDNAME ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBDDNM,0(14)      MOVE DDNAME INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_EXLST EXLST ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBEXLST,0(14)     MOVE EXLST INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_RMODE31 RMODE31 ?
         JNE   *+76               EXIT IF NOT
         NI    ACBOFLGS,255-(ACBR31B+ACBR31C) TURN OFF RMODE31 BITS
         NI    ACBMACR3,255-ACBMODE TURN OFF ACBMODE
         TM    0(14),X'10'        RMODE31=NONE ?
         JO    MODCBD&SYSNDX      EXIT IF IT IS
         TM    0(14),X'80'        RMODE31=ALL ?
         JNO   *+12               EXIT IF NOT
         OI    ACBOFLGS,ACBR31B+ACBR31C TURN ON BUFF+CB
         OI    ACBMACR3,ACBMODE   TURN ON MODE
         J     MODCBD&SYSNDX      EXIT
*
         TM    0(14),X'40'        RMODE31=BUFF ?
         JNO   *+12               EXIT IF NOT
         OI    ACBOFLGS,ACBR31B   TURN ON BUFF
         OI    ACBMACR3,ACBMODE   TURN ON MODE
         J     MODCBD&SYSNDX      EXIT
*
         TM    0(14),X'20'        RMODE31=CB ?
         JNO   MODCBD&SYSNDX      EXIT IF NOT
         OI    ACBOFLGS,ACBR31C   TURN ON CB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_MACRF MACRF ?
         JNE   MODCBO&SYSNDX      EXIT IF NOT
         AIF   ('&ZGENMACF1'(1,1) EQ '1') KEY=KEY ON
         OI    ACBMACR1,ACBKEY    KEY=KEY ON
         AEND
         AIF   ('&ZGENMACF1'(2,1) EQ '1') ADR=ADR ON
         OI    ACBMACR1,ACBADR    ADR=ADR ON
         AEND
         AIF   ('&ZGENMACF1'(3,1) EQ '1') NDF=DFR OFF
         NI    ACBMACR3,255-ACBDFR NDF=DFR OFF
         AEND
         AIF   ('&ZGENMACF1'(4,1) EQ '1') DFR=DFR ON
         OI    ACBMACR3,ACBDFR    DFR=DFR ON
         AEND
         AIF   ('&ZGENMACF1'(5,1) EQ '1') SEQ=SEQ ON
         OI    ACBMACR1,ACBSEQ    SEQ=SEQ ON
         AEND
         AIF   ('&ZGENMACF1'(6,1) EQ '1') DIR=DIR ON
         OI    ACBMACR1,ACBDIR    DIR=DIR ON
         AEND
         AIF   ('&ZGENMACF1'(7,1) EQ '1') SKP=SKP ON
         OI    ACBMACR2,ACBSKP    SKP=SKP ON
         AEND
         AIF   ('&ZGENMACF1'(8,1) EQ '1') IN =IN ON
         OI    ACBMACR1,ACBIN     IN =IN ON
         AEND
.* OUT ALLOWS IN
         AIF   ('&ZGENMACF2'(1,1) EQ '1') OUT=OUT ON
         OI    ACBMACR1,ACBOUT     OUT=OUT ON
         AEND
         AIF   ('&ZGENMACF2'(2,1) EQ '1') NIS=SIS OFF
         NI    ACBMACR3,255-ACBSIS NIS=SIS OFF
         AEND
         AIF   ('&ZGENMACF2'(3,1) EQ '1') SIS=SIS ON
         OI    ACBMACR3,ACBSIS    SIS=SIS ON
         AEND
         AIF   ('&ZGENMACF2'(4,1) EQ '1') NRM=AIX OFF
         NI    ACBMACR2,255-ACBAIX NRM=AIX OFF
         AEND
         AIF   ('&ZGENMACF2'(5,1) EQ '1') AIX=AIX ON
         OI    ACBMACR2,ACBAIX    AIX=AIX ON
         AEND
         AIF   ('&ZGENMACF2'(6,1) EQ '1') NSR=LSR AND GSR OFF
         NI    ACBMACR3,255-(ACBLSR+ACBGSR) NSR=LSR AND GSR OFF
         AEND
         AIF   ('&ZGENMACF2'(7,1) EQ '1') LSR=LSR ON, GSR OFF
         OI    ACBMACR3,ACBLSR     LSR=LSR ON
         NI    ACBMACR3,255-ACBGSR LSR=GSR OFF
         AEND
         AIF   ('&ZGENMACF2'(8,1) EQ '1') GSR=GSR ON, LSR OFF
         OI    ACBMACR3,ACBGSR     GSR=GSR ON
         NI    ACBMACR3,255-ACBLSR GSR=LSR OFF
         AEND
         J     MODCBD&SYSNDX      EXIT
*
MODCBO&SYSNDX DS 0H
         CLI   0(1),CBMRACB_PASSWD PASSWORD ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBPASSW,0(14)     MOVE PASSWORD ADDRESS INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_SHRPL SHAREPOOL NUMBER ?
         JNE   *+14               EXIT IF NOT
         MVC   ACBSHRP,3(14)      MOVE SHAREPOOL INTO ACB
         J     MODCBD&SYSNDX      EXIT
*
         CLI   0(1),CBMRACB_STRNO STRNO ?
         JNE   *+10               EXIT IF NOT
         MVC   ACBSTRNO,3(14)     MOVE STRNO INTO ACB
MODCBD&SYSNDX DS 0H
         AHI   14,4               BUMP FIELDS POINTER
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+8                EXIT IF NOT
         AHI   14,4               BUMP FIELDS POINTER
         AHI   1,1                BUMP VERBS POINTER
         BRCT  0,MODCBM&SYSNDX    LOOP
*
         LGFI  0,C'zACB'          R0=ACB EYECATCHER
         C     0,ACBEYE           IS IT AN ACB ?
         JE    MODCB0&SYSNDX      EXIT IF IT IS
         J     MODCB4&SYSNDX      EXIT
         DROP  15
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
MODCBS&SYSNDX DS 0H
         SGR   1,1                CLEAR R1 HIGH
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
MODCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    MODCBF&SYSNDX      EXIT IF IT IS
         AIH   1,4                ASSUME 4-BYTE FIELD
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+10               EXIT IF NOT
         AIH   1,4                8-BYTE FIELD
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,MODCBL&SYSNDX    LOOP
*
.* YOU CANNOT MODIFY A VERB NOT PREVIOUSLY CREATED
         J     MODCB8&SYSNDX      ERROR IF NOT FOUND
*
MODCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,MODCBSV&SYSNDX+4 14=ADDRESS OF VERB CODES (CBMRBODY)
         A     14,MODCBSV&SYSNDX  +NO. OF VERBS=START OF FIELDS
         SRLG  1,1,32             R1=FIELD OFFSET
         AR    14,1               R14=FIELD POSITION
         BR    15                 RETURN
*
MODCB0&SYSNDX DS 0H
         SR    15,15              RC=0
         J     MODCBG&SYSNDX      EXIT
*
MODCB4&SYSNDX DS 0H
         LA    15,4               RC=4
         LR    0,15               R0=REASON CODE 4 (WRONG BLOCK TYPE)
         J     MODCBG&SYSNDX      EXIT
*
MODCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (WRONG CB TYPE/FIELD NOT FOUND)
MODCBG&SYSNDX DS 0H
         MEXIT
.*
         MEND
