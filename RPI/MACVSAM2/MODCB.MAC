         MACRO
.**********************************************************************
.* Copyright 2005 Automated Software Tools Corporation                *
.* This source code is part of z390 assembler/emulator package        *
.* The z390 package is distributed under GNU general public license   *
.* Author - Don Higgins                                               *
.* Date   - 09/30/05                                                  *
.**********************************************************************
.* 08/10/07 INITIAL CODING TO SUPPORT AREA, RECLEN INITIALLY          *
.* 08/22/07 RPI 680  CORRECT RPLRECLN                                 *
.* 08/27/07 RPI 688  SUPPORT RPL=(REG)                                *
.* 09/03/07 RPI 690  ADD ARG= AND OPTCD= SUPPORT                      *
.* 09/03/07 RPI 672  FIX 3 MISSPELL LABELS,&OPTCDF,OPTF1/2,&MODS ERRS *
.*                   ADD CROSS CHECK FOR ACB/RPL OPTION MATCHES       *
.* 09/15/07 RPI 696  ADD SUPPORT FOR RPL OPTCD FWD DEFAULT OPTION SET *
.*                   ADD RPL FIELD ACB ADDR                           *
.* 09/17/07 RPI 682  ADD ACB DDNAME, DSNAME, VCLRN,                   *
.*                   and use ZGENMACF and ZGENOPTD                    *
.* 09/19/07 RPI 697  SET RC=0                                         *
.* 12/08/07 RPI 750  ADD RPL KEYLEN= PARM FOR GENERIC KEY LENGTH      *
.* 04/19/08 RPI 833  add SETC quotes for HLASM compatibility          *
.* 04/23/09 RPI 1023 jm1 MNOTE 4 instead of 12 if STRNO specified     *
.* 04/23/09 RPI 1023 jm2 MODCB generates OI and NI instead of MVI     *
.* 04/23/09 RPI 1023 jm3 support for AREALEN                          *
.*                                                                    *
.* 01/01/19          zVSAM V2 version (Melvyn Maltz)                  *
.*                   &DSNAME removed                                  *
.*                   &VCLRN  removed                                  *
.*                   RPLLKEY to RPLKEYLN, LENGTH=1                    *
.*                   Reconstructed code, &MODS removed                *
.*                   ZMODCB eliminated                                *
.**********************************************************************
.* MF=I or omitted    Generates CBMR and invokes ZVSAM19C to modify
.*                    the block
.* MF=L               Generates CBMR inline
.* MF=(L,addr)        Generates CBMR inline and then moves it to addr
.* MF=(L,addr,label)  as above and generates label equ size
.*
.* MF=(E,addr)        Modifies the CBMR at addr
.*                    Invokes ZVSAM19C to modify the block using
.*                    the CBMR
.*
.* MF=(G,addr)        Generates CBMR inline and then moves it to addr
.*                    Invokes ZVSAM19C to modify the block using
.*                    the CBMR
.* MF=(G,addr,label)  as above and generates label equ size
.*
.* addr can be label or (reg), reg cannot be R0, R1, R14 or R15
.* reg is not permitted for MF=L
.*
&N       MODCB &AM=VSAM,          VSAM                                 X
               &RPL=,             RPL ADDRESS                          X
               &ACB=,             ACB ADDRESS/RPLDACB                  X
               &EXLST=,           EXLST ADDRESS/ACBEXLST               X
               &DDNAME=,          ACBDDNM                              X
               &PASSWD=,          ACBPASSW                             X
               &MACRF=,           ACBMACR1-4                           X
               &BUFND=,           ACBBUFND                             X
               &BUFNI=,           ACBBUFNI                             X
               &BUFSP=,           ACBBUFSP                             X
               &RMODE31=,         ACBMODE                              X
               &STRNO=,           ACBSTRNO                             X
               &BSTRNO=,          ACBBSTNO                             X
               &MAREA=,           ACB NOT SUPPORTED                    X
               &MLEN=,            ACB NOT SUPPORTED                    X
               &RLSREAD=,         ACB NOT SUPPORTED                    X
               &SHRPOOL=,         ACBSHRP                              X
               &AREA=,            RPLAREA                              X
               &AREALEN=,         RPLAREAL              jm3            X
               &ARG=,             RPLARG                               X
               &ECB=,             RPLECB                               X
               &MSGAREA=,         RPLMSGAR                             X
               &NXTRPL=,          RPLNXTRP                             X
               &RECLEN=,          RPLRECLN                             X
               &MSGLEN=,          RPLMSGLN                             X
               &KEYLEN=,          RPLKEYLN                             X
               &OPTCD=,           RPLOPTCD (RPLOPT1-2)                 X
               &TRANSID=,         RPL NOT SUPPORTED                    X
               &EODAD=,           EXLST EODAD                          X
               &LERAD=,           EXLST LERAD                          X
               &SYNAD=,           EXLST SYNAD                          X
               &JRNAD=,           EXLST NOT SUPPORTED                  X
               &UPAD=,            EXLST NOT SUPPORTED                  X
               &RLSWAIT=,         EXLST NOT SUPPORTED                  X
               &MF=I
.*
         LCLA  &OFFREG(10)
         LCLC  &OFFCHR(10)
.* FOR EXLST
         LCLB  &EOD_A,&EOD_N,&EOD_L
         LCLB  &LER_A,&LER_N,&LER_L
         LCLB  &SYN_A,&SYN_N,&SYN_L
         LCLB  &EXLHAND
.* FOR RPL
         GBLC  &ZGENOPT1,&ZGENOPT2,&ZGENOPT3,&ZGENOPT4
         LCLB  &RPLHAND
.* FOR ACB
         GBLB  &RMODEBF           PASSED TO ZGENMACF
         GBLC  &ZGENMACF1,&ZGENMACF2,&ZGENMACF3,&ZGENMACF4
         LCLA  &BYTE8
         LCLB  &ACBHAND
.*
         AIF   ('&N' NE '')
&N       DS    0D
         AEND
.*
.* ELIMINATE POSITIONALS
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'MODCB UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AIF   (&NPOS GT 0).POSLOOP
.*
.POSEND  ANOP
.* VALIDATE AM
         AIF   ('&AM' NE 'VSAM')
         MNOTE 12,'MODCB ONLY AM=VSAM IS SUPPORTED'
         AEND
.* VALIDATE MF=
         AIF   ('&MF(1)' NE 'I' AND                                    X
               '&MF(1)'  NE 'L' AND                                    X
               '&MF(1)'  NE 'E' AND                                    X
               '&MF(1)'  NE 'G')
         MNOTE 12,'MODCB MF= INVALID - &MF'
         AEND
.*
         AIF   ('&RPL' NE '').DORPL
         AIF   ('&ACB' NE '').DOACB
         AIF   ('&EXLST' NE '').DOEXLST
         MNOTE 12,'MODCB BLOCK TYPE UNRECOGNISED'
         MEXIT
.*
.DOEXLST ANOP
.***************
.* MODCB EXLST *
.***************
.* NOTE: YOU CAN'T CHANGE AN ADDRESS TO ZERO
.*       YOU CAN ACTIVATE AN ADDRESS THAT IS ALREADY ZERO
         AIF   ('&ACB' NE '')
         MNOTE 12,'ACB IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&DDNAME' NE '')
         MNOTE 12,'DDNAME IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&PASSWD' NE '')
         MNOTE 12,'PASSWD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MACRF' NE '')
         MNOTE 12,'MACRF IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFND' NE '')
         MNOTE 12,'BUFND IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFNI' NE '')
         MNOTE 12,'BUFNI IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BUFSP' NE '')
         MNOTE 12,'BUFSP IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RMODE31' NE '')
         MNOTE 12,'RMODE31 IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&STRNO' NE '')
         MNOTE 12,'STRNO IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&BSTRNO' NE '')
         MNOTE 12,'BSTRNO IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&SHRPOOL' NE '')
         MNOTE 12,'SHRPOOL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&AREA' NE '')
         MNOTE 12,'AREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&AREALEN' NE '')
         MNOTE 12,'AREALEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&ARG' NE '')
         MNOTE 12,'ARG IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&ECB' NE '')
         MNOTE 12,'ECB IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&KEYLEN' NE '')
         MNOTE 12,'KEYLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MSGAREA' NE '')
         MNOTE 12,'MSGAREA IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&MSGLEN' NE '')
         MNOTE 12,'MSGLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&NXTRPL' NE '')
         MNOTE 12,'NXTRPL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&OPTCD' NE '')
         MNOTE 12,'OPTCD IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RECLEN' NE '')
         MNOTE 12,'RECLEN IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&RPL' NE '')
         MNOTE 12,'RPL IS NOT AN EXLST PARAMETER'
         AEND
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT AN EXLST PARAMETER'
         AEND
.*
.* CHECK EXLST UNSUPPORTED FIELDS
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT SUPPORTED'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT SUPPORTED'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&AREA'(1,1) EQ '(')
         MNOTE 12,'MODCB AREA= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&EXLST'(1,1) EQ '(')
         MNOTE 12,'MODCB EXLST= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
         AEND
.* DON'T NEED TO GEN A CBMR FOR MF=E
         AIF   ('&MF(1)' EQ 'E').EXLMFEG
.* COUNT NO. OF FIELDS
&FIELDS  SETA  1                  ALLOW FOR EXLST=
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (N'&EODAD GT 1)
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (N'&LERAD GT 1)
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (N'&SYNAD GT 1)
&FIELDS  SETA  &FIELDS+1
         AEND
&BRAS    SETA  0
         AIF   ('&MF(1)' EQ 'I' OR T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+&FIELDS+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   ('&MF(1)' EQ 'I' OR T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRXLST+CBMRMOD) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS)       CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         DC    AL1(CBMRXL_EXLST)
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
         DC    AL1(CBMRXL_EODAD)
         AEND
         AIF   (N'&EODAD GT 1)
         DC    AL1(CBMRXL_EOD_MODS)
         AEND
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
         DC    AL1(CBMRXL_LERAD)
         AEND
         AIF   (N'&LERAD GT 1)
         DC    AL1(CBMRXL_LER_MODS)
         AEND
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
         DC    AL1(CBMRXL_SYNAD)
         AEND
         AIF   (N'&SYNAD GT 1)
         DC    AL1(CBMRXL_SYN_MODS)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS         HEADER+NO. OF VERBS
&I       SETA  1
.*
         DC    AL4(&EXLST)
         AIF   ('&EXLST'(1,1) EQ '(')
            AIF ('&EXLST' EQ '(0)'   OR                                X
               '&EXLST'   EQ '(R0)'  OR                                X
               '&EXLST'   EQ '(1)'   OR                                X
               '&EXLST'   EQ '(R1)'  OR                                X
               '&EXLST'   EQ '(14)'  OR                                X
               '&EXLST'   EQ '(R14)' OR                                X
               '&EXLST'   EQ '(15)'  OR                                X
               '&EXLST'   EQ '(R15)')
         MNOTE 12,'MODCB EXLST= INVALID REGISTER USE'
            AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&EXLST'
&I       SETA  &I+1
         AEND
&OFFSET  SETA  &OFFSET+4
.*
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
         DC    AL4(&EODAD(1))
            AIF   ('&EODAD(1)'(1,1) EQ '(')
               AIF ('&EODAD(1)' EQ '(0)'   OR                          X
                  '&EODAD(1)'   EQ '(R0)'  OR                          X
                  '&EODAD(1)'   EQ '(1)'   OR                          X
                  '&EODAD(1)'   EQ '(R1)'  OR                          X
                  '&EODAD(1)'   EQ '(14)'  OR                          X
                  '&EODAD(1)'   EQ '(R14)' OR                          X
                  '&EODAD(1)'   EQ '(15)'  OR                          X
                  '&EODAD(1)'   EQ '(R15)')
         MNOTE 12,'MODCB EODAD= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&EODAD(1)'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   (N'&EODAD GT 1)
&EODCNT  SETA  2
.EODLPL  ANOP
         AIF   (&EODCNT GT N'&EODAD).EODDUNL
            AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' NE 'A' AND                        X
               '&EODAD(&EODCNT)'     NE 'N' AND                        X
               '&EODAD(&EODCNT)'     NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
            AEND
&EODCNT  SETA  &EODCNT+1
         AGO   .EODLPL
.*
.EODDUNL ANOP
            AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
            AEND
            AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&EOD_A   SETB  0
&EOD_N   SETB  0
            AEND
         DC    B'&EOD_A&EOD_N.000000',3X'00'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
         DC    AL4(&LERAD(1))
            AIF   ('&LERAD(1)'(1,1) EQ '(')
               AIF ('&LERAD(1)' EQ '(0)'   OR                          X
                  '&LERAD(1)'   EQ '(R0)'  OR                          X
                  '&LERAD(1)'   EQ '(1)'   OR                          X
                  '&LERAD(1)'   EQ '(R1)'  OR                          X
                  '&LERAD(1)'   EQ '(14)'  OR                          X
                  '&LERAD(1)'   EQ '(R14)' OR                          X
                  '&LERAD(1)'   EQ '(15)'  OR                          X
                  '&LERAD(1)'   EQ '(R15)')
         MNOTE 12,'MODCB LERAD= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&LERAD(1)'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   (N'&LERAD GT 1)
&LERCNT  SETA  2
.LERLPL  ANOP
            AIF   (&LERCNT GT N'&LERAD).LERDUNL
            AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' NE 'A' AND                        X
               '&LERAD(&LERCNT)'     NE 'N' AND                        X
               '&LERAD(&LERCNT)'     NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
            AEND
&LERCNT  SETA  &LERCNT+1
         AGO   .LERLPL
.*
.LERDUNL ANOP
            AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
            AEND
            AIF   (&LER_A AND &LER_N)
         MNOTE 12,'LERAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&LER_A   SETB  0
&LER_N   SETB  0
            AEND
         DC    B'&LER_A&LER_N.000000',3X'00'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
         DC    AL4(&SYNAD(1))
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
               AIF ('&SYNAD(1)' EQ '(0)'   OR                          X
                  '&SYNAD(1)'   EQ '(R0)'  OR                          X
                  '&SYNAD(1)'   EQ '(1)'   OR                          X
                  '&SYNAD(1)'   EQ '(R1)'  OR                          X
                  '&SYNAD(1)'   EQ '(14)'  OR                          X
                  '&SYNAD(1)'   EQ '(R14)' OR                          X
                  '&SYNAD(1)'   EQ '(15)'  OR                          X
                  '&SYNAD(1)'   EQ '(R15)')
         MNOTE 12,'MODCB SYNAD= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&SYNAD(1)'
            AEND
         AEND
         AIF   (N'&SYNAD GT 1)
&SYNCNT  SETA  2
.SYNLPL  ANOP
            AIF   (&SYNCNT GT N'&SYNAD).SYNDUNL
            AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                        X
               '&SYNAD(&SYNCNT)'     NE 'N' AND                        X
               '&SYNAD(&SYNCNT)'     NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
            AEND
&SYNCNT  SETA  &SYNCNT+1
         AGO   .SYNLPL
.*
.SYNDUNL ANOP
            AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
            AEND
            AIF   (&SYN_A AND &SYN_N)
         MNOTE 12,'SYNAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&SYN_A   SETB  0
&SYN_N   SETB  0
            AEND
         DC    B'&SYN_A&SYN_N.000000',3X'00'
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
&I       SETA  1
.EXLRGLP ANOP
         AIF   (&I GT 10).EXLRGDN
         AIF   (&OFFREG(&I) NE 0)
            AIF   (NOT &EXLHAND)
* HANDLE REGISTER NOTATION
&EXLHAND SETB  1
            AEND
         ST    &OFFCHR(&I),&OFFREG(&I).(15) STORE REGISTER INTO CBMR
         AEND
&I       SETA  &I+1
         AGO   .EXLRGLP
.*
.EXLRGDN ANOP
         AIF   ('&MF(1)' EQ 'L' OR '&MF(1)' EQ 'G').EXLMFL
.*
.* PROCESS EXLST MF=I
         LR    1,15               R1=CBMR ADDRESS
         IIHF  1,C'&MF(1)'        R1 HIGH=MF
         LRL   15,=V(ZVSAM19C)    R15=CB PROCESSOR
         BASR  14,15              CALL IT
*
         MEXIT
.*
.EXLMFL  ANOP
.* PROCESS EXLST MODCB MF=L
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'MODCB EXLST NO LABEL FOR CBMR'
         AEND
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB EXLST MF= INVALID REGISTER USE'
            AEND
            AIF   ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LARL  1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').EXLMFEG
.*
         AIF   (T'&MF(2) NE 'O')
         SR    15,15              RC=0
         AEND
         MEXIT
.*
.EXLMFEG ANOP
.* PROCESS MODCB EXLST MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* CALL ZVSAM19C TO MODIFY THE EXLST
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'MODCB EXLST MF=E/G SECOND PARAMETER MISSING'
         AEND
.*
         AIF   ('&MF(1)' EQ 'G').EXLMFG
.*
         AIF ('&MF(2)'(1,1) EQ '(')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB EXLST MF= INVALID REGISTER USE'
            AEND
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AELSE
         LARL  1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
.* MF=E
.* MODIFY THE CBMR
         USING CBMR,1
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
MODCBSV&SYSNDX DS 0H
         DS    2AL4               SAVE AREA
         STM   0,1,MODCBSV&SYSNDX SAVE R0-R1
.*
&EOD_A   SETB  0
&EOD_N   SETB  0
&EOD_L   SETB  0
         AIF   ('&EODAD(1)' NE '' AND '&EODAD(1)' NE '0')
         LHI   14,CBMRXL_EODAD    EXLST EODAD ADDRESS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&EODAD(1)'(1,1) EQ '(')
               AIF ('&EODAD(1)' EQ '(0)'   OR                          X
               '&EODAD(1)'      EQ '(R0)'  OR                          X
               '&EODAD(1)'      EQ '(1)'   OR                          X
               '&EODAD(1)'      EQ '(R1)'  OR                          X
               '&EODAD(1)'      EQ '(14)'  OR                          X
               '&EODAD(1)'      EQ '(R14)' OR                          X
               '&EODAD(1)'      EQ '(15)'  OR                          X
               '&EODAD(1)'      EQ '(R15)')
         MNOTE 12,'MODCB EODAD= INVALID REGISTER USE'
               AEND
         ST    &EODAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
         LARL  15,&EODAD(1)       R15=EODAD ADDRESS
         ST    15,0(14)           STORE EODAD IN CBMR
            AEND
         AEND
.*
         AIF   (N'&EODAD GT 1)
         LHI   14,CBMRXL_EOD_MODS EXLST EODAD MODIFIERS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
&EODCNT  SETA  2
.EODLPEG ANOP
         AIF   (&EODCNT GT N'&EODAD).EODDNEG
            AIF   ('&EODAD(&EODCNT)' EQ 'A')
&EOD_A   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' EQ 'N')
&EOD_N   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' EQ 'L')
&EOD_L   SETB  1
            AEND
            AIF   ('&EODAD(&EODCNT)' NE 'A' AND                        X
               '&EODAD(&EODCNT)'  NE 'N' AND                           X
               '&EODAD(&EODCNT)'  NE 'L')
         MNOTE 12,'EODAD INVALID MODIFIER - &EODAD(&EODCNT)'
            AEND
&EODCNT  SETA  &EODCNT+1
            AGO   .EODLPEG
.*
.EODDNEG ANOP
            AIF   (&EOD_L)
         MNOTE 12,'EODAD MODIFIER L IS NOT SUPPORTED'
            AEND
            AIF   (&EOD_A AND &EOD_N)
         MNOTE 12,'EODAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&EOD_A   SETB  0
&EOD_N   SETB  0
            AEND
         IILF  15,B'&EOD_A&EOD_N.000000000000000000000000000000' EOD MO-
               DS
         ST    15,0(14)           STORE EOD MODS IN CBMR
         AEND
.*
&LER_A   SETB  0
&LER_N   SETB  0
&LER_L   SETB  0
         AIF   ('&LERAD(1)' NE '' AND '&LERAD(1)' NE '0')
         LHI   14,CBMRXL_LERAD    EXLST LERAD ADDRESS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&LERAD(1)'(1,1) EQ '(')
               AIF ('&LERAD(1)' EQ '(0)'   OR                          X
               '&LERAD(1)'      EQ '(R0)'  OR                          X
               '&LERAD(1)'      EQ '(1)'   OR                          X
               '&LERAD(1)'      EQ '(R1)'  OR                          X
               '&LERAD(1)'      EQ '(14)'  OR                          X
               '&LERAD(1)'      EQ '(R14)' OR                          X
               '&LERAD(1)'      EQ '(15)'  OR                          X
               '&LERAD(1)'      EQ '(R15)')
         MNOTE 12,'MODCB LERAD= INVALID REGISTER USE'
               AEND
         ST    &LERAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
         LARL  15,&LERAD(1)       R15=LERAD ADDRESS
         ST    15,0(14)           STORE LERAD IN CBMR
            AEND
         AEND
.*
         AIF   (N'&LERAD GT 1)
         LHI   14,CBMRXL_LER_MODS EXLST LERAD MODIFIERS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
&LERCNT  SETA  2
.LERLPEG ANOP
            AIF   (&LERCNT GT N'&LERAD).LERDNEG
            AIF   ('&LERAD(&LERCNT)' EQ 'A')
&LER_A   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' EQ 'N')
&LER_N   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' EQ 'L')
&LER_L   SETB  1
            AEND
            AIF   ('&LERAD(&LERCNT)' NE 'A' AND                        X
               '&LERAD(&LERCNT)'  NE 'N' AND                           X
               '&LERAD(&LERCNT)'  NE 'L')
         MNOTE 12,'LERAD INVALID MODIFIER - &LERAD(&LERCNT)'
            AEND
&LERCNT  SETA  &LERCNT+1
            AGO   .LERLPEG
.*
.LERDNEG ANOP
            AIF   (&LER_L)
         MNOTE 12,'LERAD MODIFIER L IS NOT SUPPORTED'
            AEND
            AIF   (&LER_A AND &LER_N)
         MNOTE 12,'LERAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&LER_A   SETB  0
&LER_N   SETB  0
            AEND
         IILF  15,B'&LER_A&LER_N.000000000000000000000000000000' LER MO-
               DS
         ST    15,0(14)           STORE LER MODS IN CBMR
         AEND
.*
&SYN_A   SETB  0
&SYN_N   SETB  0
&SYN_L   SETB  0
         AIF   ('&SYNAD(1)' NE '' AND '&SYNAD(1)' NE '0')
         LHI   14,CBMRXL_SYNAD    EXLST SYNAD ADDRESS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&SYNAD(1)'(1,1) EQ '(')
               AIF ('&SYNAD(1)' EQ '(0)'   OR                          X
               '&SYNAD(1)'      EQ '(R0)'  OR                          X
               '&SYNAD(1)'      EQ '(1)'   OR                          X
               '&SYNAD(1)'      EQ '(R1)'  OR                          X
               '&SYNAD(1)'      EQ '(14)'  OR                          X
               '&SYNAD(1)'      EQ '(R14)' OR                          X
               '&SYNAD(1)'      EQ '(15)'  OR                          X
               '&SYNAD(1)'      EQ '(R15)')
         MNOTE 12,'MODCB SYNAD= INVALID REGISTER USE'
               AEND
         ST    &SYNAD(1),0(14)    STORE FIELD IN CBMR
            AELSE
         LARL  15,&SYNAD(1)       R15=SYNAD ADDRESS
         ST    15,0(14)           STORE SYNAD IN CBMR
            AEND
         AEND
.*
         AIF   (N'&SYNAD GT 1)
         LHI   14,CBMRXL_SYN_MODS EXLST SYNAD MODIFIERS
         BRAS  15,MODCBS&SYSNDX   FIND VERB
&SYNCNT  SETA  2
.SYNLPEG ANOP
            AIF   (&SYNCNT GT N'&SYNAD).SYNDNEG
            AIF   ('&SYNAD(&SYNCNT)' EQ 'A')
&SYN_A   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' EQ 'N')
&SYN_N   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' EQ 'L')
&SYN_L   SETB  1
            AEND
            AIF   ('&SYNAD(&SYNCNT)' NE 'A' AND                        X
               '&SYNAD(&SYNCNT)'  NE 'N' AND                           X
               '&SYNAD(&SYNCNT)'  NE 'L')
         MNOTE 12,'SYNAD INVALID MODIFIER - &SYNAD(&SYNCNT)'
            AEND
&SYNCNT  SETA  &SYNCNT+1
            AGO   .SYNLPEG
.*
.SYNDNEG ANOP
            AIF   (&SYN_L)
         MNOTE 12,'SYNAD MODIFIER L IS NOT SUPPORTED'
            AEND
            AIF   (&SYN_A AND &SYN_N)
         MNOTE 12,'SYNAD MODIFIERS A AND N ARE MUTUALLY EXCLUSIVE'
         MNOTE 12,'      NO ACTION TAKEN'
&SYN_A   SETB  0
&SYN_N   SETB  0
            AEND
         IILF  15,B'&SYN_A&SYN_N.000000000000000000000000000000' SYN MO-
               DS
         ST    15,0(14)           STORE SYN MODS IN CBMR
         AEND
.*
.EXLMFG  ANOP
         IIHF  1,C'&MF(1)'        R1 HIGH=MF
         LRL   15,=V(ZVSAM19C)    R15=CB PROCESSOR
         BASR  14,15              CALL IT
*
         AIF   ('&MF(1)' EQ 'G')
         MEXIT
         AEND
         AIF   ('&MF(1)' EQ 'E')
         J     MODCBE&SYSNDX      EXIT
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
MODCBS&SYSNDX DS 0H
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
MODCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    MODCBF&SYSNDX      EXIT IF IT IS
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,MODCBL&SYSNDX    LOOP
*
         J     MODCB8&SYSNDX      ERROR IF NOT FOUND
*
MODCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,MODCBSV&SYSNDX  R14=NO. OF VERBS
         SR    14,0               R14=VERB POSITION
         SLL   14,2               *4
         A     14,MODCBSV&SYSNDX+4 +A(CBMRBODY)
         A     14,MODCBSV&SYSNDX  +NO. OF VERBS=FIELD POSITION
         BR    15                 RETURN
*
MODCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (FIELD NOT FOUND)
MODCBE&SYSNDX DS 0H
         MEXIT
         AEND
.*
.DORPL   ANOP
.*************
.* MODCB RPL *
.*************
         AIF   ('&EXLST' NE '')
         MNOTE 12,'EXLST IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&DDNAME' NE '')
         MNOTE 12,'DDNAME IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&PASSWD' NE '')
         MNOTE 12,'PASSWD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MACRF' NE '')
         MNOTE 12,'MACRF IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFND' NE '')
         MNOTE 12,'BUFND IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFNI' NE '')
         MNOTE 12,'BUFNI IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BUFSP' NE '')
         MNOTE 12,'BUFSP IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RMODE31' NE '')
         MNOTE 12,'RMODE31 IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&STRNO' NE '')
         MNOTE 12,'STRNO IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&BSTRNO' NE '')
         MNOTE 12,'BSTRNO IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&SHRPOOL' NE '')
         MNOTE 12,'SHRPOOL IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&EODAD' NE '')
         MNOTE 12,'EODAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&LERAD' NE '')
         MNOTE 12,'LERAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&SYNAD' NE '')
         MNOTE 12,'SYNAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT AN RPL PARAMETER'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT AN RPL PARAMETER'
         AEND
.*
.* CHECK RPL UNSUPPORTED FIELDS
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&ACB'(1,1) EQ '(')
         MNOTE 12,'MODCB ACB= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&AREA'(1,1) EQ '(')
         MNOTE 12,'MODCB AREA= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&ARG'(1,1) EQ '(')
         MNOTE 12,'MODCB ARG= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&ECB'(1,1) EQ '(')
         MNOTE 12,'MODCB ECB= REGISTER NOTATION NOT ALLOWED WITH MF=L'
            AEND
            AIF   ('&MSGAREA'(1,1) EQ '(')
         MNOTE 12,'MODCB MSGAREA= REGISTER NOTATION NOT ALLOWED WITH MF-
               =L'
            AEND
            AIF   ('&NXTRPL'(1,1) EQ '(')
         MNOTE 12,'MODCB NXTRPL= REGISTER NOTATION NOT ALLOWED WITH MF=-
               L'
            AEND
         AEND
         AIF   ('&KEYLEN' NE '')
            AIF   (&KEYLEN GT 255)
         MNOTE 12,'MODCB RPL KEYLEN GT 255 - &KEYLEN'
            AEND
         AEND
         AIF   ('&MSGLEN' NE '')
            AIF   (&MSGLEN GT 65535)
         MNOTE 12,'MSGLEN GT 65535 - &MSGLEN'
            AEND
         AEND
.* DON'T NEED TO GEN A CBMR FOR MF=E
         AIF   ('&MF(1)' EQ 'E').RPLMFEG
.* COUNT NO. OF FIELDS
&FIELDS  SETA  1                  ALLOW FOR RPL=
         AIF   (T'&OPTCD NE 'O')
&FIELDS  SETA  &FIELDS+1
         ZGENOPTD OPTCD=&OPTCD,MODE=MODCB GENERATE 4-BYTE OPTCD
         AEND
         AIF   ('&ACB' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&AREA' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&AREALEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&ARG' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&ECB' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&MSGAREA' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&NXTRPL' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&RECLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&MSGLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&KEYLEN' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
&BRAS    SETA  0
         AIF   ('&MF(1)' EQ 'I' OR T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+&FIELDS+&FIELDS*4
         MNOTE 0,'&BRAS &FIELDS &TOTSIZE'
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         MNOTE 0,'&RESID'
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
         MNOTE 0,'&RESID'
&TOTSIZE SETA  &TOTSIZE+&RESID
         MNOTE 0,'&TOTSIZE'
         AEND
.*
         AIF   ('&MF(1)' EQ 'I' OR T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRRPL+CBMRMOD) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS)       CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         DC    AL1(CBMRRPL_RPL)
         AIF   (T'&OPTCD NE 'O')
         DC    AL1(CBMRRPL_OPTCD)
         AEND
         AIF   ('&ACB' NE '')
         DC    AL1(CBMRRPL_ACB)
         AEND
         AIF   ('&AREA' NE '')
         DC    AL1(CBMRRPL_RECAREA)
         AEND
         AIF   ('&AREALEN' NE '')
         DC    AL1(CBMRRPL_AREALEN)
         AEND
         AIF   ('&ARG' NE '')
         DC    AL1(CBMRRPL_ARG)
         AEND
         AIF   ('&KEYLEN' NE '')
         DC    AL1(CBMRRPL_KEYLEN)
         AEND
         AIF   ('&ECB' NE '')
         DC    AL1(CBMRRPL_ECB)
         AEND
         AIF   ('&MSGAREA' NE '')
         DC    AL1(CBMRRPL_MSGAREA)
         AEND
         AIF   ('&MSGLEN' NE '')
         DC    AL1(CBMRRPL_MSGLEN)
         AEND
         AIF   ('&NXTRPL' NE '')
         DC    AL1(CBMRRPL_NEXTRPL)
         AEND
         AIF   ('&RECLEN' NE '')
         DC    AL1(CBMRRPL_RECLEN)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS         HEADER+NO. OF VERBS
&I       SETA  1
.*
         DC    AL4(&RPL)
         AIF   ('&RPL'(1,1) EQ '(')
            AIF ('&RPL' EQ '(0)'   OR                                  X
               '&RPL'   EQ '(R0)'  OR                                  X
               '&RPL'   EQ '(1)'   OR                                  X
               '&RPL'   EQ '(R1)'  OR                                  X
               '&RPL'   EQ '(14)'  OR                                  X
               '&RPL'   EQ '(R14)' OR                                  X
               '&RPL'   EQ '(15)'  OR                                  X
               '&RPL'   EQ '(R15)')
         MNOTE 12,'MODCB RPL= INVALID REGISTER USE'
            AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&RPL'
&I       SETA  &I+1
         AEND
&OFFSET  SETA  &OFFSET+4
.*
         AIF   (T'&OPTCD NE 'O')
         DC    B'&ZGENOPT1'
         DC    B'&ZGENOPT2'
         DC    B'&ZGENOPT3'
         DC    B'&ZGENOPT4'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ACB' NE '')
         DC    AL4(&ACB)
            AIF   ('&ACB'(1,1) EQ '(')
               AIF ('&ACB' EQ '(0)'   OR                               X
                  '&ACB'   EQ '(R0)'  OR                               X
                  '&ACB'   EQ '(1)'   OR                               X
                  '&ACB'   EQ '(R1)'  OR                               X
                  '&ACB'   EQ '(14)'  OR                               X
                  '&ACB'   EQ '(R14)' OR                               X
                  '&ACB'   EQ '(15)'  OR                               X
                  '&ACB'   EQ '(R15)')
            MNOTE 12,'MODCB ACB= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ACB'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&AREA' NE '')
         DC    AL4(&AREA)
            AIF   ('&AREA'(1,1) EQ '(')
               AIF ('&AREA' EQ '(0)'  OR                               X
                  '&AREA'  EQ '(R0)'  OR                               X
                  '&AREA'  EQ '(1)'   OR                               X
                  '&AREA'  EQ '(R1)'  OR                               X
                  '&AREA'  EQ '(14)'  OR                               X
                  '&AREA'  EQ '(R14)' OR                               X
                  '&AREA'  EQ '(15)'  OR                               X
                  '&AREA'  EQ '(R15)')
            MNOTE 12,'MODCB AREA= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&AREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&AREALEN' NE '')
         DC    AL4(&AREALEN)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ARG' NE '')
         DC    AL4(&ARG)
            AIF   ('&ARG'(1,1) EQ '(')
               AIF ('&ARG' EQ '(0)'   OR                               X
                  '&ARG'   EQ '(R0)'  OR                               X
                  '&ARG'   EQ '(1)'   OR                               X
                  '&ARG'   EQ '(R1)'  OR                               X
                  '&ARG'   EQ '(14)'  OR                               X
                  '&ARG'   EQ '(R14)' OR                               X
                  '&ARG'   EQ '(15)'  OR                               X
                  '&ARG'   EQ '(R15)')
            MNOTE 12,'MODCB ARG= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ARG'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&KEYLEN' NE '')
         DC    AL4(&KEYLEN)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&ECB' NE '')
         DC    AL4(&ECB)
            AIF   ('&ECB'(1,1) EQ '(')
               AIF ('&ECB' EQ '(0)'   OR                               X
                  '&ECB'   EQ '(R0)'  OR                               X
                  '&ECB'   EQ '(1)'   OR                               X
                  '&ECB'   EQ '(R1)'  OR                               X
                  '&ECB'   EQ '(14)'  OR                               X
                  '&ECB'   EQ '(R14)' OR                               X
                  '&ECB'   EQ '(15)'  OR                               X
                  '&ECB'   EQ '(R15)')
            MNOTE 12,'MODCB ECB= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ECB'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&MSGAREA' NE '')
         DC    AL4(&MSGAREA)
            AIF   ('&MSGAREA'(1,1) EQ '(')
               AIF ('&MSGAREA' EQ '(0)' OR                             X
                  '&MSGAREA' EQ '(R0)'  OR                             X
                  '&MSGAREA' EQ '(1)'   OR                             X
                  '&MSGAREA' EQ '(R1)'  OR                             X
                  '&MSGAREA' EQ '(14)'  OR                             X
                  '&MSGAREA' EQ '(R14)' OR                             X
                  '&MSGAREA' EQ '(15)'  OR                             X
                  '&MSGAREA' EQ '(R15)')
            MNOTE 12,'MODCB MSGAREA= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&MSGAREA'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&MSGLEN' NE '')
         DC    AL4(&MSGLEN)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&NXTRPL' NE '')
         DC    AL4(&NXTRPL)
            AIF   ('&NXTRPL'(1,1) EQ '(')
               AIF ('&NXTRPL' EQ '(0)' OR                              X
                  '&NXTRPL' EQ '(R0)'  OR                              X
                  '&NXTRPL' EQ '(1)'   OR                              X
                  '&NXTRPL' EQ '(R1)'  OR                              X
                  '&NXTRPL' EQ '(14)'  OR                              X
                  '&NXTRPL' EQ '(R14)' OR                              X
                  '&NXTRPL' EQ '(15)'  OR                              X
                  '&NXTRPL' EQ '(R15)')
            MNOTE 12,'MODCB NXTRPL= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&NXTRPL'
            AEND
         AEND
.*
         AIF   ('&RECLEN' NE '')
         DC    AL4(&RECLEN)
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
&I       SETA  1
.RPLRGLP ANOP
         AIF   (&I GT 10).RPLRGDN
         AIF   (&OFFREG(&I) NE 0)
            AIF   (NOT &RPLHAND)
* HANDLE REGISTER NOTATION
&RPLHAND SETB  1
            AEND
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
         AEND
&I       SETA  &I+1
         AGO   .RPLRGLP
.*
.RPLRGDN ANOP
         AIF   ('&MF(1)' EQ 'L' OR '&MF(1)' EQ 'G').RPLMFL
.*
.* PROCESS RPL MF=I
         LR    1,15               R1=CBMR ADDRESS
         IIHF  1,C'&MF(1)'        R1 HIGH=MF
         LRL   15,=V(ZVSAM19C)    R15=CB PROCESSOR
         BASR  14,15              CALL IT
*
         MEXIT
.*
.RPLMFL  ANOP
.* PROCESS RPL MODCB MF=L
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'MODCB RPL NO LABEL FOR CBMR'
         AEND
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB RPL MF= INVALID REGISTER USE'
            AEND
            AIF   ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LARL  1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').RPLMFEG
.*
         AIF   (T'&MF(2) NE 'O')
         SR    15,15              RC=0
         AEND
         MEXIT
.*
.RPLMFEG ANOP
.* PROCESS MODCB RPL MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* CALL ZVSAM19C TO MODIFY THE RPL
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'MODCB RPL MF=E/G SECOND PARAMETER MISSING'
         AEND
.*
         AIF   ('&MF(1)' EQ 'G').RPLMFG
.*
         AIF ('&MF(2)'(1,1) EQ '(')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB RPL MF= INVALID REGISTER USE'
            AEND
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AELSE
         LARL  1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
.* MF=E
.* MODIFY THE CBMR
         USING CBMR,1
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
MODCBSV&SYSNDX DS 0H
         DS    2AL4               SAVE AREA
         STM   0,1,MODCBSV&SYSNDX SAVE R0-R1
.*
         AIF   ('&ACB' NE '')
         LHI   14,CBMRRPL_ACB     RPL ACB VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&ACB'(1,1) EQ '(')
               AIF ('&ACB' EQ '(0)'   OR                               X
               '&ACB'      EQ '(R0)'  OR                               X
               '&ACB'      EQ '(1)'   OR                               X
               '&ACB'      EQ '(R1)'  OR                               X
               '&ACB'      EQ '(14)'  OR                               X
               '&ACB'      EQ '(R14)' OR                               X
               '&ACB'      EQ '(15)'  OR                               X
               '&ACB'      EQ '(R15)')
         MNOTE 12,'MODCB ACB= INVALID REGISTER USE'
               AEND
         ST    &ACB,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,&ACB            R15=ACB ADDRESS
         ST    15,0(14)           STORE ACB IN CBMR
            AEND
         AEND
.*
         AIF   ('&AREA' NE '')
         LHI   14,CBMRRPL_RECAREA RPL AREA VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&AREA'(1,1) EQ '(')
               AIF ('&AREA' EQ '(0)'   OR                              X
               '&AREA'      EQ '(R0)'  OR                              X
               '&AREA'      EQ '(1)'   OR                              X
               '&AREA'      EQ '(R1)'  OR                              X
               '&AREA'      EQ '(14)'  OR                              X
               '&AREA'      EQ '(R14)' OR                              X
               '&AREA'      EQ '(15)'  OR                              X
               '&AREA'      EQ '(R15)')
         MNOTE 12,'MODCB AREA= INVALID REGISTER USE'
               AEND
         ST    &AREA,0(14)        STORE FIELD IN CBMR
            AELSE
         LARL  15,&AREA           R15=AREA ADDRESS
         ST    15,0(14)           STORE AREA IN CBMR
            AEND
         AEND
.*
         AIF   ('&AREALEN' NE '')
         LHI   14,CBMRRPL_AREALEN RPL AREALEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&AREALEN        R15=AREA LENGTH
         ST    15,0(14)           STORE AREALEN IN CBMR
         AEND
.*
         AIF   ('&ARG' NE '')
         LHI   14,CBMRRPL_ARG     RPL ARG VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&ARG'(1,1) EQ '(')
               AIF ('&ARG' EQ '(0)'   OR                               X
               '&ARG'      EQ '(R0)'  OR                               X
               '&ARG'      EQ '(1)'   OR                               X
               '&ARG'      EQ '(R1)'  OR                               X
               '&ARG'      EQ '(14)'  OR                               X
               '&ARG'      EQ '(R14)' OR                               X
               '&ARG'      EQ '(15)'  OR                               X
               '&ARG'      EQ '(R15)')
         MNOTE 12,'MODCB ARG= INVALID REGISTER USE'
               AEND
         ST    &ARG,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,&ARG            R15=ARG ADDRESS
         ST    15,0(14)           STORE ARG IN CBMR
            AEND
         AEND
.*
         AIF   ('&ECB' NE '')
         LHI   14,CBMRRPL_ECB     RPL ECB VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&ECB'(1,1) EQ '(')
               AIF ('&ECB' EQ '(0)'   OR                               X
               '&ECB'      EQ '(R0)'  OR                               X
               '&ECB'      EQ '(1)'   OR                               X
               '&ECB'      EQ '(R1)'  OR                               X
               '&ECB'      EQ '(14)'  OR                               X
               '&ECB'      EQ '(R14)' OR                               X
               '&ECB'      EQ '(15)'  OR                               X
               '&ECB'      EQ '(R15)')
         MNOTE 12,'MODCB ECB= INVALID REGISTER USE'
               AEND
         ST    &ECB,0(14)         STORE FIELD IN CBMR
            AELSE
         LARL  15,&ECB            R15=ECB ADDRESS
         ST    15,0(14)           STORE ECB IN CBMR
            AEND
         AEND
.*
         AIF   ('&KEYLEN' NE '')
         LHI   14,CBMRRPL_KEYLEN  RPL KEYLEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&KEYLEN         R15=KEY LENGTH
         ST    15,0(14)           STORE KEY LENGTH IN CBMR
         AEND
.*
         AIF   ('&MSGAREA' NE '')
         LHI   14,CBMRRPL_MSGAREA RPL MSGAREA VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&MSGAREA'(1,1) EQ '(')
               AIF ('&MSGAREA' EQ '(0)'   OR                           X
               '&MSGAREA'      EQ '(R0)'  OR                           X
               '&MSGAREA'      EQ '(1)'   OR                           X
               '&MSGAREA'      EQ '(R1)'  OR                           X
               '&MSGAREA'      EQ '(14)'  OR                           X
               '&MSGAREA'      EQ '(R14)' OR                           X
               '&MSGAREA'      EQ '(15)'  OR                           X
               '&MSGAREA'      EQ '(R15)')
         MNOTE 12,'MODCB MSGAREA= INVALID REGISTER USE'
               AEND
         ST    &MSGAREA,0(14)     STORE FIELD IN CBMR
            AELSE
         LARL  15,&MSGAREA        R15=MSGAREA ADDRESS
         ST    15,0(14)           STORE MSGAREA IN CBMR
            AEND
         AEND
.*
         AIF   ('&MSGLEN' NE '')
         LHI   14,CBMRRPL_MSGLEN RPL MSGLEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&MSGLEN         R15=MSG LENGTH
         ST    15,0(14)           STORE MSGLEN IN CBMR
         AEND
.*
         AIF   ('&NXTRPL' NE '')
         LHI   14,CBMRRPL_NEXTRPL RPL NXTRPL VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&NXTRPL'(1,1) EQ '(')
               AIF ('&NXTRPL' EQ '(0)'   OR                            X
               '&NXTRPL'      EQ '(R0)'  OR                            X
               '&NXTRPL'      EQ '(1)'   OR                            X
               '&NXTRPL'      EQ '(R1)'  OR                            X
               '&NXTRPL'      EQ '(14)'  OR                            X
               '&NXTRPL'      EQ '(R14)' OR                            X
               '&NXTRPL'      EQ '(15)'  OR                            X
               '&NXTRPL'      EQ '(R15)')
         MNOTE 12,'MODCB NXTRPL= INVALID REGISTER USE'
               AEND
         ST    &NXTRPL,0(14)      STORE FIELD IN CBMR
            AELSE
         LARL  15,&NXTRPL         R15=NXTRPL ADDRESS
         ST    15,0(14)           STORE NXTRPL IN CBMR
            AEND
         AEND
.*
         AIF   ('&OPTCD' NE '')
         LHI   14,CBMRRPL_OPTCD RPL OPTCD VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         J     *+8                BYPASS CONSTANTS
         ZGENOPTD OPTCD=&OPTCD,MODE=MODCB GENERATE 4-BYTE OPTCD
         DC    B'&ZGENOPT1'
         DC    B'&ZGENOPT2'
         DC    B'&ZGENOPT3'
         DC    B'&ZGENOPT4'
         MVC   0(4,14),4(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&RECLEN' NE '')
         LHI   14,CBMRRPL_RECLEN RPL RECLEN VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&RECLEN         R15=RECORD LENGTH
         ST    15,0(14)           STORE RECLEN IN CBMR
         AEND
*
.RPLMFG  ANOP
         IIHF  1,C'&MF(1)'        R1 HIGH=MF
         LRL   15,=V(ZVSAM19C)    R15=CB PROCESSOR
         BASR  14,15              CALL IT
*
         AIF   ('&MF(1)' EQ 'G')
         MEXIT
         AEND
         AIF   ('&MF(1)' EQ 'E')
         J     MODCBE&SYSNDX      EXIT
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
MODCBS&SYSNDX DS 0H
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
MODCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    MODCBF&SYSNDX      EXIT IF IT IS
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,MODCBL&SYSNDX    LOOP
*
         J     MODCB8&SYSNDX      ERROR IF NOT FOUND
*
MODCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,MODCBSV&SYSNDX  R14=NO. OF VERBS
         SR    14,0               R14=VERB POSITION
         SLL   14,2               *4
         A     14,MODCBSV&SYSNDX+4 +A(CBMRBODY)
         A     14,MODCBSV&SYSNDX  +NO. OF VERBS=FIELD POSITION
         BR    15                 RETURN
*
MODCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (FIELD NOT FOUND)
MODCBE&SYSNDX DS 0H
         MEXIT
         AEND
.*
.DOACB   ANOP
&RMODEBF SETB 0
.*************
.* MODCB ACB *
.*************
         AIF   ('&AREA' NE '')
         MNOTE 12,'AREA IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&AREALEN' NE '')
         MNOTE 12,'AREALEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&ARG' NE '')
         MNOTE 12,'ARG IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&ECB' NE '')
         MNOTE 12,'ECB IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&KEYLEN' NE '')
         MNOTE 12,'KEYLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&MSGAREA' NE '')
         MNOTE 12,'MSGAREA IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&MSGLEN' NE '')
         MNOTE 12,'MSGLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&NXTRPL' NE '')
         MNOTE 12,'NXTRPL IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&OPTCD' NE '')
         MNOTE 12,'OPTCD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RECLEN' NE '')
         MNOTE 12,'RECLEN IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RPL' NE '')
         MNOTE 12,'RPL IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&TRANSID' NE '')
         MNOTE 12,'TRANSID IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&EODAD' NE '')
         MNOTE 12,'EODAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&LERAD' NE '')
         MNOTE 12,'LERAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&SYNAD' NE '')
         MNOTE 12,'SYNAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&JRNAD' NE '')
         MNOTE 12,'JRNAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&UPAD' NE '')
         MNOTE 12,'UPAD IS NOT AN ACB PARAMETER'
         AEND
         AIF   ('&RLSWAIT' NE '')
         MNOTE 12,'RLSWAIT IS NOT AN ACB PARAMETER'
         AEND
.*
.* CHECK ACB UNSUPPORTED FIELDS
         AIF   ('&MAREA' NE '')
         MNOTE 12,'MAREA IS NOT SUPPORTED'
         AEND
         AIF   ('&MLEN' NE '')
         MNOTE 12,'MLEN IS NOT SUPPORTED'
         AEND
         AIF   ('&RLSREAD' NE '')
         MNOTE 12,'RLSREAD IS NOT SUPPORTED'
         AEND
.*
         AIF   ('&MF(1)' EQ 'L')
            AIF   ('&PASSWD'(1,1) EQ '(')
         MNOTE 12,'MODCB PASSWD= REGISTER NOTATION NOT ALLOWED WITH MF=-
               L'
            AEND
            AIF   ('&EXLST'(1,1) EQ '(')
         MNOTE 12,'MODCB EXLST= REGISTER NOTATION NOT ALLOWED WITH MF=L-
               '
            AEND
         AEND
         AIF   ('&BSTRNO' NE '')
            AIF   (&BSTRNO GT 255)
         MNOTE 12,'MODCB ACB BSTRNO GT 255 - &BSTRNO'
            AEND
         AEND
         AIF   ('&BUFND' NE '')
            AIF   (&BUFND GT 65535)
         MNOTE 12,'MODCB ACB BUFND GT 65535 - &BUFND'
            AEND
         AEND
         AIF   ('&BUFNI' NE '')
            AIF   (&BUFNI GT 65535)
         MNOTE 12,'MODCB ACB BUFNI GT 65535 - &BUFNI'
            AEND
         AEND
         AIF   ('&RMODE31' EQ ''     OR                                X
               '&RMODE31'  EQ 'ALL'  OR                                X
               '&RMODE31'  EQ 'BUFF' OR                                X
               '&RMODE31'  EQ 'CB'   OR                                X
               '&RMODE31'  EQ 'NONE').RMODEOK
         MNOTE 12,'MODCB ACB INVALID RMODE31 - &RMODE31'
.RMODEOK ANOP
         AIF   ('&SHRPOOL' NE '')
            AIF   (&SHRPOOL GT 255)
         MNOTE 12,'MODCB ACB SHRPOOL GT 255 - &SHRPOOL'
            AEND
         AEND
         AIF   ('&STRNO' NE '')
            AIF   (&STRNO GT 255)
         MNOTE 12,'MODCB ACB STRNO GT 255 - &STRNO'
            AEND
         AEND
.* DON'T NEED TO GEN A CBMR FOR MF=E
         AIF   ('&MF(1)' EQ 'E').ACBMFEG
.* COUNT NO. OF FIELDS
&FIELDS  SETA  1                  ALLOW FOR ACB=
         AIF   ('&BSTRNO' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFND' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFNI' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&BUFSP' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&DDNAME' NE '')
&FIELDS  SETA  &FIELDS+2
&BYTE8   SETA  &BYTE8+1
         AEND
         AIF   ('&EXLST' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   (T'&MACRF NE 'O')
&FIELDS  SETA  &FIELDS+1
         ZGENMACF MACRF=&MACRF,MODE=MODCB GENERATE 4-BYTE MACRF
         AEND
         AIF   ('&PASSWD' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&RMODE31' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&SHRPOOL' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
         AIF   ('&STRNO' NE '')
&FIELDS  SETA  &FIELDS+1
         AEND
&BRAS    SETA  0
         AIF   ('&MF(1)' EQ 'I' OR T'&MF(2) NE 'O')
&BRAS    SETA  4
         AEND
.* (BRAS) 15(CBMR HEADER) &FIELDS-&BYTE8(BYTE CODES) &FIELDS*4(FIELDS)
&TOTSIZE SETA  &BRAS+15+(&FIELDS-&BYTE8)+&FIELDS*4
&RESID   SETA  (&TOTSIZE-(&TOTSIZE/4)*4)
         AIF   (&RESID NE 0)
&RESID   SETA  4-&RESID
&TOTSIZE SETA  &TOTSIZE+&RESID
         AEND
.*
         AIF   ('&MF(1)' EQ 'I' OR T'&MF(2) NE 'O')
         BRAS  15,*+&TOTSIZE
         AEND
         DC    C'CBMR'            CBMREYE
         DC    AL1(CBMRACB+CBMRMOD) CBMRREQ
         DC    AL1(0)             CBMRRMOD
         DC    AL1(&FIELDS-&BYTE8) CBMRVRBS
         DC    AL4(0)             CBMRWORK
         DC    AL2(0)             CBMRLEN
         DC    AL2(&TOTSIZE-&BRAS) CBMRSIZE
* LIST OF VERB CODES
         DC    AL1(CBMRACB_ACB)
         AIF   ('&BSTRNO' NE '')
         DC    AL1(CBMRACB_BSTRNO)
         AEND
         AIF   ('&BUFND' NE '')
         DC    AL1(CBMRACB_BUFND)
         AEND
         AIF   ('&BUFNI' NE '')
         DC    AL1(CBMRACB_BUFNI)
         AEND
         AIF   ('&BUFSP' NE '')
         DC    AL1(CBMRACB_BUFSP)
         AEND
         AIF   ('&DDNAME' NE '')
         DC    AL1(CBMRACB_DDNM)
         AEND
         AIF   ('&EXLST' NE '')
         DC    AL1(CBMRACB_EXLST)
         AEND
         AIF   ('&RMODE31' NE '')
         DC    AL1(CBMRACB_RMODE31)
         AEND
         AIF   (T'&MACRF NE 'O')
         DC    AL1(CBMRACB_MACRF)
         AEND
         AIF   ('&PASSWD' NE '')
         DC    AL1(CBMRACB_PASSWD)
         AEND
         AIF   ('&SHRPOOL' NE '')
         DC    AL1(CBMRACB_SHRPL)
         AEND
         AIF   ('&STRNO' NE '')
         DC    AL1(CBMRACB_STRNO)
         AEND
* LIST OF FIELD VALUES IN SAME ORDER AS VERB CODES
&OFFSET  SETA  15+&FIELDS-&BYTE8  HEADER+NO. OF VERBS
&I       SETA  1
.*
         DC    AL4(&ACB)
         AIF   ('&ACB'(1,1) EQ '(')
            AIF ('&ACB' EQ '(0)'   OR                                  X
               '&ACB'   EQ '(R0)'  OR                                  X
               '&ACB'   EQ '(1)'   OR                                  X
               '&ACB'   EQ '(R1)'  OR                                  X
               '&ACB'   EQ '(14)'  OR                                  X
               '&ACB'   EQ '(R14)' OR                                  X
               '&ACB'   EQ '(15)'  OR                                  X
               '&ACB'   EQ '(R15)')
         MNOTE 12,'MODCB ACB= INVALID REGISTER USE'
            AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&ACB'
&I       SETA  &I+1
         AEND
&OFFSET  SETA  &OFFSET+4
.*
         AIF   ('&BSTRNO' NE '')
         DC    AL4(&BSTRNO)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFND' NE '')
         DC    AL4(&BUFND)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFNI' NE '')
         DC    AL4(&BUFNI)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&BUFSP' NE '')
         DC    AL4(&BUFSP)
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&DDNAME' NE '')
         DC    CL8'&DDNAME'
&OFFSET  SETA  &OFFSET+8
         AEND
.*
         AIF   ('&EXLST' NE '')
         DC    AL4(&EXLST)
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF ('&EXLST' EQ '(0)' OR                               X
                  '&EXLST' EQ '(R0)'  OR                               X
                  '&EXLST' EQ '(1)'   OR                               X
                  '&EXLST' EQ '(R1)'  OR                               X
                  '&EXLST' EQ '(14)'  OR                               X
                  '&EXLST' EQ '(R14)' OR                               X
                  '&EXLST' EQ '(15)'  OR                               X
                  '&EXLST' EQ '(R15)')
            MNOTE 12,'MODCB EXLST= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&EXLST'
&I       SETA  &I+1
            AEND
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&RMODE31' EQ 'ALL' OR '&RMODE31' EQ 'BUFF')
.* RMODEBF IS PASSED TO ZGENMACF
&RMODEBF SETB 1
         AEND
         AIF   ('&RMODE31' EQ 'ALL')
         DC    X'80000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'BUFF')
         DC    X'40000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'CB')
         DC    X'20000000'
&OFFSET  SETA  &OFFSET+4
         AEND
         AIF   ('&RMODE31' EQ 'NONE')
         DC    X'10000000'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   (T'&MACRF NE 'O')
         DC    B'&ZGENMACF1'
         DC    B'&ZGENMACF2'
         DC    B'&ZGENMACF3'
         DC    B'&ZGENMACF4'
&OFFSET  SETA  &OFFSET+4
         AEND
.*
         AIF   ('&PASSWD' NE '')
         DC    AL4(&PASSWD)
            AIF   ('&PASSWD'(1,1) EQ '(')
               AIF ('&PASSWD' EQ '(0)' OR                              X
                  '&PASSWD' EQ '(R0)' OR                               X
                  '&PASSWD' EQ '(1)'  OR                               X
                  '&PASSWD' EQ '(R1)' OR                               X
                  '&PASSWD' EQ '(14)' OR                               X
                  '&PASSWD' EQ '(R14)' OR                              X
                  '&PASSWD' EQ '(15)' OR                               X
                  '&PASSWD' EQ '(R15)')
            MNOTE 12,'MODCB PASSWD= INVALID REGISTER USE'
               AEND
&OFFREG(&I) SETA &OFFSET
&OFFCHR(&I) SETC '&PASSWD'
            AEND
         AEND
.*
         AIF   ('&SHRPOOL' NE '')
         DC    AL4(&SHRPOOL)
         AEND
.*
         AIF   ('&STRNO' NE '')
         DC    AL4(&STRNO)
         AEND
.*
         AIF   (&RESID NE 0)
         DC    &RESID.X'00'       ALIGN
         AEND
.*
&I       SETA  1
.ACBRGLP ANOP
         AIF   (&I GT 10).ACBRGDN
         AIF   (&OFFREG(&I) NE 0)
            AIF   (NOT &ACBHAND)
* HANDLE REGISTER NOTATION
&ACBHAND SETB  1
            AEND
         ST    &OFFCHR(&I),&OFFREG(&I).(1) STORE REGISTER INTO CBMR
         AEND
&I       SETA  &I+1
         AGO   .ACBRGLP
.*
.ACBRGDN ANOP
         AIF   ('&MF(1)' EQ 'L' OR '&MF(1)' EQ 'G').ACBMFL
.*
.* PROCESS ACB MF=I
         LR    1,15               R1=CBMR ADDRESS
         IIHF  1,C'&MF(1)'        R1 HIGH=MF
         LRL   15,=V(ZVSAM19C)    R15=CB PROCESSOR
         BASR  14,15              CALL IT
*
         MEXIT
.*
.ACBMFL  ANOP
.* PROCESS ACB MODCB MF=L
         AIF   (T'&MF(2) EQ 'O' AND '&N' EQ '')
         MNOTE 12,'MODCB ACB NO LABEL FOR CBMR'
         AEND
         AIF   (T'&MF(2) NE 'O')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB ACB MF= INVALID REGISTER USE'
            AEND
            AIF   ('&MF(2)'(1,1) EQ '(')
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AELSE
         LARL  1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
            AEND
         MVC   0(&TOTSIZE-&BRAS,1),0(15) MOVE TO REQUESTED AREA
         AEND
.*
         AIF   (T'&MF(3) NE 'O')
&MF(3)   EQU   &TOTSIZE-&BRAS
         AEND
.*
         CBMR
.*
         AIF   ('&MF(1)' EQ 'G').ACBMFEG
.*
         AIF   (T'&MF(2) NE 'O')
         SR    15,15              RC=0
         AEND
         MEXIT
.*
.ACBMFEG ANOP
.* PROCESS MODCB ACB MF=E/G
.*   FOR MF=G ONLY THE PREP CODING IS DONE
.* FOR EACH PARAMETER SPECIFIED, SEARCH THE CBMR FOR THE ENTRY
.* WHEN FOUND, MOVE THE NEW VALUE INTO THE CBMR
.* CALL ZVSAM19C TO MODIFY THE ACB
         AIF   (T'&MF(2) EQ 'O')
         MNOTE 12,'MODCB ACB MF=E/G SECOND PARAMETER MISSING'
         AEND
.*
         AIF   ('&MF(1)' EQ 'G').ACBMFG
.*
         AIF   ('&MF(2)'(1,1) EQ '(')
            AIF ('&MF(2)' EQ '(0)'   OR                                X
               '&MF(2)'   EQ '(R0)'  OR                                X
               '&MF(2)'   EQ '(1)'   OR                                X
               '&MF(2)'   EQ '(R1)'  OR                                X
               '&MF(2)'   EQ '(14)'  OR                                X
               '&MF(2)'   EQ '(R14)' OR                                X
               '&MF(2)'   EQ '(15)'  OR                                X
               '&MF(2)'   EQ '(R15)')
            MNOTE 12,'MODCB ACB MF= INVALID REGISTER USE'
            AEND
         LR    1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AELSE
         LARL  1,&MF(2)           R1=CBMR STRUCTURE ADDRESS
         AEND
.* MF=E
.* MODIFY THE CBMR
         USING CBMR,1
         LLC   0,CBMRVRBS         R0=NO. OF VERBS
         LA    1,CBMRBODY         R1=ADDRESS OF VERBS
         DROP  1
         BRAS  15,*+12            BRANCH AROUND SAVE AREA
MODCBSV&SYSNDX DS 0H
         DS    2AL4
         STM   0,1,MODCBSV&SYSNDX SAVE R0-R1
.*
         AIF   ('&BSTRNO' NE '')
         LHI   14,CBMRACB_BSTRNO  ACB BSTRNO VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&BSTRNO         R15=BSTRNO
         ST    15,0(14)           STORE BSTRNO IN CBMR
         AEND
.*
         AIF   ('&BUFND' NE '')
         LHI   14,CBMRACB_BUFND   ACB BUFND VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&BUFND          R15=BUFND
         ST    15,0(14)           STORE BUFND IN CBMR
         AEND
.*
         AIF   ('&BUFNI' NE '')
         LHI   14,CBMRACB_BUFNI   ACB BUFNI VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&BUFNI          R15=BUFNI
         ST    15,0(14)           STORE BUFNI IN CBMR
         AEND
.*
         AIF   ('&BUFSP' NE '')
         LHI   14,CBMRACB_BUFSP   ACB BUFSP VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&BUFSP          R15=BUFSP
         ST    15,0(14)           STORE BUFSP IN CBMR
         AEND
.*
         AIF   ('&DDNAME' NE '')
         LHI   14,CBMRACB_DDNM    ACB DDNAME VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         LARL  15,=CL8'&DDNAME'   BASE-FREE
         MVC   0(8,14),0(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&EXLST' NE '')
         LHI   14,CBMRACB_EXLST   ACB EXLST VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&EXLST'(1,1) EQ '(')
               AIF ('&EXLST' EQ '(0)'   OR                             X
               '&EXLST'      EQ '(R0)'  OR                             X
               '&EXLST'      EQ '(1)'   OR                             X
               '&EXLST'      EQ '(R1)'  OR                             X
               '&EXLST'      EQ '(14)'  OR                             X
               '&EXLST'      EQ '(R14)' OR                             X
               '&EXLST'      EQ '(15)'  OR                             X
               '&EXLST'      EQ '(R15)')
         MNOTE 12,'MODCB EXLST= INVALID REGISTER USE'
               AEND
         ST    &EXLST,0(14)       STORE FIELD IN CBMR
            AELSE
         LARL  15,&EXLST          R15=EXLST ADDRESS
         ST    15,0(14)           STORE EXLST IN CBMR
            AEND
         AEND
.*
         AIF   ('&RMODE31' EQ 'ALL')
&RMODEBF SETB 1
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,X'80000000'     R15=RMODE31
         ST    15,0(14)           STORE RMODE31 IN CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'BUFF')
&RMODEBF SETB 1
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,X'40000000'     R15=RMODE31
         ST    15,0(14)           STORE RMODE31 IN CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'CB')
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,X'20000000'     R15=RMODE31
         ST    15,0(14)           STORE RMODE31 IN CBMR
         AEND
.*
         AIF   ('&RMODE31' EQ 'NONE')
         LHI   14,CBMRACB_RMODE31 ACB RMODE31 VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,X'10000000'     R15=RMODE31
         ST    15,0(14)           STORE RMODE31 IN CBMR
         AEND
.*
         AIF   ('&MACRF' NE '')
         LHI   14,CBMRACB_MACRF   ACB MACRF VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         J     *+8                BYPASS CONSTANTS
         ZGENMACF MACRF=&MACRF,MODE=MODCB GENERATE 4-BYTE MACRF
         DC    B'&ZGENMACF1'
         DC    B'&ZGENMACF2'
         DC    B'&ZGENMACF3'
         DC    B'&ZGENMACF4'
         MVC   0(4,14),4(15)      MOVE FIELD TO CBMR
         AEND
.*
         AIF   ('&PASSWD' NE '')
         LHI   14,CBMRACB_PASSWD  ACB PASSWD VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
            AIF   ('&PASSWD'(1,1) EQ '(')
               AIF ('&PASSWD' EQ '(0)'   OR                            X
               '&PASSWD'      EQ '(R0)'  OR                            X
               '&PASSWD'      EQ '(1)'   OR                            X
               '&PASSWD'      EQ '(R1)'  OR                            X
               '&PASSWD'      EQ '(14)'  OR                            X
               '&PASSWD'      EQ '(R14)' OR                            X
               '&PASSWD'      EQ '(15)'  OR                            X
               '&PASSWD'      EQ '(R15)')
         MNOTE 12,'MODCB PASSWD= INVALID REGISTER USE'
               AEND
         ST    &PASSWD,0(14)      STORE FIELD IN CBMR
            AELSE
         LARL  15,&PASSWD         R15=PASSWORD ADDRESS
         ST    15,0(14)           STORE PASSWORD IN CBMR
            AEND
         AEND
.*
         AIF   ('&SHRPOOL' NE '')
         LHI   14,CBMRACB_SHRPL   ACB SHRPOOL VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&SHRPOOL        R15=SHRPOOL
         ST    15,0(14)           STORE SHRPOOL IN CBMR
         AEND
.*
         AIF   ('&STRNO' NE '')
         LHI   14,CBMRACB_STRNO   ACB STRNO VERB
         BRAS  15,MODCBS&SYSNDX   FIND VERB
         IILF  15,&STRNO          R15=STRNO
         ST    15,0(14)           STORE STRNO IN CBMR
         AEND
.*
.ACBMFG  ANOP
         IIHF  1,C'&MF(1)'        R1 HIGH=MF
         LRL   15,=V(ZVSAM19C)    R15=CB PROCESSOR
         BASR  14,15              CALL IT
*
         AIF   ('&MF(1)' EQ 'G')
         MEXIT
         AEND
         AIF   ('&MF(1)' EQ 'E')
         J     MODCBE&SYSNDX      EXIT
*
* VERB SEARCH SUBROUTINE, RC=8 IF NOT FOUND
MODCBS&SYSNDX DS 0H
         SGR   1,1                CLEAR R1 HIGH
         LM    0,1,MODCBSV&SYSNDX RESTORE R0-R1 (NO. & ADDR OF VERBS)
MODCBL&SYSNDX DS 0H
         CLM   14,B'0001',0(1)    THIS VERB ?
         JE    MODCBF&SYSNDX      EXIT IF IT IS
         AIH   1,4                ASSUME 4-BYTE FIELD
         CLI   0(1),X'E0'         8-BYTE FIELD ?
         JL    *+10               EXIT IF NOT
         AIH   1,4                8-BYTE FIELD
         AHI   1,1                BUMP VERB POINTER
         BRCT  0,MODCBL&SYSNDX    LOOP
*
         J     MODCB8&SYSNDX      ERROR IF NOT FOUND
*
MODCBF&SYSNDX DS 0H
* FIELD LOCATE
         L     14,MODCBSV&SYSNDX+4 14=ADDRESS OF VERB CODES (CBMRBODY)
         A     14,MODCBSV&SYSNDX  +NO. OF VERBS=START OF FIELDS
         SRLG  1,1,32             R1=FIELD OFFSET
         AR    14,1               R14=FIELD POSITION
         BR    15                 RETURN
*
MODCB8&SYSNDX DS 0H
         LA    15,8               RC=8 (FIELD NOT FOUND)
MODCBE&SYSNDX DS 0H
         MEXIT
         AEND
.*
         MEND
