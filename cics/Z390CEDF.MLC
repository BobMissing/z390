***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
         DFHEISTG
PARSE1   DS    CL4                TERM
PARSE2   DS    CL4                ON, OFF, SEND
EDFQUEUE DS    CL8                RETRIEVED QUEUE
EDFRCLEN DS    H                  RECEIVE AREA LENGTH
EDFRCVE  DS    CL2000             RECEIVE AREA
EDFWKS   DS    (EDFWKSL)X         MAP STRUCTURE FOR WORKING STORAGE
*
Z390CEDF DFHEIENT CODEREG=(R12,R3)
*
* INPUT FORMATS:
*    CEDF         )
*    CEDF ,ON     ) SINGLE TERMINAL NOT YET SUPPORTED
*    CEDF ,OFF    )
*
*    CEDF term
*    CEDF term,ON
*    CEDF term,OFF
*    PF3 FROM A CEDF SCREEN WILL ALSO TURN CEDF OFF
*
*    CEDX NOT YET SUPPORTED...WE MAY NOT NEED IT
*
*    CEDZ IS AN INTERNAL TRANSID:
*       SET EDF ON/OFF AT INVOKED TERMINAL
*       RECEIVE EDF MAP STRUCTURES FROM THE INVOKED TERMINAL
*
         CLI   TCTTETYP,C'E'      CEDZ IS IC STARTED ?
         BNE   NOTIC              EXIT IF NOT
* CEDZ IS IC STARTED
         EXEC  CICS IGNORE CONDITION LENGERR
         MVC   EDFRCLEN,=X'7FFF'  SET RETRIEVED LENGTH TO MAX
         EXEC  CICS RETRIEVE RTERMID(TCTTEEDT) RTRANSID(PARSE2)        X
                    INTO(EDFRCVE) LENGTH(EDFRCLEN) QUEUE(EDFQUEUE)
* RECEIVED AREA MAY NOW INCLUDE THE DSA
* LENGTH CHECK
         CHHSI EDFRCLEN,2000      WITHIN LENGTH ?
         BNH   LENOK              EXIT IF IT IS
         DC    H'0'               ADJUST EDFRCVE
*
LENOK    EQU   *
         CLC   PARSE2(2),=C'ON'   IS IT ON ?
         BNE   CEDFOFF            EXIT IF NOT
* TURN CEDF ON AT INVOKED TERMINAL
         EXEC  CICS SEND FROM(EDFON) LENGTH(EDFONL)
         MVI   TCTTEEDF,X'FF'     TURN EDF ON
         EXEC  CICS RETURN
*
CEDFOFF  EQU   *
         CLC   PARSE2(3),=C'OFF'  IS IT OFF ?
         BNE   CEDFSEND           EXIT IF NOT
* TURN CEDF OFF AT INVOKED TERMINAL
         MVI   TCTTEEDF,X'00'     TURN EDF OFF
         XC    TCTTEEDT,TCTTEEDT  CLEAR INVOKING TERMID
         B     RETURN             EXIT
*
CEDFSEND EQU   *
         CLC   PARSE2,=C'SEND'    IS IT SEND ?
         BE    DOSEND             EXIT IF IT IS
         DC    H'0'               CANNOT OCCUR
DOSEND   EQU   *
         LA    R4,EDFRCVE         ADDRESS MAP STRUCTURE
* MAP STRUCTURE HAS ARRIVED FROM INVOKED TERMINAL
* FOR TASK TERMINATION, NO LOCK IS HELD
* IT'S UP TO THE APPLICATION TO INVOKE ANOTHER INTERCEPT
         CLC   EDFQUEUE(6),=C'0E08KC' TASK TERMINATION ?
         BNE   NOTTERM            EXIT IF NOT
         USING EDFKCPS,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDFKCP') ERASE
         DROP  R4
         B     RETURN             EXIT
*
NOTTERM  EQU   *
* SAVE AND CONVERT DATA TO EBCDIC, EACH SCREEN IS DIFFERENT
         MVI   CURRMODE,C'R'      SET SAVE AND CONVERT TO EBCDIC
         MVI   INPUT,DFHPF2       SET AS PF2
         BAL   R7,KEYHUNT         PROCESS THE KEY
*
* RECEIVE AND ANALYZE RESPONSE
*
* PRESSING ENTER TOO EARLY MAY CAUSE THE CANCEL TO RAISE NOTFND
         EXEC CICS HANDLE CONDITION NOTFND(RECEIVE)
RECEIVE  EQU   *
         EXEC  CICS RECEIVE INTO(INPUT) LENGTH(LENINPUT)
         CLI   INPUT,DFHENTER     IS IT ENTER ?
         BNE   NOTENTER           EXIT IF NOT
* ENTER: CANCEL THE HOLDING DELAY
         EXEC  CICS CANCEL REQID(CEDFRQID)
         B     RETURN             EXIT
*
NOTENTER EQU   *
         CLI   INPUT,DFHPF3       IS IT PF3 ?
         BNE   OTHERPFK           EXIT IF NOT
* PF3  : CANCEL THE HOLDING DELAY AND TURN OFF EDF
         EXEC  CICS CANCEL REQID(CEDFRQID) EDFOFF
         MVC   EDFPF3TM,EDFREQTM  SET INVOKED TERMID
         EXEC  CICS SEND FROM(EDFPF3) LENGTH(EDFPF3L)
         B     RETURN             EXIT
*
OTHERPFK EQU   *
* EACH PF KEY MAY HAVE A UNIQUE PROCESS FOR THAT SCREEN
* INVOKE THE ROUTINE THAT MATCHES THE SCREEN AND KEY
         BAL   R7,KEYHUNT         PROCESS THE KEY
         B     RECEIVE            EXIT
*
NOTIC    EQU   *
         L     R6,TCTTEDA         INITIAL TIOA (NULL TERMINATED)
         AHI   R6,3               MISS AID, CURSOR ADDRESS
         CLI   0(R6),SBA          PRECEDING SBA ?
         BNE   NOSBA              EXIT IF NOT
         AHI   R6,3               MISS SBA
NOSBA    EQU   *
         AHI   R6,4               MISS CEDF
         XC    PARSE1(8),PARSE1   CLEAR PARSE AREAS
* FIND START OF 1ST PARM
* R6=CURRENT LOCATION
FRSTPARM EQU   *
         CLI   0(R6),X'00'        TIOA DONE ?
         BE    PARSERR1           EXIT IF NO TERM FOUND
         CLI   0(R6),C','         START OF NEXT PARM ?
         BE    PARSERR1           EXIT IF NO TERM FOUND
         CLI   0(R6),C' '         FIND BLANK ?
         BNE   FOUND1ST           EXIT WHEN PARM FOUND
         AHI   R6,1               BUMP TIOA POINTER
         B     FRSTPARM           LOOP
*
FOUND1ST EQU   *
         LA    R7,PARSE1          PARM ADDRESS
         BAL   R14,EXTRACT        EXTRACT PARM
*
* FIND 2ND PARM
*
         CLI   0(R6),X'00'        END OF TIOA ?
         BE    PROCESS            EXIT IF 2ND PARM NOT FOUND
         CLI   0(R6),C','         END OF 1ST PARM ?
         BNE   PARSERR2           ERROR, 1ST PARM NOT FOLLOWED BY COMMA
         AHI   R6,1               MISS COMMA
         LA    R7,PARSE2          PARM ADDRESS
         BAL   R14,EXTRACT        EXTRACT PARM
*
PROCESS  EQU   *
         OC    PARSE1,=4C' '      CONVERT 1ST PARM TO UPPER CASE
         OC    PARSE2,=4C' '      CONVERT 2ND PARM TO UPPER CASE
* VALIDATE TERMID
         CLC   PARSE1,TCTTETI     OUR TERMID ?
         BE    PARSERR1           ERROR IF IT IS
         CLC   PARSE1(3),TCTTETI  OUR TERMID PREFIX ?
         BNE   PARSERR2           ERROR IF NOT
* VALIDATE 2ND PARM
         CLC   PARSE2,=4C' '      ANY 2ND PARM ?
         BNE   CHKPARM2           EXIT IF OK
         MVC   PARSE2(2),=C'ON'   DEFAULT TO ,ON
         B     PARM2OK            EXIT
*
CHKPARM2 EQU   *
         CLC   PARSE2(2),=C'ON'   IS IT ON ?
         BE    PARM2OK            EXIT IF IT IS
         CLC   PARSE2(3),=C'OFF'  IS IT OFF ?
         BNE   PARSERR2           ERROR IF NOT
PARM2OK  EQU   *
* START CEDZ ON THE INVOKED TERMINAL
*    RTERMID  HAS OUR TERMID
*    RTRANSID HAS 'ON  ' OR 'OFF '
         EXEC  CICS START TRANSID('CEDZ')                              X
                    TERMID(PARSE1) RTERMID(TCTTETI) RTRANSID(PARSE2)   X
                    QUEUE('DUMMY')
         MVC   EDFREQTM,PARSE1    SET TERMID IN MESSAGE
         EXEC  CICS SEND FROM(EDFREQ) LENGTH(EDFREQL)
         B     RETURN             EXIT
*
* ERROR ROUTINES
*
PARSERR1 EQU   *
         EXEC  CICS SEND FROM(ERRMSG1) LENGTH(ERR1LEN)
         B     RETURN             EXIT
*
PARSERR2 EQU   *
         EXEC  CICS SEND FROM(ERRMSG2) LENGTH(ERR2LEN)
RETURN   EQU   *
         EXEC  CICS RETURN
*
* SUBROUTINES
*
EXTRACT  EQU   *
* EXTRACT PARM
* R6=1ST PARM CHAR
* R7=PARM LOCATION
         SR    R8,R8              ZERO PARM LENGTH
EXTRLOOP EQU   *
         CLI   0(R6),X'00'        END OF PARM ?
         BER   R14                RETURN IF IT IS
         CLI   0(R6),C','         END OF PARM ?
         BER   R14                RETURN IF IT IS
         CHI   R8,4               TOO MANY CHARS ?
         BE    PARSERR2           YES, ERROR IF OVER 4 CHARS
         MVC   0(1,R7),0(R6)      MOVE PARM CHAR
         AHI   R6,1               BUMP TIOA POINTER
         AHI   R7,1               BUMP PARM POINTER
         AHI   R8,1               COUNT THEM
         B     EXTRLOOP           LOOP
*
KEYHUNT  DS    0H
         LARL  R5,KEYTAB          R5=KEY TABLE
KEYLOOP  EQU   *
         CLC   0(6,R5),EDFQUEUE   OUR SCREEN ?
         BNE   KEYINCR            EXIT IF NOT
         CLC   6(1,R5),INPUT      OUR KEY ?
         BNE   KEYINCR            EXIT IF NOT
* MATCH
         L     R6,7(R5)           R6=PROCESSING ROUTINE
         BR    R6                 GO TO IT
*
KEYINCR  EQU   *
         AHI   R5,11              BUMP KEYTAB POINTER
         CLI   0(R5),X'FF'        STOPPER ?
         BE    RECEIVE            EXIT IF IT IS
         B     KEYLOOP            LOOP
         LTORG
*
CEDFRQID DC    C'!!CEDF!!'        DELAY REQID
*
EDFREQ   EQU   *
         TN3270 ESC,WRT_EW,WCC_KD,(SBA,2,1)
         DC    C'EDF REQUEST SENT TO TERMINAL '
EDFREQTM DS    CL4
EDFREQL  DC    AL2(*-EDFREQ)
*
EDFON    EQU   *
         TN3270 WCC_KD
         TN3270 (SBA,2,1)
         DC    C'THIS TERMINAL: EDF MODE ON'
EDFONL   DC    AL2(*-EDFON)
*
EDFPF3   EQU   *
         TN3270 ESC,WRT_EW,WCC_KD,(SBA,2,1)
         DC    C'EDF TURNED OFF AT TERMINAL '
EDFPF3TM DS    CL4
EDFPF3L  DC    AL2(*-EDFPF3)
*
ERRMSG1  EQU   *
         TN3270 WCC_KD
         TN3270 (SBA,2,1)
         DC    C'SINGLE TERMINAL OPERATION NOT YET SUPPORTED'
ERR1LEN  DC    AL2(*-ERRMSG1)
*
ERRMSG2  EQU   *
         TN3270 WCC_KD
         TN3270 (SBA,2,1)
         DC    C'INVALID PARAMETER'
ERR2LEN  DC    AL2(*-ERRMSG2)
*
INPUT    DS    XL4
LENINPUT DS    XL2
*
CURRMODE DC    C'R'               R=SAVE AND CONVERT TO EBCDIC
*                                 E=CONVERT TO EBCDIC
*                                 A=CONVERT TO ASCII
*                                 H=CONVERT TO HEX
*
KEYTAB   DS    0H
* TABLE OF SCREEN ID, KEY AND PROCESSING ROUTINE
* ADDRESS
         DC    C'0202  ',AL1(DFHCLEAR),AL4(K20202)
         DC    C'0202  ',AL1(DFHPF2),AL4(K20202)
         DC    C'0202  ',AL1(DFHPF5),AL4(K50202)
* HANDLE CONDITION
         DC    C'0204  ',AL1(DFHCLEAR),AL4(K20204)
         DC    C'0204  ',AL1(DFHPF2),AL4(K20204)   INITIALIZE ONLY
         DC    C'0204  ',AL1(DFHPF5),AL4(K50204)
         DC    C'0204  ',AL1(DFHPF7),AL4(K70204)
         DC    C'0204  ',AL1(DFHPF8),AL4(K80204)
         DC    C'0204  ',AL1(DFHPF10),AL4(KA0204)
         DC    C'0204  ',AL1(DFHPF11),AL4(KB0204)
* HANDLE AID
         DC    C'0206  ',AL1(DFHCLEAR),AL4(K20206)
         DC    C'0206  ',AL1(DFHPF2),AL4(K20206)   INITIALIZE ONLY
         DC    C'0206  ',AL1(DFHPF5),AL4(K50206)
         DC    C'0206  ',AL1(DFHPF7),AL4(K70206)
         DC    C'0206  ',AL1(DFHPF8),AL4(K80206)
         DC    C'0206  ',AL1(DFHPF10),AL4(KA0206)
         DC    C'0206  ',AL1(DFHPF11),AL4(KB0206)
* IGNORE CONDITION
         DC    C'020A  ',AL1(DFHCLEAR),AL4(K2020A)
         DC    C'020A  ',AL1(DFHPF2),AL4(K2020A)   INITIALIZE ONLY
         DC    C'020A  ',AL1(DFHPF5),AL4(K5020A)
         DC    C'020A  ',AL1(DFHPF7),AL4(K7020A)
         DC    C'020A  ',AL1(DFHPF8),AL4(K8020A)
         DC    C'020A  ',AL1(DFHPF10),AL4(KA020A)
         DC    C'020A  ',AL1(DFHPF11),AL4(KB020A)
* PUSH HANDLE
         DC    C'020C  ',AL1(DFHCLEAR),AL4(K2020C)
         DC    C'020C  ',AL1(DFHPF2),AL4(K2020C)   INITIALIZE ONLY
         DC    C'020C  ',AL1(DFHPF5),AL4(K5020C)
* POP HANDLE
         DC    C'020E  ',AL1(DFHCLEAR),AL4(K2020E)
         DC    C'020E  ',AL1(DFHPF2),AL4(K2020E)   INITIALIZE ONLY
         DC    C'020E  ',AL1(DFHPF5),AL4(K5020E)
* RECEIVE
         DC    C'0402  ',AL1(DFHCLEAR),AL4(K20402)
         DC    C'0402  ',AL1(DFHPF2),AL4(K20402)
         DC    C'0402  ',AL1(DFHPF5),AL4(K50402)
* SEND
         DC    C'0404  ',AL1(DFHCLEAR),AL4(K20404)
         DC    C'0404  ',AL1(DFHPF2),AL4(K20404)
         DC    C'0404  ',AL1(DFHPF5),AL4(K50404)
* READ
         DC    C'0602  ',AL1(DFHCLEAR),AL4(K20602)
         DC    C'0602  ',AL1(DFHPF2),AL4(K20602)
         DC    C'0602  ',AL1(DFHPF5),AL4(K50602)
* STARTBR
         DC    C'060C  ',AL1(DFHCLEAR),AL4(K2060C)
         DC    C'060C  ',AL1(DFHPF2),AL4(K2060C)
         DC    C'060C  ',AL1(DFHPF5),AL4(K5060C)
* READNEXT
         DC    C'060E  ',AL1(DFHCLEAR),AL4(K2060E)
         DC    C'060E  ',AL1(DFHPF2),AL4(K2060E)
         DC    C'060E  ',AL1(DFHPF5),AL4(K5060E)
* READPREV
         DC    C'0610  ',AL1(DFHCLEAR),AL4(K20610)
         DC    C'0610  ',AL1(DFHPF2),AL4(K20610)
         DC    C'0610  ',AL1(DFHPF5),AL4(K50610)
* ENDBR
         DC    C'0612  ',AL1(DFHCLEAR),AL4(K20612)
         DC    C'0612  ',AL1(DFHPF2),AL4(K20612)   INITIALIZE ONLY
         DC    C'0612  ',AL1(DFHPF5),AL4(K50612)
* RESETBR
         DC    C'0614  ',AL1(DFHCLEAR),AL4(K20614)
         DC    C'0614  ',AL1(DFHPF2),AL4(K20614)
         DC    C'0614  ',AL1(DFHPF5),AL4(K50614)
* WRITEQ TS
         DC    C'0A02  ',AL1(DFHCLEAR),AL4(K20A02)
         DC    C'0A02  ',AL1(DFHPF2),AL4(K20A02)
         DC    C'0A02  ',AL1(DFHPF5),AL4(K50A02)
* READQ TS
         DC    C'0A04  ',AL1(DFHCLEAR),AL4(K20A04)
         DC    C'0A04  ',AL1(DFHPF2),AL4(K20A04)
         DC    C'0A04  ',AL1(DFHPF5),AL4(K50A04)
* DELETEQ TS
         DC    C'0A06  ',AL1(DFHCLEAR),AL4(K20A06)
         DC    C'0A06  ',AL1(DFHPF2),AL4(K20A06)
         DC    C'0A06  ',AL1(DFHPF5),AL4(K50A06)
* GETMAIN
         DC    C'0C02  ',AL1(DFHCLEAR),AL4(K20C02)
         DC    C'0C02  ',AL1(DFHPF2),AL4(K20C02)   INITIALIZE ONLY
         DC    C'0C02  ',AL1(DFHPF5),AL4(K50C02)
* FREEMAIN
         DC    C'0C04  ',AL1(DFHCLEAR),AL4(K20C04)
         DC    C'0C04  ',AL1(DFHPF2),AL4(K20C04)   INITIALIZE ONLY
         DC    C'0C04  ',AL1(DFHPF5),AL4(K50C04)
* LINK: 'AFTER': PROGRAM INITIATION
         DC    C'0E02IN',AL1(DFHCLEAR),AL4(K20E02IN)
         DC    C'0E02IN',AL1(DFHPF2),AL4(K20E02IN)
         DC    C'0E02IN',AL1(DFHPF5),AL4(K50E02IN)
* LINK: 'BEFORE' (NOT LEVEL0)
* LINK: 'AFTER' FAIL
         DC    C'0E02  ',AL1(DFHCLEAR),AL4(K20E02)
         DC    C'0E02  ',AL1(DFHPF2),AL4(K20E02)
         DC    C'0E02  ',AL1(DFHPF5),AL4(K50E02)
* XCTL: 'AFTER': PROGRAM INITIATION
         DC    C'0E04AF',AL1(DFHCLEAR),AL4(K20E02IN)
         DC    C'0E04AF',AL1(DFHPF2),AL4(K20E02IN)
         DC    C'0E04AF',AL1(DFHPF5),AL4(K50E02IN)
* XCTL: 'BEFORE'
* XCTL: 'AFTER' FAIL
         DC    C'0E04  ',AL1(DFHCLEAR),AL4(K20E04)
         DC    C'0E04  ',AL1(DFHPF2),AL4(K20E04)
         DC    C'0E04  ',AL1(DFHPF5),AL4(K50E04)
* LOAD
         DC    C'0E06  ',AL1(DFHCLEAR),AL4(K20E06)
         DC    C'0E06  ',AL1(DFHPF2),AL4(K20E06)   INITIALIZE ONLY
         DC    C'0E06  ',AL1(DFHPF5),AL4(K50E06)
* RETURN: 'BEFORE'
         DC    C'0E08  ',AL1(DFHCLEAR),AL4(K20E08)
         DC    C'0E08  ',AL1(DFHPF2),AL4(K20E08)
         DC    C'0E08  ',AL1(DFHPF5),AL4(K50E08)
* RETURN: 'AFTER': PROGRAM TERMINATION
         DC    C'0E08PT',AL1(DFHCLEAR),AL4(K20E08PT)
         DC    C'0E08PT',AL1(DFHPF2),AL4(K20E08PT)
* RELEASE
         DC    C'0E0A  ',AL1(DFHCLEAR),AL4(K20E0A)
         DC    C'0E0A  ',AL1(DFHPF2),AL4(K20E0A)   INITIALIZE ONLY
         DC    C'0E0A  ',AL1(DFHPF5),AL4(K50E0A)
* HANDLE ABEND
         DC    C'0E0E  ',AL1(DFHCLEAR),AL4(K20E0E)
         DC    C'0E0E  ',AL1(DFHPF2),AL4(K20E0E)   INITIALIZE ONLY
         DC    C'0E0E  ',AL1(DFHPF5),AL4(K50E0E)
* ASKTIME
* ASKTIME ABSTIME
         DC    C'1002  ',AL1(DFHCLEAR),AL4(K21002)
         DC    C'1002  ',AL1(DFHPF2),AL4(K21002)   INITIALIZE ONLY
         DC    C'1002  ',AL1(DFHPF5),AL4(K51002)
* DELAY
         DC    C'1004  ',AL1(DFHCLEAR),AL4(K21004)
         DC    C'1004  ',AL1(DFHPF2),AL4(K21004)
         DC    C'1004  ',AL1(DFHPF5),AL4(K51004)
* START
         DC    C'1008  ',AL1(DFHCLEAR),AL4(K21008)
         DC    C'1008  ',AL1(DFHPF2),AL4(K21008)
         DC    C'1008  ',AL1(DFHPF5),AL4(K51008)
* RETRIEVE
         DC    C'100A  ',AL1(DFHCLEAR),AL4(K2100A)
         DC    C'100A  ',AL1(DFHPF2),AL4(K2100A)
         DC    C'100A  ',AL1(DFHPF5),AL4(K5100A)
* CANCEL
         DC    C'100C  ',AL1(DFHCLEAR),AL4(K2100C)
         DC    C'100C  ',AL1(DFHPF2),AL4(K2100C)
         DC    C'100C  ',AL1(DFHPF5),AL4(K5100C)
* ENQ
         DC    C'1204  ',AL1(DFHCLEAR),AL4(K21204)
         DC    C'1204  ',AL1(DFHPF2),AL4(K21204)
         DC    C'1204  ',AL1(DFHPF5),AL4(K51204)
* DEQ
         DC    C'1206  ',AL1(DFHCLEAR),AL4(K21206)
         DC    C'1206  ',AL1(DFHPF2),AL4(K21206)
         DC    C'1206  ',AL1(DFHPF5),AL4(K51206)
* RECEIVE MAP
         DC    C'1802  ',AL1(DFHCLEAR),AL4(K21802)
         DC    C'1802  ',AL1(DFHPF2),AL4(K21802)   INITIALIZE ONLY
         DC    C'1802  ',AL1(DFHPF5),AL4(K51802)
* SEND MAP
         DC    C'1804  ',AL1(DFHCLEAR),AL4(K21804)
         DC    C'1804  ',AL1(DFHPF2),AL4(K21804)   INITIALIZE ONLY
         DC    C'1804  ',AL1(DFHPF5),AL4(K51804)
* SEND CONTROL
         DC    C'1812  ',AL1(DFHCLEAR),AL4(K21812)
         DC    C'1812  ',AL1(DFHPF2),AL4(K21812)   INITIALIZE ONLY
         DC    C'1812  ',AL1(DFHPF5),AL4(K51812)
* DUMP TRANSACTION
         DC    C'1C02  ',AL1(DFHCLEAR),AL4(K21C02)
         DC    C'1C02  ',AL1(DFHPF2),AL4(K21C02)   INITIALIZE ONLY
         DC    C'1C02  ',AL1(DFHPF5),AL4(K51C02)
         DC    X'FF'              STOPPER
*
         DROP  R12
*
* KEY PROCESSING ROUTINES
*
K20202   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ADDRESS
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20202SN           EXIT IF IT IS
* ONLY 'AFTER' IS LIKELY TO HAVE INPUT AREAS FOR CONVERSION
         USING EDF0202S,R4
         MVI   E0202P2A,DFHBMASD  SET PF2 KEY OFF
         CLC   E0202STO+18(8),=C'COMPLETE' IS IT 'AFTER' ?
         BNE   K20202SM           EXIT IF NOT
* 'AFTER' ADDRESS
         CLI   E0202CMO,C'('      ANY COMMAREA DATA ?
         BNE   KPCWA06            EXIT IF NOT
* 'AFTER' ADDRESS AND COMMAREA DATA
         MVI   E0202P2A,DFHBMASB  SHOW PF2
         PACK  KPCOML6+4(4),E0202CHO+31(7) PACK COMMAREA LENGTH
         CVB   R8,KPCOML6         CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   KPMX06CR           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
KPMX06CR EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,KPCOML6         SAVE DISPLAY LENGTH-1
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20202EX           EXIT IF NOT
         EX    R8,KP06MVCR        SAVE COMMAREA DATA
         EX    R8,KP06TRCE        COMMAREA TO EBCDIC
         B     KPCWA06            EXIT
*
K20202EX EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPCOML6         RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP06CH             EXIT IF NOT
         EX    R8,KP06MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP06TRCA        COMMAREA TO ASCII
         B     KPCWA06            EXIT
*
KP06CH   EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP06CE             EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPCOML6         RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LA    R1,K20202TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20202SC        SOURCE ADDRESS
         XC    E0202CMO+1(69),E0202CMO+1 CLEAR COMMAREA DISPLAY
         MVHHI E0202CMO+1,C'X'''  MOVE X'
         LA    R14,E0202CMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   KP06LKC            EXIT IF NOT
         LA    R15,32             SET MAXIMUM
KP06LKC  EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0202CMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     KPCWA06            EXIT
*
KP06CE   EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPCOML6         RESTORE LENGTH FOR EX
         XC    E0202CMO+1(69),E0202CMO+1 CLEAR COMMAREA DISPLAY
         EX    R8,KP06MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP06TRCE        COMMAREA TO EBCDIC
         LA    R5,E0202CMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
KPCWA06  EQU   *
         CLI   E0202WMO,C'('      ANY CWA DATA ?
         BNE   KPEIB06            EXIT IF NOT
* 'AFTER' ADDRESS AND CWA DATA
         MVI   E0202P2A,DFHBMASB  SHOW PF2
         PACK  KPCWAL6+4(4),E0202WHO+31(7) PACK CWA LENGTH
         CVB   R8,KPCWAL6         CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   KPMX06WR           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
KPMX06WR EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,KPCWAL6         SAVE DISPLAY LENGTH-1
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   KP06W              EXIT IF NOT
         EX    R8,KP06MVWR        SAVE CWA DATA
         EX    R8,KP06TRWE        CWA TO EBCDIC
         B     KPEIB06            EXIT
*
KP06W    EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPCWAL6         RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP06WH             EXIT IF NOT
         EX    R8,KP06MVW         MOVE CWA DATA BACK
         EX    R8,KP06TRWA        CWA TO ASCII
         B     KPEIB06            EXIT
*
KP06WH   EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP06WE             EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPCWAL6         RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=CWA LENGTH
         LA    R1,K20202TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20202SW        SOURCE ADDRESS
         XC    E0202WMO+1(69),E0202WMO+1 CLEAR CWA DISPLAY
         MVHHI E0202WMO+1,C'X'''  MOVE X'
         LA    R14,E0202WMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   KP06LKW            EXIT IF NOT
         LA    R15,32             SET MAXIMUM
KP06LKW  EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0202WMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     KPEIB06            EXIT
*
KP06WE   EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPCWAL6         RESTORE LENGTH FOR EX
         XC    E0202WMO+1(69),E0202WMO+1 CLEAR CWA DISPLAY
         EX    R8,KP06MVW         MOVE CWA DATA BACK
         EX    R8,KP06TRWE        CWA TO EBCDIC
         LA    R5,E0202WMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET CWA CLOSE BRACKET
KPEIB06  EQU   *
         CLI   E0202EMO,C'('      ANY EIB DATA ?
         BNE   K20202SM           EXIT IF NOT
* 'AFTER' ADDRESS AND EIB DATA
         MVI   E0202P2A,DFHBMASB  SHOW PF2
         PACK  KPEIBL6+4(4),E0202EHO+31(7) PACK EIB LENGTH
         CVB   R8,KPEIBL6         CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   KPMX06ER           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
KPMX06ER EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,KPEIBL6         SAVE DISPLAY LENGTH-1
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   KP06E              EXIT IF NOT
         EX    R8,KP06MVER        SAVE EIB DATA
         EX    R8,KP06TREE        EIB TO EBCDIC
         B     K20202SM           EXIT
*
KP06E    EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPEIBL6         RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP06EH             EXIT IF NOT
         EX    R8,KP06MVE         MOVE EIB DATA BACK
         EX    R8,KP06TREA        EIB TO ASCII
         B     K20202SM           EXIT
*
KP06EH   EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP06EE             EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPEIBL6         RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=EIB LENGTH
         LA    R1,K20202TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20202SE        SOURCE ADDRESS
         XC    E0202EMO+1(69),E0202EMO+1 CLEAR EIB DISPLAY
         MVHHI E0202EMO+1,C'X'''  MOVE X'
         LA    R14,E0202EMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   KP06LKE            EXIT IF NOT
         LA    R15,32             SET MAXIMUM
KP06LKE  EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0202EMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20202SM           EXIT
*
KP06EE   EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,KPEIBL6         RESTORE LENGTH FOR EX
         XC    E0202EMO+1(69),E0202EMO+1 CLEAR EIB DISPLAY
         EX    R8,KP06MVE         MOVE EIB DATA BACK
         EX    R8,KP06TREE        EIB TO EBCDIC
         LA    R5,E0202EMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET EIB CLOSE BRACKET
K20202SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20202NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0202MDO,=CL6'EBCDIC' SET MODE
         B     K20202SN           EXIT
*
K20202NR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K20202NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E0202MDO,=CL6'ASCII' SET MODE
         B     K20202SN           EXIT
*
K20202NE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K20202NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E0202MDO,=CL6'HEX' SET MODE
         B     K20202SN           EXIT
*
K20202NA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0202MDO,=CL6'EBCDIC' SET MODE
K20202SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0202') ERASE
         BR    R7                 RETURN
*
KP06MVCR MVC   K20202SC(0),E0202CMO+1 SAVE COMMAREA DATA
KP06MVWR MVC   K20202SW(0),E0202WMO+1 SAVE CWA DATA
KP06MVER MVC   K20202SE(0),E0202EMO+1 SAVE EIB DATA
KP06TRCE TR    E0202CMO+1(0),K20202TE TRANSLATE COMMAREA TO EBCDIC
KP06TRWE TR    E0202WMO+1(0),K20202TE TRANSLATE CWA TO EBCDIC
KP06TREE TR    E0202EMO+1(0),K20202TE TRANSLATE EIB TO EBCDIC
KP06MVC  MVC   E0202CMO+1(0),K20202SC MOVE COMMAREA BACK
KP06MVW  MVC   E0202WMO+1(0),K20202SW MOVE CWA BACK
KP06MVE  MVC   E0202EMO+1(0),K20202SE MOVE EIB BACK
KP06TRCA TR    E0202CMO+1(0),K20202TA TRANSLATE COMMAREA TO ASCII
KP06TRWA TR    E0202WMO+1(0),K20202TA TRANSLATE CWA TO ASCII
KP06TREA TR    E0202EMO+1(0),K20202TA TRANSLATE EIB TO ASCII
*
KPCOML6  DC    PL8'0'
KPCWAL6  DC    PL8'0'
KPEIBL6  DC    PL8'0'
K20202SC DS    XL67               COMMAREA
K20202SW DS    XL67               CWA
K20202SE DS    XL67               EIB
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20202TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20202TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20202TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50202   DS    0H
         USING *,R6
* PF5  : ADDRESS
* WORKING STORAGE DISPLAY
         USING EDF0202S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0202TSO   MOVE TRANSID
         MVC   EWKSPGO,E0202PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0202TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0202SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0202L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20204   DS    0H
* HANDLE CONDITION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0204S,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF0204L        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO CDLOADPT(4), P0204CND(30), P0204ADR(30XL4)
         ST    R9,K20204AD        SAVE IT
         XC    K20204LT,K20204LT  CLEAR OFFSET OF TOP LINE
         XC    K20204NC,K20204NC  CLEAR NO. OF CONDITIONS
         LA    R5,4(R9)           R5=CONDITION CODES
* COUNT NO. OF CONDITIONS
         LA    R8,30              R8=MAX CONDITIONS
K20204CC EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K20204CD           EXIT IF IT IS
         ASI   K20204NC,1         COUNT NO. OF CONDITIONS
         AHI   R5,1               BUMP CONDITIONS POINTER
         JCT   R8,K20204CC        LOOP
*
K20204CD EQU   *
         LA    R5,4(R9)           R5=CONDITION CODES
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
K20204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K20204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K20204IN           EXIT IF NONE
         MVC   15(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K20204W2,0(R1)     SAVE ADDRESS
         UNPK  K20204W1(9),K20204W2(5) UNPACK ADDRESS
         TR    K20204W1(8),K20204TB-240 CONVERT TO DISPLAY HEX
         MVC   18(8,R7),K20204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K20204W2        SAVE OFFSET
         UNPK  K20204W1(9),K20204W2(5) UNPACK OFFSET
         TR    K20204W1(8),K20204TB-240 CONVERT TO DISPLAY HEX
         MVC   33(6,R7),K20204W1+2 MOVE OFFSET
K20204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K20204LP        LOOP
*
* SCREEN FULL
         B     K20204PK           EXIT
*
K20204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    15(25,R7),15(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K20204DN        LOOP
*
K20204PK EQU   *
* SET PAGING KEYS
* WE CAN ONLY GO FORWARD FROM HERE
         MVI   E0204P7A,DFHBMASD  SET PF7 DARK
         MVI   E0204P8A,DFHBMASD  SET PF8 DARK
         MVI   E0204PAA,DFHBMASD  SET PF10 DARK
         MVI   E0204PBA,DFHBMASD  SET PF11 DARK
         L     R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,K20204LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20204KB           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
K20204KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K20204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K20204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE
         BR    R2                 RETURN
*
K20204W1 DS    XL9
K20204W2 DS    XL4
K20204TB DC    C'0123456789ABCDEF'
K20204AD DS    A                  ADDRESS OF CONDITION AREA
K20204LT DS    XL4                OFFSET OF TOP LINE
K20204NC DS    XL4                NO. OF CONDITIONS
*
         LTORG
         DROP  R4,R6
*
K50204   DS    0H
         USING *,R6
* PF5  : HANDLE CONDITION
* WORKING STORAGE DISPLAY
         USING EDF0204S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0204TSO   MOVE TRANSID
         MVC   EWKSPGO,E0204PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0204TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0204SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0204L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K70204   DS    0H
         USING *,R6
* PF7  : 'AFTER' HANDLE CONDITION
* PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204P7A,DFHBMASD  IS PAGE BACKWARD HALF POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-6              - HALF PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-6*4            - HALF PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
K70204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K70204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K70204IN           EXIT IF NONE
         MVC   15(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K70204W2,0(R1)     SAVE ADDRESS
         UNPK  K70204W1(9),K70204W2(5) UNPACK ADDRESS
         TR    K70204W1(8),K70204TB-240 CONVERT TO DISPLAY HEX
         MVC   18(8,R7),K70204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K70204W2        SAVE OFFSET
         UNPK  K70204W1(9),K70204W2(5) UNPACK OFFSET
         TR    K70204W1(8),K70204TB-240 CONVERT TO DISPLAY HEX
         MVC   33(6,R7),K70204W1+2 MOVE OFFSET
K70204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K70204LP        LOOP
*
         B     K70204KP           EXIT
*
K70204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    15(25,R7),15(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K70204DN        LOOP
*
K70204KP EQU   *
         MVI   E0204P7A,DFHBMASD  SET PF7 DARK
         MVI   E0204P8A,DFHBMASB  SHOW PF8
         MVI   E0204PAA,DFHBMASD  SET PF10 DARK
         MVI   E0204PBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K70204K7           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
K70204K7 EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K70204KB           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
K70204KB EQU   *
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K70204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K70204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE
         BR    R2                 RETURN
*
K70204W1 DS    XL9
K70204W2 DS    XL4
K70204TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
K80204   DS    0H
         USING *,R6
* PF8  : 'AFTER' HANDLE CONDITION
* PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204P8A,DFHBMASD  IS PAGE FORWARD HALF POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,6               + HALF PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,6*4             + HALF PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
K80204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K80204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K80204IN           EXIT IF NONE
         MVC   15(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K80204W2,0(R1)     SAVE ADDRESS
         UNPK  K80204W1(9),K80204W2(5) UNPACK ADDRESS
         TR    K80204W1(8),K80204TB-240 CONVERT TO DISPLAY HEX
         MVC   18(8,R7),K80204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K80204W2        SAVE OFFSET
         UNPK  K80204W1(9),K80204W2(5) UNPACK OFFSET
         TR    K80204W1(8),K80204TB-240 CONVERT TO DISPLAY HEX
         MVC   33(6,R7),K80204W1+2 MOVE OFFSET
K80204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K80204LP        LOOP
*
         B     K80204KP           EXIT
*
K80204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    15(25,R7),15(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K80204DN        LOOP
*
K80204KP EQU   *
         MVI   E0204P7A,DFHBMASB  SHOW PF7
         MVI   E0204P8A,DFHBMASD  SET PF8 DARK
         MVI   E0204PAA,DFHBMASD  SET PF10 DARK
         MVI   E0204PBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K80204KA           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
K80204KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K80204KB           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
K80204KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K80204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K80204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE
         BR    R2                 RETURN
*
K80204W1 DS    XL9
K80204W2 DS    XL4
K80204TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
KA0204   DS    0H
         USING *,R6
* PF10 : 'AFTER' HANDLE CONDITION
* PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204PAA,DFHBMASD  IS PAGE BACKWARD FULL POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-12             - FULL PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-12*4           - FULL PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
KA0204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KA0204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KA0204IN           EXIT IF NONE
         MVC   15(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KA0204W2,0(R1)     SAVE ADDRESS
         UNPK  KA0204W1(9),KA0204W2(5) UNPACK ADDRESS
         TR    KA0204W1(8),KA0204TB-240 CONVERT TO DISPLAY HEX
         MVC   18(8,R7),KA0204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KA0204W2        SAVE OFFSET
         UNPK  KA0204W1(9),KA0204W2(5) UNPACK OFFSET
         TR    KA0204W1(8),KA0204TB-240 CONVERT TO DISPLAY HEX
         MVC   33(6,R7),KA0204W1+2 MOVE OFFSET
KA0204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KA0204LP        LOOP
*
         B     KA0204KP           EXIT
*
KA0204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    15(25,R7),15(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KA0204DN        LOOP
*
KA0204KP EQU   *
         MVI   E0204P7A,DFHBMASD  SET PF7 DARK
         MVI   E0204P8A,DFHBMASD  SET PF8 DARK
         MVI   E0204PAA,DFHBMASD  SET PF10 DARK
         MVI   E0204PBA,DFHBMASB  SHOW PF11
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA0204K8           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
KA0204K8 EQU   *
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA0204KA           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
KA0204KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA0204SN           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
KA0204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE
         BR    R2                 RETURN
*
KA0204W1 DS    XL9
KA0204W2 DS    XL4
KA0204TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
KB0204   DS    0H
         USING *,R6
* PF11 : 'AFTER' HANDLE CONDITION
* PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204PBA,DFHBMASD  IS PAGE FORWARD FULL POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,12              + FULL PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,12*4            + FULL PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
KB0204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KB0204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KB0204IN           EXIT IF NONE
         MVC   15(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KB0204W2,0(R1)     SAVE ADDRESS
         UNPK  KB0204W1(9),KB0204W2(5) UNPACK ADDRESS
         TR    KB0204W1(8),KB0204TB-240 CONVERT TO DISPLAY HEX
         MVC   18(8,R7),KB0204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KB0204W2        SAVE OFFSET
         UNPK  KB0204W1(9),KB0204W2(5) UNPACK OFFSET
         TR    KB0204W1(8),KB0204TB-240 CONVERT TO DISPLAY HEX
         MVC   33(6,R7),KB0204W1+2 MOVE OFFSET
KB0204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KB0204LP        LOOP
*
         B     KB0204KP           EXIT
*
KB0204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    15(25,R7),15(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KB0204DN        LOOP
*
KB0204KP EQU   *
         MVI   E0204P7A,DFHBMASD  SET PF7 DARK
         MVI   E0204P8A,DFHBMASD  SET PF8 DARK
         MVI   E0204PAA,DFHBMASB  SHOW PF10
         MVI   E0204PBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB0204K8           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
KB0204K8 EQU   *
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB0204KA           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
KB0204KA EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB0204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
KB0204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE
         BR    R2                 RETURN
*
KB0204W1 DS    XL9
KB0204W2 DS    XL4
KB0204TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
K20206   DS    0H
* HANDLE AID
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0206S,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF0206L        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO CDLOADPT(4), P0206ADS(30), P0206ADR(30XL4)
         ST    R9,K20206AD        SAVE IT
         XC    K20206LT,K20206LT  CLEAR OFFSET OF TOP LINE
         XC    K20206NC,K20206NC  CLEAR NO. OF AIDS
         LA    R5,4(R9)           R5=AID CODES
* COUNT NO. OF AIDS
         LA    R8,30              R8=MAX AIDS
K20206CC EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K20206CD           EXIT IF IT IS
         ASI   K20206NC,1         COUNT NO. OF AIDS
         AHI   R5,1               BUMP AIDS POINTER
         JCT   R8,K20206CC        LOOP
*
K20206CD EQU   *
         LA    R5,4(R9)           R5=AID CODES
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ANYKEY@(X'00000000')  +X'000000'
K20206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K20206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K20206IN           EXIT IF NONE
         MVC   9(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K20206W2,0(R1)     SAVE ADDRESS
         UNPK  K20206W1(9),K20206W2(5) UNPACK ADDRESS
         TR    K20206W1(8),K20206TB-240 CONVERT TO DISPLAY HEX
         MVC   12(8,R7),K20206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K20206W2        SAVE OFFSET
         UNPK  K20206W1(9),K20206W2(5) UNPACK OFFSET
         TR    K20206W1(8),K20206TB-240 CONVERT TO DISPLAY HEX
         MVC   27(6,R7),K20206W1+2 MOVE OFFSET
K20206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K20206LP        LOOP
*
* SCREEN FULL
         B     K20206PK           EXIT
*
K20206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    9(25,R7),9(R7)     CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K20206DN        LOOP
*
K20206PK EQU   *
* SET PAGING KEYS
* WE CAN ONLY GO FORWARD FROM HERE
         MVI   E0206P7A,DFHBMASD  SET PF7 DARK
         MVI   E0206P8A,DFHBMASD  SET PF8 DARK
         MVI   E0206PAA,DFHBMASD  SET PF10 DARK
         MVI   E0206PBA,DFHBMASD  SET PF11 DARK
         L     R14,K20206NC       R14=NO. OF AIDS
         S     R14,K20206LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20206KB           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
K20206KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K20206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K20206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE
         BR    R2                 RETURN
*
K20206W1 DS    XL9
K20206W2 DS    XL4
K20206TB DC    C'0123456789ABCDEF'
K20206AD DS    A                  ADDRESS OF AID AREA
K20206LT DS    XL4                OFFSET OF TOP LINE
K20206NC DS    XL4                NO. OF AIDS
*
         LTORG
         DROP  R4,R6
*
K50206   DS    0H
         USING *,R6
* PF5  : HANDLE AID
* WORKING STORAGE DISPLAY
         USING EDF0206S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0206TSO   MOVE TRANSID
         MVC   EWKSPGO,E0206PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0206TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0206SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0206L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K70206   DS    0H
         USING *,R6
* PF7  : 'AFTER' HANDLE AID
* PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206P7A,DFHBMASD  IS PAGE BACKWARD HALF POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-6              - HALF PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-6*4            - HALF PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ANYKEY@(X'00000000')  +X'000000'
K70206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K70206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K70206IN           EXIT IF NONE
         MVC   9(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K70206W2,0(R1)     SAVE ADDRESS
         UNPK  K70206W1(9),K70206W2(5) UNPACK ADDRESS
         TR    K70206W1(8),K70206TB-240 CONVERT TO DISPLAY HEX
         MVC   12(8,R7),K70206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K70206W2        SAVE OFFSET
         UNPK  K70206W1(9),K70206W2(5) UNPACK OFFSET
         TR    K70206W1(8),K70206TB-240 CONVERT TO DISPLAY HEX
         MVC   27(6,R7),K70206W1+2 MOVE OFFSET
K70206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K70206LP        LOOP
*
         B     K70206KP           EXIT
*
K70206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    9(25,R7),9(R7)     CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K70206DN        LOOP
*
K70206KP EQU   *
         MVI   E0206P7A,DFHBMASD  SET PF7 DARK
         MVI   E0206P8A,DFHBMASB  SHOW PF8
         MVI   E0206PAA,DFHBMASD  SET PF10 DARK
         MVI   E0206PBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K70206K7           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
K70206K7 EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K70206KB           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
K70206KB EQU   *
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K70206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K70206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE
         BR    R2                 RETURN
*
K70206W1 DS    XL9
K70206W2 DS    XL4
K70206TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
K80206   DS    0H
         USING *,R6
* PF8  : 'AFTER' HANDLE AID
* PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206P8A,DFHBMASD  IS PAGE FORWARD HALF POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,6               + HALF PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,6*4             + HALF PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ENTER@(X'00000000')  +X'000000'
K80206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K80206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K80206IN           EXIT IF NONE
         MVC   9(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K80206W2,0(R1)     SAVE ADDRESS
         UNPK  K80206W1(9),K80206W2(5) UNPACK ADDRESS
         TR    K80206W1(8),K80206TB-240 CONVERT TO DISPLAY HEX
         MVC   12(8,R7),K80206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K80206W2        SAVE OFFSET
         UNPK  K80206W1(9),K80206W2(5) UNPACK OFFSET
         TR    K80206W1(8),K80206TB-240 CONVERT TO DISPLAY HEX
         MVC   27(6,R7),K80206W1+2 MOVE OFFSET
K80206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K80206LP        LOOP
*
         B     K80206KP           EXIT
*
K80206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    9(25,R7),9(R7)     CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K80206DN        LOOP
*
K80206KP EQU   *
         MVI   E0206P7A,DFHBMASB  SHOW PF7
         MVI   E0206P8A,DFHBMASD  SET PF8 DARK
         MVI   E0206PAA,DFHBMASD  SET PF10 DARK
         MVI   E0206PBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K80206KA           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
K80206KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K80206KB           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
K80206KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K80206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K80206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE
         BR    R2                 RETURN
*
K80206W1 DS    XL9
K80206W2 DS    XL4
K80206TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
KA0206   DS    0H
         USING *,R6
* PF10 : 'AFTER' HANDLE AID
* PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206PAA,DFHBMASD  IS PAGE BACKWARD FULL POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-12             - FULL PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-12*4           - FULL PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ENTER@(X'00000000')  +X'000000'
KA0206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    KA0206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KA0206IN           EXIT IF NONE
         MVC   9(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KA0206W2,0(R1)     SAVE ADDRESS
         UNPK  KA0206W1(9),KA0206W2(5) UNPACK ADDRESS
         TR    KA0206W1(8),KA0206TB-240 CONVERT TO DISPLAY HEX
         MVC   12(8,R7),KA0206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KA0206W2        SAVE OFFSET
         UNPK  KA0206W1(9),KA0206W2(5) UNPACK OFFSET
         TR    KA0206W1(8),KA0206TB-240 CONVERT TO DISPLAY HEX
         MVC   27(6,R7),KA0206W1+2 MOVE OFFSET
KA0206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KA0206LP        LOOP
*
         B     KA0206KP           EXIT
*
KA0206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    9(25,R7),9(R7)     CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KA0206DN        LOOP
*
KA0206KP EQU   *
         MVI   E0206P7A,DFHBMASD  SET PF7 DARK
         MVI   E0206P8A,DFHBMASD  SET PF8 DARK
         MVI   E0206PAA,DFHBMASD  SET PF10 DARK
         MVI   E0206PBA,DFHBMASB  SHOW PF11
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA0206K8           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
KA0206K8 EQU   *
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA0206KA           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
KA0206KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA0206SN           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
KA0206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE
         BR    R2                 RETURN
*
KA0206W1 DS    XL9
KA0206W2 DS    XL4
KA0206TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
KB0206   DS    0H
         USING *,R6
* PF11 : 'AFTER' HANDLE AID
* PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206PBA,DFHBMASD  IS PAGE FORWARD FULL POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,12              + FULL PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,12*4            + FULL PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ANYKEY@(X'00000000')  +X'000000'
KB0206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    KB0206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KB0206IN           EXIT IF NONE
         MVC   9(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KB0206W2,0(R1)     SAVE ADDRESS
         UNPK  KB0206W1(9),KB0206W2(5) UNPACK ADDRESS
         TR    KB0206W1(8),KB0206TB-240 CONVERT TO DISPLAY HEX
         MVC   12(8,R7),KB0206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KB0206W2        SAVE OFFSET
         UNPK  KB0206W1(9),KB0206W2(5) UNPACK OFFSET
         TR    KB0206W1(8),KB0206TB-240 CONVERT TO DISPLAY HEX
         MVC   27(6,R7),KB0206W1+2 MOVE OFFSET
KB0206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KB0206LP        LOOP
*
         B     KB0206KP           EXIT
*
KB0206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    9(25,R7),9(R7)     CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KB0206DN        LOOP
*
KB0206KP EQU   *
         MVI   E0206P7A,DFHBMASD  SET PF7 DARK
         MVI   E0206P8A,DFHBMASD  SET PF8 DARK
         MVI   E0206PAA,DFHBMASB  SHOW PF10
         MVI   E0206PBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB0206K8           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
KB0206K8 EQU   *
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB0206KA           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
KB0206KA EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB0206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
KB0206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE
         BR    R2                 RETURN
*
KB0206W1 DS    XL9
KB0206W2 DS    XL4
KB0206TB DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R4,R6
*
K2020A   DS    0H
* IGNORE CONDITION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF020AS,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF020AL        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO CDLOADPT(4), P020ACND(30)
         ST    R9,K2020AAD        SAVE IT
         XC    K2020ALT,K2020ALT  CLEAR OFFSET OF TOP LINE
         XC    K2020ANC,K2020ANC  CLEAR NO. OF CONDITIONS
         LA    R5,4(R9)           R5=CONDITION CODES
* COUNT NO. OF CONDITIONS
         LA    R8,30              R8=MAX CONDITIONS
K2020ACC EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K2020ACD           EXIT IF IT IS
         ASI   K2020ANC,1         COUNT NO. OF CONDITIONS
         AHI   R5,1               BUMP CONDITIONS POINTER
         JCT   R8,K2020ACC        LOOP
*
K2020ACD EQU   *
         LA    R5,4(R9)           R5=CONDITION CODES
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
K2020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K2020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K2020ALP        LOOP
*
* SCREEN FULL
         B     K2020APK           EXIT
*
K2020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K2020ADN        LOOP
*
K2020APK EQU   *
* SET PAGING KEYS
* WE CAN ONLY GO FORWARD FROM HERE
         MVI   E020AP7A,DFHBMASD  SET PF7 DARK
         MVI   E020AP8A,DFHBMASD  SET PF8 DARK
         MVI   E020APAA,DFHBMASD  SET PF10 DARK
         MVI   E020APBA,DFHBMASD  SET PF11 DARK
         L     R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,K2020ALT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K2020AKB           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
K2020AKB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K2020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K2020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE
         BR    R2                 RETURN
*
K2020AAD DS    A                  ADDRESS OF CONDITION AREA
K2020ALT DS    XL4                OFFSET OF TOP LINE
K2020ANC DS    XL4                NO. OF CONDITIONS
*
         LTORG
         DROP  R4,R6
*
K5020A   DS    0H
         USING *,R6
* PF5  : IGNORE CONDITION
* WORKING STORAGE DISPLAY
         USING EDF020AS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E020ATSO   MOVE TRANSID
         MVC   EWKSPGO,E020APGO   MOVE PROGRAM
         MVC   EWKSTNO,E020ATNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E020ASCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF020AL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K7020A   DS    0H
         USING *,R6
* PF7  : 'AFTER' IGNORE CONDITION
* PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020AP7A,DFHBMASD  IS PAGE BACKWARD HALF POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-6              - HALF PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
K7020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K7020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K7020ALP        LOOP
*
         B     K7020AKP           EXIT
*
K7020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K7020ADN        LOOP
*
K7020AKP EQU   *
         MVI   E020AP7A,DFHBMASD  SET PF7 DARK
         MVI   E020AP8A,DFHBMASB  SHOW PF8
         MVI   E020APAA,DFHBMASD  SET PF10 DARK
         MVI   E020APBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K7020AK7           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
K7020AK7 EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K7020AKB           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
K7020AKB EQU   *
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K7020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K7020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE
         BR    R2                 RETURN
*
         LTORG
         DROP  R4,R6
*
K8020A   DS    0H
         USING *,R6
* PF8  : 'AFTER' IGNORE CONDITION
* PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020AP8A,DFHBMASD  IS PAGE FORWARD HALF POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,6               + HALF PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
K8020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K8020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K8020ALP        LOOP
*
         B     K8020AKP           EXIT
*
K8020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K8020ADN        LOOP
*
K8020AKP EQU   *
         MVI   E020AP7A,DFHBMASB  SHOW PF7
         MVI   E020AP8A,DFHBMASD  SET PF8 DARK
         MVI   E020APAA,DFHBMASD  SET PF10 DARK
         MVI   E020APBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K8020AKA           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
K8020AKA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K8020AKB           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
K8020AKB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K8020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K8020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE
         BR    R2                 RETURN
*
         LTORG
         DROP  R4,R6
*
KA020A   DS    0H
         USING *,R6
* PF10 : 'AFTER' IGNORE CONDITION
* PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020APAA,DFHBMASD  IS PAGE BACKWARD FULL POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-12             - FULL PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
KA020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KA020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KA020ALP        LOOP
*
         B     KA020AKP           EXIT
*
KA020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KA020ADN        LOOP
*
KA020AKP EQU   *
         MVI   E020AP7A,DFHBMASD  SET PF7 DARK
         MVI   E020AP8A,DFHBMASD  SET PF8 DARK
         MVI   E020APAA,DFHBMASD  SET PF10 DARK
         MVI   E020APBA,DFHBMASB  SHOW PF11
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA020AK8           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
KA020AK8 EQU   *
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA020AKA           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
KA020AKA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA020ASN           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
KA020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE
         BR    R2                 RETURN
*
         LTORG
         DROP  R4,R6
*
KB020A   DS    0H
         USING *,R6
* PF11 : 'AFTER' IGNORE CONDITION
* PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020APBA,DFHBMASD  IS PAGE FORWARD FULL POSSIBLE ?
         BER   R2                 RETURN IF NOT
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,12              + FULL PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
KB020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KB020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KB020ALP        LOOP
*
         B     KB020AKP           EXIT
*
KB020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KB020ADN        LOOP
*
KB020AKP EQU   *
         MVI   E020AP7A,DFHBMASD  SET PF7 DARK
         MVI   E020AP8A,DFHBMASD  SET PF8 DARK
         MVI   E020APAA,DFHBMASB  SHOW PF10
         MVI   E020APBA,DFHBMASD  SET PF11 DARK
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB020AK8           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
KB020AK8 EQU   *
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB020AKA           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
KB020AKA EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
KB020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE
         BR    R2                 RETURN
*
         LTORG
         DROP  R4,R6
*
K2020C   DS    0H
* PUSH HANDLE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF020CS,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020C') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K5020C   DS    0H
         USING *,R6
* PF5  : PUSH HANDLE
* WORKING STORAGE DISPLAY
         USING EDF020CS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E020CTSO   MOVE TRANSID
         MVC   EWKSPGO,E020CPGO   MOVE PROGRAM
         MVC   EWKSTNO,E020CTNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E020CSCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF020CL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K2020E   DS    0H
* POP HANDLE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF020ES,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020E') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K5020E   DS    0H
         USING *,R6
* PF5  : POP HANDLE
* WORKING STORAGE DISPLAY
         USING EDF020ES,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E020ETSO   MOVE TRANSID
         MVC   EWKSPGO,E020EPGO   MOVE PROGRAM
         MVC   EWKSTNO,E020ETNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E020ESCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF020EL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20402   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' RECEIVE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    KPSEND04           EXIT IF IT IS
* ONLY 'AFTER' IS LIKELY TO HAVE INPUT AREA FOR CONVERSION
         USING EDF0402S,R4
         MVI   E0402P2A,DFHBMASD  SET PF2 KEY OFF
         CLC   E0402STO+18(8),=C'COMPLETE' IS IT 'AFTER' ?
         BNE   KPSEND04           EXIT IF NOT
* 'AFTER' RECEIVE
         CLI   E0402INO,C'('      ANY INTO DATA ?
         BNE   KPSEND04           EXIT IF NOT
* 'AFTER' RECEIVE AND INTO DATA
         MVI   E0402P2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   KP04               EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         PACK  K20402DC+5(3),E0402LIO+1(5) PACK INTO LENGTH
         CVB   R8,K20402DC        CONVERT TO BINARY
         CHI   R8,61              >61 ?
         BNH   KPMAX04            EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
KPMAX04  EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20402DC        SAVE DISPLAY LENGTH-1
         EX    R8,KP04MVCR        SAVE INTO DATA
         EX    R8,KP04TRE         INTO TO EBCDIC
         MVC   E0402MDO,=CL6'EBCDIC' SET MODE
         B     KPSEND04           EXIT
*
KP04     EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20402DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP04H              EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         EX    R8,KP04MVC         MOVE INTO DATA BACK
         EX    R8,KP04TRA         INTO TO ASCII
         MVC   E0402MDO,=CL6'ASCII' SET MODE
         B     KPSEND04           EXIT
*
KP04H    EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP04E              EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20402DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20402TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,KPSAV04         SOURCE ADDRESS
         XC    E0402INO+1(62),E0402INO+1 CLEAR INTO DISPLAY
         MVHHI E0402INO+1,C'X'''  MOVE X'
         LA    R14,E0402INO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   KP04LOK            EXIT IF NOT
         LA    R15,29             SET MAXIMUM
KP04LOK  EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0402INO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0402MDO,=CL6'HEX' SET MODE
         B     KPSEND04           EXIT
*
KP04E    EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20402DC        RESTORE LENGTH FOR EX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E0402INO+1(62),E0402INO+1 CLEAR INTO DISPLAY
         EX    R8,KP04MVC         MOVE INTO DATA BACK
         EX    R8,KP04TRE         INTO TO EBCDIC
         LA    R5,E0402INO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
         MVC   E0402MDO,=CL6'EBCDIC' SET MODE
KPSEND04 EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0402') ERASE
         BR    R7                 RETURN
*
K20402DC DC    PL8'0'
KPSAV04  DS    XL61
KP04MVCR MVC   KPSAV04(0),E0402INO+1 SAVE INTO DATA
KP04TRE  TR    E0402INO+1(0),K20402TE TRANSLATE INTO TO EBCDIC
KP04MVC  MVC   E0402INO+1(0),KPSAV04 MOVE INTO BACK
KP04TRA  TR    E0402INO+1(0),K20402TA TRANSLATE INTO TO ASCII
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20402TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20402TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20402TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50402   DS    0H
         USING *,R6
* PF5  : RECEIVE
* WORKING STORAGE DISPLAY
         USING EDF0402S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0402TSO   MOVE TRANSID
         MVC   EWKSPGO,E0402PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0402TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0402SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0402L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20404   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' SEND
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20404SN           EXIT IF IT IS
         USING EDF0404S,R4
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20404NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         PACK  K20404DC+5(3),E0404LNO+1(5) PACK FROM LENGTH
         CVB   R8,K20404DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20404LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20404EX           EXIT
*
K20404LK EQU   *
         CHI   R8,69              >69 ?
         BNH   K20404EX           EXIT IF NOT
         LA    R8,69              SET MAXIMUM LENGTH
K20404EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20404DC        SAVE DISPLAY LENGTH-1
         EX    R8,K20404MF        SAVE FROM DATA
         EX    R8,K20404RE        FROM TO EBCDIC
         MVC   E0404MDO,=CL6'EBCDIC' SET MODE
         B     K20404SN           EXIT
*
K20404NR EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20404DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20404NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         EX    R8,K20404FB        MOVE FROM DATA BACK
         EX    R8,K20404FA        FROM TO ASCII
         MVC   E0404MDO,=CL6'ASCII' SET MODE
         B     K20404SN           EXIT
*
K20404NE EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20404NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20404DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 69 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 69-3=66/2=33
         LA    R15,1(R8)          R15=FROM LENGTH
         LA    R1,K20404TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20404FR        SOURCE ADDRESS
         XC    E0404FMO+1(70),E0404FMO+1 CLEAR FROM DISPLAY
         MVHHI E0404FMO+1,C'X'''  MOVE X'
         LA    R14,E0404FMO+3     DESTINATION ADDRESS
         CHI   R15,33             >33 ?
         BNH   K20404HX           EXIT IF NOT
         LA    R15,33             SET MAXIMUM
K20404HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0404FMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0404MDO,=CL6'HEX' SET MODE
         B     K20404SN           EXIT
*
K20404NA EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20404DC        RESTORE LENGTH-1 FOR EX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E0404FMO+1(70),E0404FMO+1 CLEAR FROM DISPLAY
         EX    R8,K20404FB        MOVE FROM DATA BACK
         EX    R8,K20404RE        FROM TO EBCDIC
         LA    R5,E0404FMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
         MVC   E0404MDO,=CL6'EBCDIC' SET MODE
K20404SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0404') ERASE
         BR    R7                 RETURN
*
K20404DC DC    PL8'0'
K20404FR DS    XL69
K20404MF MVC   K20404FR(0),E0404FMO+1 SAVE FROM DATA
K20404RE TR    E0404FMO+1(0),K20404TE TRANSLATE FROM DATA TO EBCDIC
K20404FB MVC   E0404FMO+1(0),K20404FR MOVE FROM DATA BACK
K20404FA TR    E0404FMO+1(0),K20404TA TRANSLATE FROM DATA TO ASCII
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20404TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20404TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20404TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50404   DS    0H
         USING *,R6
* PF5  : SEND
* WORKING STORAGE DISPLAY
         USING EDF0404S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0404TSO   MOVE TRANSID
         MVC   EWKSPGO,E0404PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0404TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0404SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0404L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20602   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' READ
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20602SN           EXIT IF IT IS
         USING EDF0602S,R4
         MVI   E0602P2A,DFHBMASD  SET PF2 KEY OFF
* INTO (...//...)
         CLI   E0602ISO,C'S'      SET ?
         BE    K20602DI           EXIT IF IT IS
         CLI   E0602ISO+15,C'('   ANY INTO ?
         BNE   K20602DI           EXIT IF NONE
         MVI   E0602P2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K206022R           EXIT IF NOT
         PACK  K20602DC+2(6),E0602LIO+16(11) PACK INTO LENGTH
         CLI   E0602LDO,C'L'      ANY LENGTH OF DATA ?
         BNE   K0602NLD           EXIT IF NOT
         PACK  K20602DC+2(6),E0602LDO+16(11) PACK INTO DATA LENGTH
K0602NLD EQU   *
         CVB   R8,K20602DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20602LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20602EX           EXIT
*
K20602LK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20602EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20602EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20602DC        SAVE DISPLAY LENGTH-1
         EX    R8,K20602MI        SAVE INTO DATA
         EX    R8,K20602RE        INTO TO EBCDIC
         B     K20602DI           EXIT
*
K206022R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206022E           EXIT IF NOT
         EX    R8,K20602IB        MOVE INTO DATA BACK
         EX    R8,K20602IA        INTO TO ASCII
         B     K20602DI           EXIT
*
K206022E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206022A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20602TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20602IN        SOURCE ADDRESS
         XC    E0602ISO+16(63),E0602ISO+16 CLEAR INTO DISPLAY
         MVHHI E0602ISO+16,C'X'''  MOVE X'
         LA    R14,E0602ISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20602HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20602HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0602ISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20602DI           EXIT
*
K206022A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602DC        RESTORE LENGTH-1 FOR EX
         XC    E0602ISO+16(63),E0602ISO+16 CLEAR INTO DISPLAY
         EX    R8,K20602IB        MOVE INTO DATA BACK
         EX    R8,K20602RE        INTO TO EBCDIC
         LA    R5,E0602ISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K20602DI EQU   *
* RIDFLD
         CLI   E0602RBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K20602SM           EXIT IF THERE IS
         MVI   E0602P2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K206023R           EXIT IF NOT
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
         PACK  K20602D2+5(3),E0602RLO+16(5) PACK RIDFLD LENGTH
         CLI   E0602KLO,C'K'      ANY KEYLENGTH ?
         BNE   K20602NK           EXIT IF NONE
         CLC   E0602KLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K20602NK           EXIT IF IT IS
         PACK  K20602D2+5(3),E0602KLO+16(5) PACK KEYLENGTH
K20602NK EQU   *
         CVB   R8,K20602D2        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20602RK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20602RX           EXIT
*
K20602RK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20602RX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20602RX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20602D2        SAVE DISPLAY LENGTH-1
         EX    R8,K20602MD        SAVE RIDFLD DATA
         EX    R8,K20602DE        RIDFLD TO EBCDIC
         B     K20602SM           EXIT
*
K206023R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602D2        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206023E           EXIT IF NOT
         EX    R8,K20602DB        MOVE RIDFLD DATA BACK
         EX    R8,K20602DA        RIDFLD TO ASCII
         B     K20602SM           EXIT
*
K206023E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206023A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602D2        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K20602TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20602RI        SOURCE ADDRESS
         XC    E0602RIO+1(63),E0602RIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E0602RIO+1,C'X'''  MOVE X'
         LA    R14,E0602RIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20602DX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20602DX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0602RIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20602SM           EXIT
*
K206023A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602D2        RESTORE LENGTH-1 FOR EX
         XC    E0602RIO+1(63),E0602RIO+1 CLEAR RIDFLD DISPLAY
         EX    R8,K20602DB        MOVE RIDFLD DATA BACK
         EX    R8,K20602DE        RIDFLD TO EBCDIC
         LA    R5,E0602RIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
K20602SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20602NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0602MDO,=CL6'EBCDIC' SET MODE
         B     K20602SN           EXIT
*
K20602NR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K20602NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E0602MDO,=CL6'ASCII' SET MODE
         B     K20602SN           EXIT
*
K20602NE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K20602NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E0602MDO,=CL6'HEX' SET MODE
         B     K20602SN           EXIT
*
K20602NA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0602MDO,=CL6'EBCDIC' SET MODE
K20602SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0602') ERASE
         BR    R7                 RETURN
*
K20602MI MVC   K20602IN(0),E0602ISO+16 SAVE INTO DATA
K20602RE TR    E0602ISO+16(0),K20602TE TRANSLATE INTO TO EBCDIC
K20602IB MVC   E0602ISO+16(0),K20602IN MOVE INTO DATA BACK
K20602IA TR    E0602ISO+16(0),K20602TA TRANSLATE INTO TO ASCII
K20602MD MVC   K20602RI(0),E0602RIO+1 SAVE RIDFLD DATA
K20602DE TR    E0602RIO+1(0),K20602TE TRANSLATE RIDFLD TO EBCDIC
K20602DB MVC   E0602RIO+1(0),K20602RI MOVE RIDFLD DATA BACK
K20602DA TR    E0602RIO+1(0),K20602TA TRANSLATE RIDFLD TO ASCII
*
K20602DC DC    PL8'0'
K20602D2 DC    PL8'0'
K20602IN DS    XL61               INTO
K20602RI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20602TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20602TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20602TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50602   DS    0H
         USING *,R6
* PF5  : READ
* WORKING STORAGE DISPLAY
         USING EDF0602S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0602TSO   MOVE TRANSID
         MVC   EWKSPGO,E0602PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0602TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0602SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0602L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K2060C   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' STARTBR
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2060CSN           EXIT IF IT IS
         USING EDF060CS,R4
* RIDFLD
         CLI   E060CRBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K2060CSN           EXIT IF THERE IS
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2060C3R           EXIT IF NOT
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K2060CDC+5(3),E060CRLO+16(5) PACK RIDFLD LENGTH
         CLI   E060CSTO,C'A'      'BEFORE' ?
         BNE   K2060CNK           EXIT IF NOT
         CLI   E060CKLO,C'K'      ANY KEYLENGTH ?
         BNE   K2060CNK           EXIT IF NONE
         CLC   E060CKLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K2060CNK           EXIT IF IT IS
         PACK  K2060CDC+5(3),E060CKLO+16(5) PACK KEYLENGTH
K2060CNK EQU   *
         CVB   R8,K2060CDC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2060CRK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2060CRX           EXIT
*
K2060CRK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2060CRX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2060CRX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2060CDC        SAVE DISPLAY LENGTH-1
         EX    R8,K2060CMD        SAVE RIDFLD DATA
         EX    R8,K2060CDE        RIDFLD TO EBCDIC
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E060CMDO,=CL6'EBCDIC' SET MODE
         B     K2060CSN           EXIT
*
K2060C3R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060CDC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2060C3E           EXIT IF NOT
         EX    R8,K2060CDB        MOVE RIDFLD DATA BACK
         EX    R8,K2060CDA        RIDFLD TO ASCII
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E060CMDO,=CL6'ASCII' SET MODE
         B     K2060CSN           EXIT
*
K2060C3E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2060C3A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060CDC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K2060CTH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2060CRI        SOURCE ADDRESS
         XC    E060CRIO+1(63),E060CRIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E060CRIO+1,C'X'''  MOVE X'
         LA    R14,E060CRIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2060CDX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2060CDX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E060CRIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E060CMDO,=CL6'HEX' SET MODE
         B     K2060CSN           EXIT
*
K2060C3A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060CDC        RESTORE LENGTH-1 FOR EX
         XC    E060CRIO+1(63),E060CRIO+1 CLEAR RIDFLD DISPLAY
         EX    R8,K2060CDB        MOVE RIDFLD DATA BACK
         EX    R8,K2060CDE        RIDFLD TO EBCDIC
         LA    R5,E060CRIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E060CMDO,=CL6'EBCDIC' SET MODE
K2060CSN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF060C') ERASE
         BR    R7                 RETURN
*
K2060CMD MVC   K2060CRI(0),E060CRIO+1 SAVE RIDFLD DATA
K2060CDE TR    E060CRIO+1(0),K2060CTE TRANSLATE RIDFLD TO EBCDIC
K2060CDB MVC   E060CRIO+1(0),K2060CRI MOVE RIDFLD DATA BACK
K2060CDA TR    E060CRIO+1(0),K2060CTA TRANSLATE RIDFLD TO ASCII
*
K2060CDC DC    PL8'0'
K2060CRI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2060CTE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2060CTA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2060CTH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K5060C   DS    0H
         USING *,R6
* PF5  : STARTBR
* WORKING STORAGE DISPLAY
         USING EDF060CS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E060CTSO   MOVE TRANSID
         MVC   EWKSPGO,E060CPGO   MOVE PROGRAM
         MVC   EWKSTNO,E060CTNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E060CSCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF060CL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K2060E   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' READNEXT
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2060ESN           EXIT IF IT IS
         USING EDF060ES,R4
         MVI   E060EP2A,DFHBMASD  SET PF2 KEY OFF
* INTO (...//...)
         CLI   E060EISO,C'S'      SET ?
         BE    K2060EDI           EXIT IF IT IS
         CLI   E060EISO+15,C'('   ANY INTO ?
         BNE   K2060EDI           EXIT IF NONE
         MVI   E060EP2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2060E2R           EXIT IF NOT
         PACK  K2060EDC+2(6),E060ELIO+16(11) PACK INTO LENGTH
         CLI   E060ELDO,C'L'      ANY LENGTH OF DATA ?
         BNE   K060ENLD           EXIT IF NOT
         PACK  K2060EDC+2(6),E060ELDO+16(11) PACK INTO DATA LENGTH
K060ENLD EQU   *
         CVB   R8,K2060EDC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2060ELK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2060EEX           EXIT
*
K2060ELK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2060EEX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2060EEX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2060EDC        SAVE DISPLAY LENGTH-1
         EX    R8,K2060EMI        SAVE INTO DATA
         EX    R8,K2060ERE        INTO TO EBCDIC
         B     K2060EDI           EXIT
*
K2060E2R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060EDC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2060E2E           EXIT IF NOT
         EX    R8,K2060EIB        MOVE INTO DATA BACK
         EX    R8,K2060EIA        INTO TO ASCII
         B     K2060EDI           EXIT
*
K2060E2E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2060E2A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060EDC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K2060ETH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2060EIN        SOURCE ADDRESS
         XC    E060EISO+16(63),E060EISO+16 CLEAR INTO DISPLAY
         MVHHI E060EISO+16,C'X'''  MOVE X'
         LA    R14,E060EISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2060EHX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2060EHX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E060EISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K2060EDI           EXIT
*
K2060E2A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060EDC        RESTORE LENGTH-1 FOR EX
         XC    E060EISO+16(63),E060EISO+16 CLEAR INTO DISPLAY
         EX    R8,K2060EIB        MOVE INTO DATA BACK
         EX    R8,K2060ERE        INTO TO EBCDIC
         LA    R5,E060EISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K2060EDI EQU   *
* RIDFLD
         CLI   E060ERBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K2060ESM           EXIT IF THERE IS
         MVI   E060EP2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2060E3R           EXIT IF NOT
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K2060ED2+5(3),E060ERLO+16(5) PACK RIDFLD LENGTH
         CLI   E060ESTO,C'A'      'BEFORE' ?
         BNE   K2060ENK           EXIT IF NOT
         CLI   E060EKLO,C'K'      ANY KEYLENGTH ?
         BNE   K2060ENK           EXIT IF NONE
         CLC   E060EKLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K2060ENK           EXIT IF IT IS
         PACK  K2060ED2+5(3),E060EKLO+16(5) PACK KEYLENGTH
K2060ENK EQU   *
         CVB   R8,K2060ED2        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2060ERK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2060ERX           EXIT
*
K2060ERK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2060ERX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2060ERX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2060ED2        SAVE DISPLAY LENGTH-1
         EX    R8,K2060EMD        SAVE RIDFLD DATA
         EX    R8,K2060EDE        RIDFLD TO EBCDIC
         B     K2060ESM           EXIT
*
K2060E3R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ED2        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2060E3E           EXIT IF NOT
         EX    R8,K2060EDB        MOVE RIDFLD DATA BACK
         EX    R8,K2060EDA        RIDFLD TO ASCII
         B     K2060ESM           EXIT
*
K2060E3E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2060E3A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ED2        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K2060ETH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2060ERI        SOURCE ADDRESS
         XC    E060ERIO+1(63),E060ERIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E060ERIO+1,C'X'''  MOVE X'
         LA    R14,E060ERIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2060EDX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2060EDX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E060ERIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K2060ESM           EXIT
*
K2060E3A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ED2        RESTORE LENGTH-1 FOR EX
         XC    E060ERIO+1(63),E060ERIO+1 CLEAR RIDFLD DISPLAY
         EX    R8,K2060EDB        MOVE RIDFLD DATA BACK
         EX    R8,K2060EDE        RIDFLD TO EBCDIC
         LA    R5,E060ERIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
K2060ESM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2060ENR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E060EMDO,=CL6'EBCDIC' SET MODE
         B     K2060ESN           EXIT
*
K2060ENR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K2060ENE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E060EMDO,=CL6'ASCII' SET MODE
         B     K2060ESN           EXIT
*
K2060ENE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K2060ENA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E060EMDO,=CL6'HEX' SET MODE
         B     K2060ESN           EXIT
*
K2060ENA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E060EMDO,=CL6'EBCDIC' SET MODE
K2060ESN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF060E') ERASE
         BR    R7                 RETURN
*
K2060EMI MVC   K2060EIN(0),E060EISO+16 SAVE INTO DATA
K2060ERE TR    E060EISO+16(0),K2060ETE TRANSLATE INTO TO EBCDIC
K2060EIB MVC   E060EISO+16(0),K2060EIN MOVE INTO DATA BACK
K2060EIA TR    E060EISO+16(0),K2060ETA TRANSLATE INTO TO ASCII
K2060EMD MVC   K2060ERI(0),E060ERIO+1 SAVE RIDFLD DATA
K2060EDE TR    E060ERIO+1(0),K2060ETE TRANSLATE RIDFLD TO EBCDIC
K2060EDB MVC   E060ERIO+1(0),K2060ERI MOVE RIDFLD DATA BACK
K2060EDA TR    E060ERIO+1(0),K2060ETA TRANSLATE RIDFLD TO ASCII
*
K2060EDC DC    PL8'0'
K2060ED2 DC    PL8'0'
K2060EIN DS    XL61               INTO
K2060ERI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2060ETE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2060ETA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2060ETH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K5060E   DS    0H
         USING *,R6
* PF5  : READNEXT
* WORKING STORAGE DISPLAY
         USING EDF060ES,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E060ETSO   MOVE TRANSID
         MVC   EWKSPGO,E060EPGO   MOVE PROGRAM
         MVC   EWKSTNO,E060ETNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E060ESCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF060EL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20610   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' READPREV
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20610SN           EXIT IF IT IS
         USING EDF0610S,R4
         MVI   E0610P2A,DFHBMASD  SET PF2 KEY OFF
* INTO (...//...)
         CLI   E0610ISO,C'S'      SET ?
         BE    K20610DI           EXIT IF IT IS
         CLI   E0610ISO+15,C'('   ANY INTO ?
         BNE   K20610DI           EXIT IF NONE
         MVI   E0610P2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K206102R           EXIT IF NOT
         PACK  K20610DC+2(6),E0610LIO+16(11) PACK INTO LENGTH
         CLI   E0610LDO,C'L'      ANY LENGTH OF DATA ?
         BNE   K0610NLD           EXIT IF NOT
         PACK  K20610DC+2(6),E0610LDO+16(11) PACK INTO DATA LENGTH
K0610NLD EQU   *
         CVB   R8,K20610DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20610LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20610EX           EXIT
*
K20610LK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20610EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20610EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20610DC        SAVE DISPLAY LENGTH-1
         EX    R8,K20610MI        SAVE INTO DATA
         EX    R8,K20610RE        INTO TO EBCDIC
         B     K20610DI           EXIT
*
K206102R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206102E           EXIT IF NOT
         EX    R8,K20610IB        MOVE INTO DATA BACK
         EX    R8,K20610IA        INTO TO ASCII
         B     K20610DI           EXIT
*
K206102E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206102A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20610TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20610IN        SOURCE ADDRESS
         XC    E0610ISO+16(63),E0610ISO+16 CLEAR INTO DISPLAY
         MVHHI E0610ISO+16,C'X'''  MOVE X'
         LA    R14,E0610ISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20610HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20610HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0610ISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20610DI           EXIT
*
K206102A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610DC        RESTORE LENGTH-1 FOR EX
         XC    E0610ISO+16(63),E0610ISO+16 CLEAR INTO DISPLAY
         EX    R8,K20610IB        MOVE INTO DATA BACK
         EX    R8,K20610RE        INTO TO EBCDIC
         LA    R5,E0610ISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K20610DI EQU   *
* RIDFLD
         CLI   E0610RBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K20610SM           EXIT IF THERE IS
         MVI   E0610P2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K206103R           EXIT IF NOT
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K20610D2+5(3),E0610RLO+16(5) PACK RIDFLD LENGTH
         CLI   E0610STO,C'A'      'BEFORE' ?
         BNE   K20610NK           EXIT IF MOT
         CLI   E0610KLO,C'K'      ANY KEYLENGTH ?
         BNE   K20610NK           EXIT IF NONE
         CLC   E0610KLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K20610NK           EXIT IF IT IS
         PACK  K20610D2+5(3),E0610KLO+16(5) PACK KEYLENGTH
K20610NK EQU   *
         CVB   R8,K20610D2        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20610RK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20610RX           EXIT
*
K20610RK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20610RX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20610RX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20610D2        SAVE DISPLAY LENGTH-1
         EX    R8,K20610MD        SAVE RIDFLD DATA
         EX    R8,K20610DE        RIDFLD TO EBCDIC
         B     K20610SM           EXIT
*
K206103R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610D2        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206103E           EXIT IF NOT
         EX    R8,K20610DB        MOVE RIDFLD DATA BACK
         EX    R8,K20610DA        RIDFLD TO ASCII
         B     K20610SM           EXIT
*
K206103E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206103A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610D2        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K20610TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20610RI        SOURCE ADDRESS
         XC    E0610RIO+1(63),E0610RIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E0610RIO+1,C'X'''  MOVE X'
         LA    R14,E0610RIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20610DX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20610DX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0610RIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20610SM           EXIT
*
K206103A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610D2        RESTORE LENGTH-1 FOR EX
         XC    E0610RIO+1(63),E0610RIO+1 CLEAR RIDFLD DISPLAY
         EX    R8,K20610DB        MOVE RIDFLD DATA BACK
         EX    R8,K20610DE        RIDFLD TO EBCDIC
         LA    R5,E0610RIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
K20610SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20610NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0610MDO,=CL6'EBCDIC' SET MODE
         B     K20610SN           EXIT
*
K20610NR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K20610NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E0610MDO,=CL6'ASCII' SET MODE
         B     K20610SN           EXIT
*
K20610NE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K20610NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E0610MDO,=CL6'HEX' SET MODE
         B     K20610SN           EXIT
*
K20610NA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0610MDO,=CL6'EBCDIC' SET MODE
K20610SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0610') ERASE
         BR    R7                 RETURN
*
K20610MI MVC   K20610IN(0),E0610ISO+16 SAVE INTO DATA
K20610RE TR    E0610ISO+16(0),K20610TE TRANSLATE INTO TO EBCDIC
K20610IB MVC   E0610ISO+16(0),K20610IN MOVE INTO DATA BACK
K20610IA TR    E0610ISO+16(0),K20610TA TRANSLATE INTO TO ASCII
K20610MD MVC   K20610RI(0),E0610RIO+1 SAVE RIDFLD DATA
K20610DE TR    E0610RIO+1(0),K20610TE TRANSLATE RIDFLD TO EBCDIC
K20610DB MVC   E0610RIO+1(0),K20610RI MOVE RIDFLD DATA BACK
K20610DA TR    E0610RIO+1(0),K20610TA TRANSLATE RIDFLD TO ASCII
*
K20610DC DC    PL8'0'
K20610D2 DC    PL8'0'
K20610IN DS    XL61               INTO
K20610RI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20610TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20610TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20610TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50610   DS    0H
         USING *,R6
* PF5  : READPREV
* WORKING STORAGE DISPLAY
         USING EDF0610S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0610TSO   MOVE TRANSID
         MVC   EWKSPGO,E0610PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0610TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0610SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0610L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20612   DS    0H
* ENDBR
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0612S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0612') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K50612   DS    0H
         USING *,R6
* PF5  : ENDBR
* WORKING STORAGE DISPLAY
         USING EDF0612S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0612TSO   MOVE TRANSID
         MVC   EWKSPGO,E0612PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0612TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0612SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0612L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20614   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' RESETBR
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20614SN           EXIT IF IT IS
         USING EDF0614S,R4
* RIDFLD
         CLI   E0614RBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K20614SN           EXIT IF THERE IS
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K206143R           EXIT IF NOT
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K20614DC+5(3),E0614RLO+16(5) PACK RIDFLD LENGTH
         CLI   E0614STO,C'A'      'BEFORE' ?
         BNE   K20614NK           EXIT IF NOT
         CLI   E0614KLO,C'K'      ANY KEYLENGTH ?
         BNE   K20614NK           EXIT IF NONE
         CLC   E0614KLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K20614NK           EXIT IF IT IS
         PACK  K20614DC+5(3),E0614KLO+16(5) PACK KEYLENGTH
K20614NK EQU   *
         CVB   R8,K20614DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20614RK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20614RX           EXIT
*
K20614RK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20614RX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20614RX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20614DC        SAVE DISPLAY LENGTH-1
         EX    R8,K20614MD        SAVE RIDFLD DATA
         EX    R8,K20614DE        RIDFLD TO EBCDIC
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0614MDO,=CL6'EBCDIC' SET MODE
         B     K20614SN           EXIT
*
K206143R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20614DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206143E           EXIT IF NOT
         EX    R8,K20614DB        MOVE RIDFLD DATA BACK
         EX    R8,K20614DA        RIDFLD TO ASCII
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E0614MDO,=CL6'ASCII' SET MODE
         B     K20614SN           EXIT
*
K206143E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K206143A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20614DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K20614TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20614RI        SOURCE ADDRESS
         XC    E0614RIO+1(63),E0614RIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E0614RIO+1,C'X'''  MOVE X'
         LA    R14,E0614RIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20614DX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20614DX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0614RIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E0614MDO,=CL6'HEX' SET MODE
         B     K20614SN           EXIT
*
K206143A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20614DC        RESTORE LENGTH-1 FOR EX
         XC    E0614RIO+1(63),E0614RIO+1 CLEAR RIDFLD DISPLAY
         EX    R8,K20614DB        MOVE RIDFLD DATA BACK
         EX    R8,K20614DE        RIDFLD TO EBCDIC
         LA    R5,E0614RIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0614MDO,=CL6'EBCDIC' SET MODE
K20614SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0614') ERASE
         BR    R7                 RETURN
*
K20614MD MVC   K20614RI(0),E0614RIO+1 SAVE RIDFLD DATA
K20614DE TR    E0614RIO+1(0),K20614TE TRANSLATE RIDFLD TO EBCDIC
K20614DB MVC   E0614RIO+1(0),K20614RI MOVE RIDFLD DATA BACK
K20614DA TR    E0614RIO+1(0),K20614TA TRANSLATE RIDFLD TO ASCII
*
K20614DC DC    PL8'0'
K20614RI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20614TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20614TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20614TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50614   DS    0H
         USING *,R6
* PF5  : RESETBR
* WORKING STORAGE DISPLAY
         USING EDF0614S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0614TSO   MOVE TRANSID
         MVC   EWKSPGO,E0614PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0614TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0614SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0614L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20A02   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' WRITEQ TS
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20A02SN           EXIT IF IT IS
         USING EDF0A02S,R4
* QNAME
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A025R           EXIT IF NOT
         MVC   K20A02QE,E0A02QUO+1 SAVE QNAME
         TR    E0A02QUO+1(16),K20A02TE TRANSLATE QNAME TO EBCDIC
         B     K20A02FR           EXIT
*
K20A025R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A025E           EXIT IF NOT
         MVC   E0A02QUO+1(16),K20A02QE MOVE QNAME BACK
         TR    E0A02QUO+1(16),K20A02TA TRANSLATE QNAME TO ASCII
         B     K20A02FR           EXIT
*
K20A025E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A025A           EXIT IF NOT
         LA    R1,K20A02TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A02QE        SOURCE ADDRESS
         XC    E0A02QUO,E0A02QUO  CLEAR QNAME DISPLAY
         MVC   E0A02QUO(3),=C'(X'''  MOVE (X'
         LA    R14,E0A02QUO+3     DESTINATION ADDRESS
         LA    R15,16             R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E0A02QUO+35,C''')' MOVE END ')
         B     K20A02FR           EXIT
*
K20A025A EQU   *
* HAS TO BE IN HEX MODE
         XC    E0A02QUO+1(36),E0A02QUO+1 CLEAR QNAME DISPLAY
         MVC   E0A02QUO+1(16),K20A02QE MOVE QUEUE BACK
         TR    E0A02QUO+1(16),K20A02TE TRANSLATE QUEUE TO EBCDIC
         MVI   E0A02QUO+17,C')'   SET QUEUE CLOSE BRACKET
K20A02FR EQU   *
* FROM (...//...)
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A022R           EXIT IF NOT
         PACK  K20A02DC+5(3),E0A02LNO+1(5) PACK FROM LENGTH
         CVB   R8,K20A02DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20A02LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20A02EX           EXIT
*
K20A02LK EQU   *
         CHI   R8,67              >67 ?
         BNH   K20A02EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20A02EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20A02DC        SAVE DISPLAY LENGTH-1
         EX    R8,K20A02MF        SAVE FROM DATA
         EX    R8,K20A02RE        FROM TO EBCDIC
         B     K20A02SM           EXIT
*
K20A022R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A02DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A022E           EXIT IF NOT
         EX    R8,K20A02FB        MOVE FROM DATA BACK
         EX    R8,K20A02FA        FROM TO ASCII
         B     K20A02SM           EXIT
*
K20A022E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A022A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A02DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=FROM LENGTH
         LA    R1,K20A02TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A02FM        SOURCE ADDRESS
         XC    E0A02FMO+1(68),E0A02FMO+1 CLEAR FROM DISPLAY
         MVHHI E0A02FMO+1,C'X'''  MOVE X'
         LA    R14,E0A02FMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20A02HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20A02HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0A02FMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20A02SM           EXIT
*
K20A022A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A02DC        RESTORE LENGTH-1 FOR EX
         XC    E0A02FMO+1(68),E0A02FMO+1 CLEAR FROM DISPLAY
         EX    R8,K20A02FB        MOVE FROM DATA BACK
         EX    R8,K20A02RE        FROM TO EBCDIC
         LA    R5,E0A02FMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
K20A02SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A02NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0A02MDO,=CL6'EBCDIC' SET MODE
         B     K20A02SN           EXIT
*
K20A02NR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K20A02NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E0A02MDO,=CL6'ASCII' SET MODE
         B     K20A02SN           EXIT
*
K20A02NE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K20A02NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E0A02MDO,=CL6'HEX' SET MODE
         B     K20A02SN           EXIT
*
K20A02NA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0A02MDO,=CL6'EBCDIC' SET MODE
K20A02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0A02') ERASE
         BR    R7                 RETURN
*
K20A02DC DC    PL8'0'
K20A02QE DS    XL16               QNAME
K20A02FM DS    XL67               FROM
K20A02MF MVC   K20A02FM(0),E0A02FMO+1 SAVE FROM DATA
K20A02RE TR    E0A02FMO+1(0),K20A02TE TRANSLATE FROM TO EBCDIC
K20A02FB MVC   E0A02FMO+1(0),K20A02FM MOVE FROM DATA BACK
K20A02FA TR    E0A02FMO+1(0),K20A02TA TRANSLATE FROM TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20A02TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20A02TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20A02TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50A02   DS    0H
         USING *,R6
* PF5  : WRITEQ TS
* WORKING STORAGE DISPLAY
         USING EDF0A02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0A02TSO   MOVE TRANSID
         MVC   EWKSPGO,E0A02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0A02TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0A02SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0A02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20A04   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' READQ TS
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20A04SN           EXIT IF IT IS
         USING EDF0A04S,R4
* QNAME
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A045R           EXIT IF NOT
         MVC   K20A04QE,E0A04QUO+1 SAVE QNAME
         TR    E0A04QUO+1(16),K20A04TE TRANSLATE QNAME TO EBCDIC
         B     K20A04IS           EXIT
*
K20A045R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A045E           EXIT IF NOT
         MVC   E0A04QUO+1(16),K20A04QE MOVE QNAME BACK
         TR    E0A04QUO+1(16),K20A04TA TRANSLATE QNAME TO ASCII
         B     K20A04IS           EXIT
*
K20A045E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A045A           EXIT IF NOT
         LA    R1,K20A04TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A04QE        SOURCE ADDRESS
         XC    E0A04QUO,E0A04QUO  CLEAR QNAME DISPLAY
         MVC   E0A04QUO(3),=C'(X'''  MOVE (X'
         LA    R14,E0A04QUO+3     DESTINATION ADDRESS
         LA    R15,16             R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E0A04QUO+35,C''')' MOVE END ')
         B     K20A04IS           EXIT
*
K20A045A EQU   *
* HAS TO BE IN HEX MODE
         XC    E0A04QUO+1(36),E0A04QUO+1 CLEAR QNAME DISPLAY
         MVC   E0A04QUO+1(16),K20A04QE MOVE QUEUE BACK
         TR    E0A04QUO+1(16),K20A04TE TRANSLATE QUEUE TO EBCDIC
         MVI   E0A04QUO+17,C')'   SET QUEUE CLOSE BRACKET
K20A04IS EQU   *
* INTO (...//...)
         CLI   E0A04ISO,C'S'      SET ?
         BE    K20A04SM           EXIT IF IT IS
         CLI   E0A04ISO+15,C'('   ANY INTO ?
         BNE   K20A04SM           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A042R           EXIT IF NOT
         PACK  K20A04DC+5(3),E0A04LIO+1(5) PACK INTO LENGTH
         CVB   R8,K20A04DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20A04LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20A04EX           EXIT
*
K20A04LK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20A04EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20A04EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20A04DC        SAVE DISPLAY LENGTH-1
         EX    R8,K20A04MI        SAVE INTO DATA
         EX    R8,K20A04RE        INTO TO EBCDIC
         B     K20A04SM           EXIT
*
K20A042R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A04DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A042E           EXIT IF NOT
         EX    R8,K20A04IB        MOVE INTO DATA BACK
         EX    R8,K20A04IA        INTO TO ASCII
         B     K20A04SM           EXIT
*
K20A042E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A042A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A04DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20A04TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A04IN        SOURCE ADDRESS
         XC    E0A04ISO+16(63),E0A04ISO+16 CLEAR INTO DISPLAY
         MVHHI E0A04ISO+16,C'X'''  MOVE X'
         LA    R14,E0A04ISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20A04HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20A04HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0A04ISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20A04SM           EXIT
*
K20A042A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A04DC        RESTORE LENGTH-1 FOR EX
         XC    E0A04ISO+16(63),E0A04ISO+16 CLEAR INTO DISPLAY
         EX    R8,K20A04IB        MOVE INTO DATA BACK
         EX    R8,K20A04RE        INTO TO EBCDIC
         LA    R5,E0A04ISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K20A04SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A04NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0A04MDO,=CL6'EBCDIC' SET MODE
         B     K20A04SN           EXIT
*
K20A04NR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K20A04NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E0A04MDO,=CL6'ASCII' SET MODE
         B     K20A04SN           EXIT
*
K20A04NE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K20A04NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E0A04MDO,=CL6'HEX' SET MODE
         B     K20A04SN           EXIT
*
K20A04NA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0A04MDO,=CL6'EBCDIC' SET MODE
K20A04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0A04') ERASE
         BR    R7                 RETURN
*
K20A04DC DC    PL8'0'
K20A04QE DS    XL16               QNAME
K20A04IN DS    XL61               INTO
K20A04MI MVC   K20A04IN(0),E0A04ISO+16 SAVE INTO DATA
K20A04RE TR    E0A04ISO+16(0),K20A04TE TRANSLATE INTO TO EBCDIC
K20A04IB MVC   E0A04ISO+16(0),K20A04IN MOVE INTO DATA BACK
K20A04IA TR    E0A04ISO+16(0),K20A04TA TRANSLATE INTO TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20A04TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20A04TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20A04TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50A04   DS    0H
         USING *,R6
* PF5  : READQ TS
* WORKING STORAGE DISPLAY
         USING EDF0A04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0A04TSO   MOVE TRANSID
         MVC   EWKSPGO,E0A04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0A04TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0A04SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0A04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20A06   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' DELETEQ TS
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20A06SN           EXIT IF IT IS
         USING EDF0A06S,R4
* QNAME
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A065R           EXIT IF NOT
         MVC   K20A06QE,E0A06QUO+1 SAVE QNAME
         TR    E0A06QUO+1(16),K20A06TE TRANSLATE QNAME TO EBCDIC
         B     K20A06SM           EXIT
*
K20A065R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A065E           EXIT IF NOT
         MVC   E0A06QUO+1(16),K20A06QE MOVE QNAME BACK
         TR    E0A06QUO+1(16),K20A06TA TRANSLATE QNAME TO ASCII
         B     K20A06SM           EXIT
*
K20A065E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K20A065A           EXIT IF NOT
         LA    R1,K20A06TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A06QE        SOURCE ADDRESS
         XC    E0A06QUO,E0A06QUO  CLEAR QNAME DISPLAY
         MVC   E0A06QUO(3),=C'(X'''  MOVE (X'
         LA    R14,E0A06QUO+3     DESTINATION ADDRESS
         LA    R15,16             R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E0A06QUO+35,C''')' MOVE END ')
         B     K20A06SM           EXIT
*
K20A065A EQU   *
* HAS TO BE IN HEX MODE
         XC    E0A06QUO+1(36),E0A06QUO+1 CLEAR QNAME DISPLAY
         MVC   E0A06QUO+1(16),K20A06QE MOVE QUEUE BACK
         TR    E0A06QUO+1(16),K20A06TE TRANSLATE QUEUE TO EBCDIC
         MVI   E0A06QUO+17,C')'   SET QUEUE CLOSE BRACKET
K20A06SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K20A06NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0A06MDO,=CL6'EBCDIC' SET MODE
         B     K20A06SN           EXIT
*
K20A06NR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K20A06NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E0A06MDO,=CL6'ASCII' SET MODE
         B     K20A06SN           EXIT
*
K20A06NE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K20A06NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E0A06MDO,=CL6'HEX' SET MODE
         B     K20A06SN           EXIT
*
K20A06NA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E0A06MDO,=CL6'EBCDIC' SET MODE
K20A06SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0A06') ERASE
         BR    R7                 RETURN
*
K20A06QE DS    XL16               QNAME
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20A06TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20A06TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20A06TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50A06   DS    0H
         USING *,R6
* PF5  : DELETEQ TS
* WORKING STORAGE DISPLAY
         USING EDF0A06S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0A06TSO   MOVE TRANSID
         MVC   EWKSPGO,E0A06PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0A06TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0A06SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0A06L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20C02   DS    0H
* GETMAIN
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0C02S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0C02') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K50C02   DS    0H
         USING *,R6
* PF5  : GETMAIN
* WORKING STORAGE DISPLAY
         USING EDF0C02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0C02TSO   MOVE TRANSID
         MVC   EWKSPGO,E0C02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0C02TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0C02SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0C02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20C04   DS    0H
* FREEMAIN
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0C04S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0C04') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K50C04   DS    0H
         USING *,R6
* PF5  : FREEMAIN
* WORKING STORAGE DISPLAY
         USING EDF0C04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0C04TSO   MOVE TRANSID
         MVC   EWKSPGO,E0C04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0C04TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0C04SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0C04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20E02IN DS    0H
         USING *,R6
* PROGRAM INITIATION (LINK OR XCTL)
*
* CLEAR: RESEND MAP
* PF2  : PROGRAM INITIATION
* EIBREQID AND EIBRSRCE TO BE CONVERTED
         USING EDF01S,R4
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    KPSEND01           EXIT IF IT IS
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   KP01               EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   KPSAV01A,E01EBRQO  SAVE EIBREQID
         TR    E01EBRQO(8),E01EBC TRANSLATE TO EBCDIC
         MVC   E01EBRQO+8(11),=11C' ' CLEAR REMAINDER
         MVC   KPSAV01B,E01EBRSO  SAVE EIBRSRCE
         TR    E01EBRSO(8),E01EBC TRANSLATE TO EBCDIC
         MVC   E01EBRSO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01MODEO,=CL6'EBCDIC' SET MODE
         B     KPSEND01           EXIT
KP01     EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP01H              EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E01EBRQO(8),KPSAV01A MOVE EIBREQID DATA
         TR    E01EBRQO(8),E01ASC TRANSLATE TO ASCII
         MVC   E01EBRQO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01EBRSO(8),KPSAV01B MOVE EIBRSRCE DATA
         TR    E01EBRSO(8),E01ASC TRANSLATE TO ASCII
         MVC   E01EBRSO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01MODEO,=CL6'ASCII' SET MODE
         B     KPSEND01           EXIT
*
KP01H    EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP01E              EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* EIBREQID TO HEX
         LA    R1,E01HEX          R1=TRANSLATE TABLE ADDRESS
         LA    R8,KPSAV01A        SOURCE ADDRESS
         MVHHI E01EBRQO,C'X'''    MOVE X'
         LA    R14,E01EBRQO+2     DESTINATION ADDRESS
         LA    R15,8              SOURCE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVI   E01EBRQO+18,C''''  MOVE ENDING QUOTE
* EIBRSRCE TO HEX
         LA    R8,KPSAV01B        SOURCE ADDRESS
         MVHHI E01EBRSO,C'X'''    MOVE X'
         LA    R14,E01EBRSO+2     DESTINATION ADDRESS
         LA    R15,8              SOURCE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVI   E01EBRSO+18,C''''  MOVE ENDING QUOTE
         MVC   E01MODEO,=CL6'HEX' SET MODE
         B     KPSEND01           EXIT
*
KP01E    EQU   *
* HAS TO BE IN HEX MODE
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E01EBRQO(8),KPSAV01A MOVE EIBREQID DATA
         TR    E01EBRQO(8),E01EBC TRANSLATE TO EBCDIC
         MVC   E01EBRQO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01EBRSO(8),KPSAV01B MOVE EIBRSRCE DATA
         TR    E01EBRSO(8),E01EBC TRANSLATE TO EBCDIC
         MVC   E01EBRSO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01MODEO,=CL6'EBCDIC' SET MODE
KPSEND01 EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF01') ERASE
         BR    R7                 RETURN
*
KPSAV01A DS    XL8                SAVE EIBREQID
KPSAV01B DS    XL8                SAVE EIBRSRCE
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
E01EBC   EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
E01ASC   EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
E01HEX   DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50E02IN DS    0H
         USING *,R6
* PF5  : PROGRAM INITIATION : 'AFTER' LINK
*        PROGRAM INITIATION : 'AFTER' XCTL
* WORKING STORAGE DISPLAY
         USING EDF01S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E01TRANO   MOVE TRANSID
         MVC   EWKSPGO,E01PROGO   MOVE PROGRAM
         MVC   EWKSTNO,E01TSKNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E01SCRNO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF01L          BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20E02   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'AFTER' LINK
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    KPSEND03           EXIT IF IT IS
* COMMAREA TO BE CONVERTED IF PRESENT
         USING EDF0E02S,R4
         MVI   E0E02P2A,DFHBMASD  SET PF2 KEY OFF
         CLI   E0E02CMO,C'C'      ANY COMMAREA ?
         BNE   KPSEND03           EXIT IF NONE
* THERE IS A COMMAREA
         MVI   E0E02P2A,DFHBMASB  SET PF2 KEY ON
         PACK  K20E02DC+5(3),E0E02LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E02DC        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   KPMAX03            EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
KPMAX03  EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20E02DC        SAVE DISPLAY LENGTH-1
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   KP03               EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         EX    R8,KP03MVCR        SAVE COMMAREA DAAT
         EX    R8,KP03TRE         COMMAREA TO EBCDIC
         MVC   E0E02MDO,=CL6'EBCDIC' SET MODE
         B     KPSEND03           EXIT
*
KP03     EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E02DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP03H              EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         EX    R8,KP03MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP03TRA         COMMAREA TO ASCII
         MVC   E0E02MDO,=CL6'ASCII' SET MODE
         B     KPSEND03           EXIT
*
KP03H    EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP03E              EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* MAX DATA LENGTH IS 67 AS COMMAREA (..//..)
* HEX DATA FORMAT WILL BE  COMMAREA (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LR    R0,R15             SAVE LENGTH
         LA    R1,K20E02TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,KPSAV03         SOURCE ADDRESS
         XC    E0E02CMO+10(69),E0E02CMO+10 CLEAR COMMAREA DISPLAY
         MVHHI E0E02CMO+10,C'X''' MOVE X'
         LA    R14,E0E02CMO+12    DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   KP03LOK            EXIT IF NOT
         LA    R15,32             SET MAXIMUM
KP03LOK  EQU   *
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0E02CMO+12(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0E02MDO,=CL6'HEX' SET MODE
         B     KPSEND03           EXIT
*
KP03E    EQU   *
* HAS TO BE IN HEX MODE
         PACK  K20E02DC+5(3),E0E02LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E02DC        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   KPMAX03E           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
KPMAX03E EQU   *
         BCTR  R8,0               -1 FOR EX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E0E02CMO+10(69),E0E02CMO+10 CLEAR COMMAREA DISPLAY
         EX    R8,KP03MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP03TRE         COMMAREA TO EBCDIC
         LA    R5,E0E02CMO+11(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
         MVC   E0E02MDO,=CL6'EBCDIC' SET MODE
KPSEND03 EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E02') ERASE
         BR    R7                 RETURN
*
K20E02DC DC    PL8'0'
KPSAV03  DS    XL67
KP03MVCR MVC   KPSAV03(0),E0E02CMO+10 SAVE COMMAREA
KP03TRE  TR    E0E02CMO+10(0),K20E02TE TRANSLATE COMMAREA TO EBCDIC
KP03MVC  MVC   E0E02CMO+10(0),KPSAV03 MOVE COMMAREA BACK
KP03TRA  TR    E0E02CMO+10(0),K20E02TA TRANSLATE COMMAREA TO ASCII
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20E02TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20E02TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20E02TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50E02   DS    0H
         USING *,R6
* PF5  : 'BEFORE' LINK (NOT LEVEL0)
* WORKING STORAGE DISPLAY
         USING EDF0E02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E02TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E02TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0E02SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0E02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20E04   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'AFTER' XCTL
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    KPSEND07           EXIT IF IT IS
* COMMAREA TO BE CONVERTED IF PRESENT
         USING EDF0E04S,R4
         MVI   E0E04P2A,DFHBMASD  SET PF2 KEY OFF
         CLI   E0E04CMO,C'C'      ANY COMMAREA ?
         BNE   KPSEND07           EXIT IF NONE
* THERE IS A COMMAREA
         MVI   E0E04P2A,DFHBMASB  SET PF2 KEY ON
         PACK  K20E04DC+5(3),E0E04LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E04DC        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   KPMAX07            EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
KPMAX07  EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20E04DC        SAVE DISPLAY LENGTH-1
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   KP07               EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         EX    R8,KP07MVCR        SAVE COMMAREA
         EX    R8,KP07TRE         COMMAREA TO EBCDIC
         MVC   E0E04MDO,=CL6'EBCDIC' SET MODE
         B     KPSEND07           EXIT
*
KP07     EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP07H              EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E04DC        RESTORE LENGTH FOR EX
         EX    R8,KP07MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP07TRA         COMMAREA TO ASCII
         MVC   E0E04MDO,=CL6'ASCII' SET MODE
         B     KPSEND07           EXIT
*
KP07H    EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP07E              EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E04DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS COMMAREA (..//..)
* HEX DATA FORMAT WILL BE  COMMAREA (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LR    R0,R15             SAVE LENGTH
         LA    R1,K20E04TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,KPSAV07         SOURCE ADDRESS
         XC    E0E04CMO+10(69),E0E04CMO+10 CLEAR COMMAREA DISPLAY
         MVHHI E0E04CMO+10,C'X''' MOVE X'
         LA    R14,E0E04CMO+12    DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   KP07LOK            EXIT IF NOT
         LA    R15,32             SET MAXIMUM
KP07LOK  EQU   *
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0E04CMO+12(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0E04MDO,=CL6'HEX' SET MODE
         B     KPSEND07           EXIT
*
KP07E    EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E04DC        RESTORE LENGTH FOR EX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E0E04CMO+10(69),E0E04CMO+10 CLEAR COMMAREA DISPLAY
         EX    R8,KP07MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP07TRE         COMMAREA TO EBCDIC
         LA    R5,E0E04CMO+11(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
         MVC   E0E04MDO,=CL6'EBCDIC' SET MODE
KPSEND07 EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E04') ERASE
         BR    R7                 RETURN
*
K20E04DC DC    PL8'0'
KPSAV07  DS    XL67
KP07MVCR MVC   KPSAV07(0),E0E04CMO+10 SAVE COMMAREA
KP07TRE  TR    E0E04CMO+10(0),K20E04TE TRANSLATE COMMAREA TO EBCDIC
KP07MVC  MVC   E0E04CMO+10(0),KPSAV07 MOVE COMMAREA BACK
KP07TRA  TR    E0E04CMO+10(0),K20E04TA TRANSLATE COMMAREA TO ASCII
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20E04TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20E04TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20E04TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50E04   DS    0H
         USING *,R6
* PF5  : 'BEFORE' XCTL
* WORKING STORAGE DISPLAY
         USING EDF0E04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E04TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E04TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0E04SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0E04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20E06   DS    0H
* LOAD
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0E06S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E06') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K50E06   DS    0H
         USING *,R6
* PF5  : LOAD
* WORKING STORAGE DISPLAY
         USING EDF0E06S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E06TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E06PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E06TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0E06SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0E06L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20E08   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' RETURN
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    KPSEND02           EXIT IF IT IS
* COMMAREA TO BE CONVERTED IF PRESENT
         USING EDF0E08S,R4
         MVI   E0E08P2A,DFHBMASD  SET PF2 KEY OFF
         CLI   E0E08CMO,C'C'      ANY COMMAREA ?
         BNE   KPSEND02           EXIT IF NONE
* THERE IS A COMMAREA
         MVI   E0E08P2A,DFHBMASB  SET PF2 KEY ON
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   KP02               EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         PACK  K20E08DC+5(3),E0E08LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E08DC        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   KPMAX02            EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
KPMAX02  EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20E08DC        SAVE DISPLAY LENGTH-1
         EX    R8,KP02MVCR        SAVE COMMAREA
         EX    R8,KP02TRE         COMMAREA TO EBCDIC
         MVC   E0E08MDO,=CL6'EBCDIC' SET MODE
         B     KPSEND02           EXIT
*
KP02     EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E08DC        RESTORE LENGTH-1 FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   KP02H              EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         EX    R8,KP02MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP02TRA         COMMAREA TO ASCII
         MVC   E0E08MDO,=CL6'ASCII' SET MODE
         B     KPSEND02           EXIT
*
KP02H    EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE ?
         BNE   KP02E              EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E08DC        RESTORE LENGTH-1 FOR EX
* MAX DATA LENGTH IS 67 AS COMMAREA (..//..)
* HEX DATA FORMAT WILL BE  COMMAREA (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LA    R1,K20E08TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,KPSAV02         SOURCE ADDRESS
         XC    E0E08CMO+10(69),E0E08CMO+10 CLEAR COMMAREA DISPLAY
         MVHHI E0E08CMO+10,C'X''' MOVE X'
         LA    R14,E0E08CMO+12    DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   KP02LOK            EXIT IF NOT
         LA    R15,32             SET MAXIMUM
KP02LOK  EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0E08CMO+12(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0E08MDO,=CL6'HEX' SET MODE
         B     KPSEND02           EXIT
*
KP02E    EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E08DC        RESTORE LENGTH-1 FOR EX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E0E08CMO+10(69),E0E08CMO+10 CLEAR COMMAREA DISPLAY
         EX    R8,KP02MVC         MOVE COMMAREA DATA BACK
         EX    R8,KP02TRE         COMMAREA TO EBCDIC
         LA    R5,E0E08CMO+11(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
         MVC   E0E08MDO,=CL6'EBCDIC' SET MODE
KPSEND02 EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E08') ERASE
         BR    R7                 RETURN
*
K20E08DC DC    PL8'0'
KPSAV02  DS    XL67
KP02MVCR MVC   KPSAV02(0),E0E08CMO+10 SAVE COMMAREA
KP02TRE  TR    E0E08CMO+10(0),K20E08TE TRANSLATE COMMAREA TO EBCDIC
KP02MVC  MVC   E0E08CMO+10(0),KPSAV02 MOVE COMMAREA BACK
KP02TRA  TR    E0E08CMO+10(0),K20E08TA TRANSLATE COMMAREA TO ASCII
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20E08TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20E08TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20E08TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K50E08   DS    0H
         USING *,R6
* PF5  : 'BEFORE' RETURN
* WORKING STORAGE DISPLAY
         USING EDF0E08S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E08TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E08PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E08TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0E08SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0E08L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20E08PT DS    0H
* 'AFTER' RETURN : PROGRAM TERMINATION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDFKCPS,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDFKCP') ERASE
         BR    R7                 RETURN
*
K20E0A   DS    0H
* RELEASE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0E0AS,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E0A') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K50E0A   DS    0H
         USING *,R6
* PF5  : RELEASE
* WORKING STORAGE DISPLAY
         USING EDF0E0AS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E0ATSO   MOVE TRANSID
         MVC   EWKSPGO,E0E0APGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E0ATNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0E0ASCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0E0AL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K20E0E   DS    0H
* HANDLE ABEND
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF0E0ES,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E0E') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K50E0E   DS    0H
         USING *,R6
* PF5  : HANDLE ABEND
* WORKING STORAGE DISPLAY
         USING EDF0E0ES,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E0ETSO   MOVE TRANSID
         MVC   EWKSPGO,E0E0EPGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E0ETNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E0E0ESCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF0E0EL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21002   DS    0H
* ASKTIME
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF1002S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1002') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K51002   DS    0H
         USING *,R6
* PF5  : ASKTIME
* WORKING STORAGE DISPLAY
         USING EDF1002S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1002TSO   MOVE TRANSID
         MVC   EWKSPGO,E1002PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1002TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1002SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1002L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21004   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : DELAY
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21004SN           EXIT IF IT IS
         USING EDF1004S,R4
         MVI   E1004P2A,DFHBMASD  SET PF2 KEY OFF
         CLI   E1004RQO,X'00'     ANY REQID ?
         BE    K21004SN           EXIT IF NONE
         MVI   E1004P2A,DFHBMASB  SHOW PF2
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K21004NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   K21004RQ,E1004RQO+7 SAVE REQID
         TR    E1004RQO+7(8),K21004TE TRANSLATE REQID TO EBCDIC
         MVC   E1004MDO,=CL6'EBCDIC' SET MODE
         B     K21004SN           EXIT
*
K21004NR EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K21004NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E1004RQO+7(8),K21004RQ MOVE REQID BACK
         TR    E1004RQO+7(8),K21004TA TRANSLATE REQID TO ASCII
         MVC   E1004MDO,=CL6'ASCII' SET MODE
         B     K21004SN           EXIT
*
K21004NE EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K21004NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         LA    R1,K21004TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21004RQ        SOURCE ADDRESS
         XC    E1004RQO+7(20),E1004RQO+7 CLEAR REQID DISPLAY
         MVHHI E1004RQO+7,C'X'''  MOVE X'
         LA    R14,E1004RQO+9     DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1004RQO+25,C''')' MOVE END ')
         MVC   E1004MDO,=CL6'HEX' SET MODE
         B     K21004SN           EXIT
*
K21004NA EQU   *
* HAS TO BE IN HEX MODE
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E1004RQO+7(20),E1004RQO+7 CLEAR REQID DISPLAY
         MVC   E1004RQO+7(8),K21004RQ MOVE REQID BACK
         TR    E1004RQO+7(8),K21004TE TRANSLATE REQID TO EBCDIC
         MVI   E1004RQO+15,C')'   SET REQID CLOSE BRACKET
         MVC   E1004MDO,=CL6'EBCDIC' SET MODE
K21004SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1004') ERASE
         BR    R7                 RETURN
*
K21004RQ DS    CL8
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21004TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21004TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21004TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K51004   DS    0H
         USING *,R6
* PF5  : DELAY
* WORKING STORAGE DISPLAY
         USING EDF1004S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1004TSO   MOVE TRANSID
         MVC   EWKSPGO,E1004PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1004TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1004SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1004L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21008   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : START
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21008SM           EXIT IF IT IS
         USING EDF1008S,R4
         CLI   E1008P2A,DFHBMASD  PF2 OFF ?
         BE    K21008SM           EXIT IF IT IS
* REQID
         CLI   E1008RQO,X'00'     ANY REQID ?
         BE    K21008FM           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K210081R           EXIT IF NOT
         MVC   K21008RQ,E1008RQO+11 SAVE REQID
         TR    E1008RQO+11(8),K21008TE TRANSLATE REQID TO EBCDIC
         B     K21008FM           EXIT
*
K210081R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210081E           EXIT IF NOT
         MVC   E1008RQO+11(8),K21008RQ MOVE REQID BACK
         TR    E1008RQO+11(8),K21008TA TRANSLATE REQID TO ASCII
         B     K21008FM           EXIT
*
K210081E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210081A           EXIT IF NOT
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008RQ        SOURCE ADDRESS
         XC    E1008RQO+11(20),E1008RQO+11 CLEAR REQID DISPLAY
         MVHHI E1008RQO+11,C'X'''  MOVE X'
         LA    R14,E1008RQO+13    DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008RQO+29,C''')' MOVE END ')
         B     K21008FM           EXIT
*
K210081A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008RQO+11(20),E1008RQO+11 CLEAR REQID DISPLAY
         MVC   E1008RQO+11(8),K21008RQ MOVE REQID BACK
         TR    E1008RQO+11(8),K21008TE TRANSLATE REQID TO EBCDIC
         MVI   E1008RQO+19,C')'   SET REQID CLOSE BRACKET
K21008FM EQU   *
* FROM
         CLI   E1008FMO,X'00'     ANY FROM ?
         BE    K21008RT           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K210082R           EXIT IF NOT
         PACK  K21008DC+5(3),E1008LNO+11(5) PACK FROM LENGTH
         CVB   R8,K21008DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K21008LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K21008EX           EXIT
*
K21008LK EQU   *
         CHI   R8,66              >66 ?
         BNH   K21008EX           EXIT IF NOT
         LA    R8,66              SET MAXIMUM LENGTH
K21008EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K21008DC        SAVE DISPLAY LENGTH-1
         EX    R8,K21008MF        SAVE FROM DATA
         EX    R8,K21008RE        FROM TO EBCDIC
         B     K21008RT           EXIT
*
K210082R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21008DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210082E           EXIT IF NOT
         EX    R8,K21008FB        MOVE FROM DATA BACK
         EX    R8,K21008FA        FROM TO ASCII
         B     K21008RT           EXIT
*
K210082E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210082A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21008DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 66 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 66-3=63/2=31
         LA    R15,1(R8)          R15=FROM LENGTH
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008FR        SOURCE ADDRESS
         XC    E1008FMO+11(70),E1008FMO+11 CLEAR FROM DISPLAY
         MVHHI E1008FMO+11,C'X'''  MOVE X'
         LA    R14,E1008FMO+13    DESTINATION ADDRESS
         CHI   R15,31             >31 ?
         BNH   K21008HX           EXIT IF NOT
         LA    R15,31             SET MAXIMUM
K21008HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E1008FMO+13(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K21008RT           EXIT
*
K210082A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21008DC        RESTORE LENGTH-1 FOR EX
         XC    E1008FMO+11(70),E1008FMO+11 CLEAR FROM DISPLAY
         EX    R8,K21008FB        MOVE FROM DATA BACK
         EX    R8,K21008RE        FROM TO EBCDIC
         LA    R5,E1008FMO+12(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
K21008RT EQU   *
* RTRANSID
         CLI   E1008RTO,X'00'     ANY RTRANSID ?
         BE    K21008RM           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K210083R           EXIT IF NOT
         MVC   K21008RD,E1008RTO+11 SAVE RTRANSID
         TR    E1008RTO+11(4),K21008TE TRANSLATE RTRANSID TO EBCDIC
         B     K21008RM           EXIT
*
K210083R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210083E           EXIT IF NOT
         MVC   E1008RTO+11(4),K21008RD MOVE RTRANSID BACK
         TR    E1008RTO+11(4),K21008TA TRANSLATE RTRANSID TO ASCII
         B     K21008RM           EXIT
*
K210083E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210083A           EXIT IF NOT
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008RD        SOURCE ADDRESS
         XC    E1008RTO+11(12),E1008RTO+11 CLEAR RTRANSID DISPLAY
         MVHHI E1008RTO+11,C'X'''  MOVE X'
         LA    R14,E1008RTO+13    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008RTO+21,C''')' MOVE END ')
         B     K21008RM           EXIT
*
K210083A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008RTO+11(12),E1008RTO+11 CLEAR RTRANSID DISPLAY
         MVC   E1008RTO+11(4),K21008RD MOVE RTRANSID BACK
         TR    E1008RTO+11(4),K21008TE TRANSLATE RTRANSID TO EBCDIC
         MVI   E1008RTO+15,C')'   SET RTRANSID CLOSE BRACKET
K21008RM EQU   *
* RTERMID
         CLI   E1008RMO,X'00'     ANY RTERMID ?
         BE    K21008QU           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K210084R           EXIT IF NOT
         MVC   K21008TI,E1008RMO+11 SAVE RTERMID
         TR    E1008RMO+11(4),K21008TE TRANSLATE RTERMID TO EBCDIC
         B     K21008QU           EXIT
*
K210084R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210084E           EXIT IF NOT
         MVC   E1008RMO+11(4),K21008TI MOVE RTERMID BACK
         TR    E1008RMO+11(4),K21008TA TRANSLATE RTERMID TO ASCII
         B     K21008QU           EXIT
*
K210084E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210084A           EXIT IF NOT
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008TI        SOURCE ADDRESS
         XC    E1008RMO+11(12),E1008RMO+11 CLEAR RTERMID DISPLAY
         MVHHI E1008RMO+11,C'X'''  MOVE X'
         LA    R14,E1008RMO+13    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008RMO+21,C''')' MOVE END ')
         B     K21008QU           EXIT
*
K210084A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008RMO+11(12),E1008RMO+11 CLEAR RTERMID DISPLAY
         MVC   E1008RMO+11(4),K21008TI MOVE RTERMID BACK
         TR    E1008RMO+11(4),K21008TE TRANSLATE RTERMID TO EBCDIC
         MVI   E1008RMO+15,C')'   SET RTERMID CLOSE BRACKET
K21008QU EQU   *
* QUEUE
         CLI   E1008QUO,X'00'     ANY QUEUE ?
         BE    K21008SM           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K210085R           EXIT IF NOT
         MVC   K21008QE,E1008QUO+11 SAVE QUEUE
         TR    E1008QUO+11(8),K21008TE TRANSLATE QUEUE TO EBCDIC
         B     K21008SM           EXIT
*
K210085R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210085E           EXIT IF NOT
         MVC   E1008QUO+11(8),K21008QE MOVE QUEUE BACK
         TR    E1008QUO+11(8),K21008TA TRANSLATE QUEUE TO ASCII
         B     K21008SM           EXIT
*
K210085E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K210085A           EXIT IF NOT
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008QE        SOURCE ADDRESS
         XC    E1008QUO+11(20),E1008QUO+11 CLEAR QUEUE DISPLAY
         MVHHI E1008QUO+11,C'X'''  MOVE X'
         LA    R14,E1008QUO+13    DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008QUO+29,C''')' MOVE END ')
         B     K21008SM           EXIT
*
K210085A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008QUO+11(20),E1008QUO+11 CLEAR QUEUE DISPLAY
         MVC   E1008QUO+11(8),K21008QE MOVE QUEUE BACK
         TR    E1008QUO+11(8),K21008TE TRANSLATE QUEUE TO EBCDIC
         MVI   E1008QUO+19,C')'   SET QUEUE CLOSE BRACKET
K21008SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K21008NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E1008MDO,=CL6'EBCDIC' SET MODE
         B     K21008SN           EXIT
*
K21008NR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K21008NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E1008MDO,=CL6'ASCII' SET MODE
         B     K21008SN           EXIT
*
K21008NE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K21008NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E1008MDO,=CL6'HEX' SET MODE
         B     K21008SN           EXIT
*
K21008NA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E1008MDO,=CL6'EBCDIC' SET MODE
K21008SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1008') ERASE
         BR    R7                 RETURN
*
K21008DC DC    PL8'0'
K21008RQ DS    XL8                REQID
K21008FR DS    XL66               FROM
K21008RD DS    XL4                RTRANSID
K21008TI DS    XL4                RTERMID
K21008QE DS    XL8                QUEUE
K21008MF MVC   K21008FR(0),E1008FMO+11 SAVE FROM DATA
K21008RE TR    E1008FMO+11(0),K21008TE TRANSLATE FROM TO EBCDIC
K21008FB MVC   E1008FMO+11(0),K21008FR MOVE FROM DATA BACK
K21008FA TR    E1008FMO+11(0),K21008TA TRANSLATE FROM TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21008TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21008TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21008TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K51008   DS    0H
         USING *,R6
* PF5  : START
* WORKING STORAGE DISPLAY
         USING EDF1008S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1008TSO   MOVE TRANSID
         MVC   EWKSPGO,E1008PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1008TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1008SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1008L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K2100A   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' RETRIEVE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2100ASM           EXIT IF IT IS
         USING EDF100AS,R4
         CLI   E100AP2A,DFHBMASD  PF2 OFF ?
         BE    K2100ASM           EXIT IF IT IS
* INTO (...//...)
         CLI   E100AISO,C'S'      SET ?
         BE    K2100ART           EXIT IF IT IS
         CLI   E100AISO+15,C'('   ANY INTO ?
         BNE   K2100ART           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2100A2R           EXIT IF NOT
         PACK  K2100ADC+5(3),E100ALDO+16(5) PACK INTO DATA LENGTH
         CLI   E100ALNO,C'L'      ANY LENGTH ?
         BNE   K2100ANL           EXIT IF NONE
         PACK  K2100ADC+5(3),E100ALNO+16(5) PACK INTO LENGTH
K2100ANL EQU   *
         CVB   R8,K2100ADC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2100ALK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2100AEX           EXIT
*
K2100ALK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2100AEX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2100AEX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2100ADC        SAVE DISPLAY LENGTH-1
         EX    R8,K2100AMI        SAVE INTO DATA
         EX    R8,K2100ARE        INTO TO EBCDIC
         B     K2100ART           EXIT
*
K2100A2R EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2100ADC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A2E           EXIT IF NOT
         EX    R8,K2100AIB        MOVE INTO DATA BACK
         EX    R8,K2100AIA        INTO TO ASCII
         B     K2100ART           EXIT
*
K2100A2E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A2A           EXIT IF NOT
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2100ADC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100AIN        SOURCE ADDRESS
         XC    E100AISO+16(63),E100AISO+16 CLEAR INTO DISPLAY
         MVHHI E100AISO+16,C'X'''  MOVE X'
         LA    R14,E100AISO+16    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2100AHX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2100AHX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E100AISO+16(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K2100ART           EXIT
*
K2100A2A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2100ADC        RESTORE LENGTH-1 FOR EX
         XC    E100AISO+16(63),E100AISO+16 CLEAR INTO DISPLAY
         EX    R8,K2100AIB        MOVE INTO DATA BACK
         EX    R8,K2100ARE        INTO TO EBCDIC
         LA    R5,E100AISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K2100ART EQU   *
* RTRANSID
         CLI   E100ARTO+15,C'('   ANY RTRANSID ?
         BNE   K2100ARM           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2100A3R           EXIT IF NOT
         MVC   K2100ARD,E100ARTO+16 SAVE RTRANSID
         TR    E100ARTO+16(4),K2100ATE TRANSLATE RTRANSID TO EBCDIC
         B     K2100ARM           EXIT
*
K2100A3R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A3E           EXIT IF NOT
         MVC   E100ARTO+16(4),K2100ARD MOVE RTRANSID BACK
         TR    E100ARTO+16(4),K2100ATA TRANSLATE RTRANSID TO ASCII
         B     K2100ARM           EXIT
*
K2100A3E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A3A           EXIT IF NOT
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100ARD        SOURCE ADDRESS
         XC    E100ARTO+16(12),E100ARTO+16 CLEAR RTRANSID DISPLAY
         MVHHI E100ARTO+16,C'X'''  MOVE X'
         LA    R14,E100ARTO+18    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100ARTO+26,C''')' MOVE END ')
         B     K2100ARM           EXIT
*
K2100A3A EQU   *
* HAS TO BE IN HEX MODE
         XC    E100ARTO+16(12),E100ARTO+16 CLEAR RTRANSID DISPLAY
         MVC   E100ARTO+16(4),K2100ARD MOVE RTRANSID BACK
         TR    E100ARTO+16(4),K2100ATE TRANSLATE RTRANSID TO EBCDIC
         MVI   E100ARTO+20,C')'   SET RTRANSID CLOSE BRACKET
K2100ARM EQU   *
* RTERMID
         CLI   E100ARMO+15,C'('   ANY RTERMID ?
         BNE   K2100AQU           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2100A4R           EXIT IF NOT
         MVC   K2100ATI,E100ARMO+16 SAVE RTERMID
         TR    E100ARMO+16(4),K2100ATE TRANSLATE RTERMID TO EBCDIC
         B     K2100AQU           EXIT
*
K2100A4R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A4E           EXIT IF NOT
         MVC   E100ARMO+16(4),K2100ATI MOVE RTERMID BACK
         TR    E100ARMO+16(4),K2100ATA TRANSLATE RTERMID TO ASCII
         B     K2100AQU           EXIT
*
K2100A4E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A4A           EXIT IF NOT
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100ATI        SOURCE ADDRESS
         XC    E100ARMO+16(12),E100ARMO+16 CLEAR RTERMID DISPLAY
         MVHHI E100ARMO+16,C'X'''  MOVE X'
         LA    R14,E100ARMO+18    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100ARMO+26,C''')' MOVE END ')
         B     K2100AQU           EXIT
*
K2100A4A EQU   *
* HAS TO BE IN HEX MODE
         XC    E100ARMO+16(12),E100ARMO+16 CLEAR RTERMID DISPLAY
         MVC   E100ARMO+16(4),K2100ATI MOVE RTERMID BACK
         TR    E100ARMO+16(4),K2100ATE TRANSLATE RTERMID TO EBCDIC
         MVI   E100ARMO+20,C')'   SET RTERMID CLOSE BRACKET
K2100AQU EQU   *
* QUEUE
         CLI   E100AQUO+15,C'('   ANY QUEUE ?
         BNE   K2100ASM           EXIT IF NONE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2100A5R           EXIT IF NOT
         MVC   K2100AQE,E100AQUO+16 SAVE QUEUE
         TR    E100AQUO+16(8),K2100ATE TRANSLATE QUEUE TO EBCDIC
         B     K2100ASM           EXIT
*
K2100A5R EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A5E           EXIT IF NOT
         MVC   E100AQUO+16(8),K2100AQE MOVE QUEUE BACK
         TR    E100AQUO+16(8),K2100ATA TRANSLATE QUEUE TO ASCII
         B     K2100ASM           EXIT
*
K2100A5E EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100A5A           EXIT IF NOT
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100AQE        SOURCE ADDRESS
         XC    E100AQUO+16(20),E100AQUO+16 CLEAR QUEUE DISPLAY
         MVHHI E100AQUO+16,C'X'''  MOVE X'
         LA    R14,E100AQUO+18    DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100AQUO+34,C''')' MOVE END ')
         B     K2100ASM           EXIT
*
K2100A5A EQU   *
* HAS TO BE IN HEX MODE
         XC    E100AQUO+16(20),E100AQUO+16 CLEAR QUEUE DISPLAY
         MVC   E100AQUO+16(8),K2100AQE MOVE QUEUE BACK
         TR    E100AQUO+16(8),K2100ATE TRANSLATE QUEUE TO EBCDIC
         MVI   E100AQUO+24,C')'   SET QUEUE CLOSE BRACKET
K2100ASM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2100ANR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E100AMDO,=CL6'EBCDIC' SET MODE
         B     K2100ASN           EXIT
*
K2100ANR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC ?
         BNE   K2100ANE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E100AMDO,=CL6'ASCII' SET MODE
         B     K2100ASN           EXIT
*
K2100ANE EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII ?
         BNE   K2100ANA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         MVC   E100AMDO,=CL6'HEX' SET MODE
         B     K2100ASN           EXIT
*
K2100ANA EQU   *
* MUST BE HEX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   E100AMDO,=CL6'EBCDIC' SET MODE
K2100ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF100A') ERASE
         BR    R7                 RETURN
*
K2100ADC DC    PL8'0'
K2100AIN DS    XL61               INTO
K2100ARD DS    XL4                RTRANSID
K2100ATI DS    XL4                RTERMID
K2100AQE DS    XL8                QUEUE
K2100AMI MVC   K2100AIN(0),E100AISO+16 SAVE INTO DATA
K2100ARE TR    E100AISO+16(0),K2100ATE TRANSLATE INTO TO EBCDIC
K2100AIB MVC   E100AISO+16(0),K2100AIN MOVE INTO DATA BACK
K2100AIA TR    E100AISO+16(0),K2100ATA TRANSLATE INTO TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2100ATE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2100ATA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2100ATH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K5100A   DS    0H
         USING *,R6
* PF5  : RETRIEVE
* WORKING STORAGE DISPLAY
         USING EDF100AS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E100ATSO   MOVE TRANSID
         MVC   EWKSPGO,E100APGO   MOVE PROGRAM
         MVC   EWKSTNO,E100ATNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E100ASCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF100AL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K2100C   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : CANCEL
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2100CSN           EXIT IF IT IS
         USING EDF100CS,R4
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K2100CNR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         MVC   K2100CRQ,E100CRQO+7 SAVE REQID
         TR    E100CRQO+7(8),K2100CTE TRANSLATE REQID TO EBCDIC
         MVC   E100CMDO,=CL6'EBCDIC' SET MODE
         B     K2100CSN           EXIT
*
K2100CNR EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100CNE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         MVC   E100CRQO+7(8),K2100CRQ MOVE REQID BACK
         TR    E100CRQO+7(8),K2100CTA TRANSLATE REQID TO ASCII
         MVC   E100CMDO,=CL6'ASCII' SET MODE
         B     K2100CSN           EXIT
*
K2100CNE EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K2100CNA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
         LA    R1,K2100CTH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100CRQ        SOURCE ADDRESS
         XC    E100CRQO+7(20),E100CRQO+7 CLEAR REQID DISPLAY
         MVHHI E100CRQO+7,C'X'''  MOVE X'
         LA    R14,E100CRQO+9     DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100CRQO+25,C''')' MOVE END ')
         MVC   E100CMDO,=CL6'HEX' SET MODE
         B     K2100CSN           EXIT
*
K2100CNA EQU   *
* HAS TO BE IN HEX MODE
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E100CRQO+7(20),E100CRQO+7 CLEAR REQID DISPLAY
         MVC   E100CRQO+7(8),K2100CRQ MOVE REQID BACK
         TR    E100CRQO+7(8),K2100CTE TRANSLATE REQID TO EBCDIC
         MVI   E100CRQO+15,C')'   SET REQID CLOSE BRACKET
         MVC   E100CMDO,=CL6'EBCDIC' SET MODE
K2100CSN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF100C') ERASE
         BR    R7                 RETURN
*
K2100CRQ DS    CL8
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2100CTE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2100CTA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2100CTH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K5100C   DS    0H
         USING *,R6
* PF5  : CANCEL
* WORKING STORAGE DISPLAY
         USING EDF100CS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E100CTSO   MOVE TRANSID
         MVC   EWKSPGO,E100CPGO   MOVE PROGRAM
         MVC   EWKSTNO,E100CTNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E100CSCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF100CL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21204   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ENQ
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21204SN           EXIT IF IT IS
         USING EDF1204S,R4
         CLI   E1204LHA,DFHBMASD  IS LENGTH DARK ?
         BNE   K21204RL           EXIT IF NOT
* NO LENGTH
         MVI   E1204P2A,DFHBMASD  SET PF2 KEY OFF
         B     K21204SN           EXIT
*
K21204RL EQU   *
         PACK  K21204DC+5(3),E1204LNO+1(5) PACK RESOURCE LENGTH
         CVB   R8,K21204DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K21204LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K21204EX           EXIT
*
K21204LK EQU   *
         CHI   R8,67              >67 ?
         BNH   K21204EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K21204EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K21204DC        SAVE DISPLAY LENGTH-1
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K21204NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         EX    R8,K21204MR        SAVE RESOURCE DATA
         EX    R8,K21204RE        RESOURCE TO EBCDIC
         MVC   E1204MDO,=CL6'EBCDIC' SET MODE
         B     K21204SN           EXIT
*
K21204NR EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21204DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K21204NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         EX    R8,K21204MB        MOVE RESOURCE DATA BACK
         EX    R8,K21204RA        RESOURCE TO ASCII
         MVC   E1204MDO,=CL6'ASCII' SET MODE
         B     K21204SN           EXIT
*
K21204NE EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K21204NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21204DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=RESOURCE LENGTH
         LA    R1,K21204TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21204RS        SOURCE ADDRESS
         XC    E1204RSO+1(69),E1204RSO+1 CLEAR RESOURCE DISPLAY
         MVHHI E1204RSO+1,C'X'''  MOVE X'
         LA    R14,E1204RSO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K21204HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K21204HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E1204RSO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E1204MDO,=CL6'HEX' SET MODE
         B     K21204SN           EXIT
*
K21204NA EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21204DC        RESTORE LENGTH FOR EX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E1204RSO+1(69),E1204RSO+1 CLEAR RESOURCE DISPLAY
         EX    R8,K21204MB        MOVE RESOURCE DATA BACK
         EX    R8,K21204RE        RESOURCE TO EBCDIC
         LA    R5,E1204RSO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RESOURCE CLOSE BRACKET
         MVC   E1204MDO,=CL6'EBCDIC' SET MODE
K21204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1204') ERASE
         BR    R7                 RETURN
*
K21204DC DC    PL8'0'
K21204RS DS    XL67
K21204MR MVC   K21204RS(0),E1204RSO+1 SAVE RESOURCE DATA
K21204RE TR    E1204RSO+1(0),K21204TE TRANSLATE RESOURCE TO EBCDIC
K21204MB MVC   E1204RSO+1(0),K21204RS MOVE RESOURCE BACK
K21204RA TR    E1204RSO+1(0),K21204TA TRANSLATE RESOURCE TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21204TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21204TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21204TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K51204   DS    0H
         USING *,R6
* PF5  : ENQ
* WORKING STORAGE DISPLAY
         USING EDF1204S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1204TSO   MOVE TRANSID
         MVC   EWKSPGO,E1204PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1204TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1204SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1204L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21206   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' AND 'AFTER' DEQ
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21206SN           EXIT IF IT IS
         USING EDF1206S,R4
         CLI   E1206LHA,DFHBMASD  IS LENGTH DARK ?
         BNE   K21206RL           EXIT IF NOT
* NO LENGTH
         MVI   E1206P2A,DFHBMASD  SET PF2 KEY OFF
         B     K21206SN           EXIT
*
K21206RL EQU   *
         PACK  K21206DC+5(3),E1206LNO+1(5) PACK RESOURCE LENGTH
         CVB   R8,K21206DC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K21206LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K21206EX           EXIT
*
K21206LK EQU   *
         CHI   R8,67              >67 ?
         BNH   K21206EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K21206EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K21206DC        SAVE DISPLAY LENGTH-1
         CLI   CURRMODE,C'R'      SAVE AND CONVERT TO EBCDIC ?
         BNE   K21206NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         EX    R8,K21206MR        SAVE RESOURCE DATA
         EX    R8,K21206RE        RESOURCE TO EBCDIC
         MVC   E1206MDO,=CL6'EBCDIC' SET MODE
         B     K21206SN           EXIT
*
K21206NR EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21206DC        RESTORE LENGTH FOR EX
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE ?
         BNE   K21206NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE
         EX    R8,K21206MB        MOVE RESOURCE DATA BACK
         EX    R8,K21206RA        RESOURCE TO ASCII
         MVC   E1206MDO,=CL6'ASCII' SET MODE
         B     K21206SN           EXIT
*
K21206NE EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN EBCDIC MODE ?
         BNE   K21206NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21206DC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=RESOURCE LENGTH
         LA    R1,K21206TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21206RS        SOURCE ADDRESS
         XC    E1206RSO+1(69),E1206RSO+1 CLEAR RESOURCE DISPLAY
         MVHHI E1206RSO+1,C'X'''  MOVE X'
         LA    R14,E1206RSO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K21206HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K21206HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E1206RSO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E1206MDO,=CL6'HEX' SET MODE
         B     K21206SN           EXIT
*
K21206NA EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21206DC        RESTORE LENGTH FOR EX
         MVI   CURRMODE,C'E'      SET EBCDIC MODE
         XC    E1206RSO+1(69),E1206RSO+1 CLEAR RESOURCE DISPLAY
         EX    R8,K21206MB        MOVE RESOURCE DATA BACK
         EX    R8,K21206RE        RESOURCE TO EBCDIC
         LA    R5,E1206RSO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RESOURCE CLOSE BRACKET
         MVC   E1206MDO,=CL6'EBCDIC' SET MODE
K21206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1206') ERASE
         BR    R7                 RETURN
*
K21206DC DC    PL8'0'
K21206RS DS    XL67
K21206MR MVC   K21206RS(0),E1206RSO+1 SAVE RESOURCE DATA
K21206RE TR    E1206RSO+1(0),K21206TE TRANSLATE RESOURCE TO EBCDIC
K21206MB MVC   E1206RSO+1(0),K21206RS MOVE RESOURCE BACK
K21206RA TR    E1206RSO+1(0),K21206TA TRANSLATE RESOURCE TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21206TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21206TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21206TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         DROP  R4,R6
*
K51206   DS    0H
         USING *,R6
* PF5  : DEQ
* WORKING STORAGE DISPLAY
         USING EDF1206S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1206TSO   MOVE TRANSID
         MVC   EWKSPGO,E1206PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1206TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1206SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1206L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21802   DS    0H
* RECEIVE MAP
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF1802S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1802') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K51802   DS    0H
         USING *,R6
* PF5  : RECEIVE MAP
* WORKING STORAGE DISPLAY
         USING EDF1802S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1802TSO   MOVE TRANSID
         MVC   EWKSPGO,E1802PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1802TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1802SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1802L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21804   DS    0H
* SEND MAP
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF1804S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1804') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K51804   DS    0H
         USING *,R6
* PF5  : SEND MAP
* WORKING STORAGE DISPLAY
         USING EDF1804S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1804TSO   MOVE TRANSID
         MVC   EWKSPGO,E1804PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1804TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1804SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1804L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21812   DS    0H
* SEND CONTROL
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF1812S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1812') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K51812   DS    0H
         USING *,R6
* PF5  : SEND CONTROL
* WORKING STORAGE DISPLAY
         USING EDF1812S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1812TSO   MOVE TRANSID
         MVC   EWKSPGO,E1812PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1812TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1812SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1812L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
K21C02   DS    0H
* DUMP TRANSACTION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : NO PROCESSING
         USING EDF1C02S,R4
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1C02') ERASE
         BR    R7                 RETURN
*
         DROP  R4,R6
*
K51C02   DS    0H
         USING *,R6
* PF5  : DUMP TRANSACTION
* WORKING STORAGE DISPLAY
         USING EDF1C02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1C02TSO   MOVE TRANSID
         MVC   EWKSPGO,E1C02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1C02TNO   MOVE TASK NUMBER
         MVC   EWKSSCO,E1C02SCO   MOVE DISPLAY NO.
         DROP  R4,R9
         AHI   R4,EDF1C02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
         DROP  R6
*
WORKSTG  DS    0H
* R6 : ORIGINAL KEY ROUTINE BASE
* R7 : RETURN FROM KEY ROUTINE
         STRL  R12,KPWSR12        SAVE ORIGINAL BASE 1
         BALR  R12,0              SET BASE
         USING *,R12
* R4 POINTS TO AL4(DSA),AL2(CICSDSALEN),AL2(DSALEN)
         L     R5,0(R4)           R5=REAL DSA ADDRESS
         ST    R5,KPWSREAL        SAVE REAL DSA ADDRESS
         ST    R5,KPWSRDSA        SAVE REAL DSA ADDRESS OF TOP LINE
         LR    R0,R5              R0=REAL DSA ADDRESS
         AH    R0,4(R4)           + CICS DSA LENGTH
         ST    R0,KPWSUSER        SAVE REAL USER DSA ADDRESS
         LH    R8,6(R4)           R8=DSA LENGTH
         AHI   R4,8               R4 POINTS TO COPY DSA
         ST    R4,KPWSCOPY        SAVE COPY DSA ADDRESS
         ST    R4,KPWSCDSA        SAVE COPY DSA ADDRESS OF TOP LINE
         AR    R4,R8              POINT TO BYTE AFTER END OF DSA
         ST    R4,KPWSCEND        SAVE IT
         XC    KPWSOFST,KPWSOFST  SET OFFSET TO ZERO
         LA    R4,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R4
*@CICS DSA @ 00000000/X'0000'...
* USER DSA @ 00000000/X'0000'...DSA LENGTH=X'0000'
* CONVERT REAL CICS DSA ADDRESS
         LA    R1,KPHEXWS         R1=TRANSLATE TABLE ADDRESS
         LA    R15,4              R15=ADDRESS LENGTH
         LA    R8,KPWSREAL        SOURCE ADDRESS
         LA    R14,KPWSHED1+11    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT CICS DSA LENGTH
         L     R14,KPWSUSER       R14=REAL USER DSA ADDRESS
         S     R14,KPWSREAL       - REAL DSA ADDRESS=CICS DSA LENGTH
         STH   R14,KPWSRTRK       SAVE IT
         LA    R15,2              R15=LENGTH SIZE
         LA    R8,KPWSRTRK        SOURCE ADDRESS
         LA    R14,KPWSHED1+22    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT REAL USER DSA ADDRESS
         LA    R15,4              R15=ADDRESS LENGTH
         LA    R8,KPWSUSER        SOURCE ADDRESS
         LA    R14,KPWSHED2+11    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT USER DSA LENGTH
         L     R14,KPWSCEND       R14=END OF COPY DSA ADDRESS
         S     R14,KPWSCOPY       - COPY DSA ADDRESS=DSA LENGTH
         STH   R14,KPWSCTRK       SAVE IT
         SH    R14,KPWSRTRK       - CICS DSA ADDRESS=USER DSA LENGTH
         STH   R14,KPWSRTRK       SAVE IT
         LA    R15,2              R15=LENGTH SIZE
         LA    R8,KPWSRTRK        SOURCE ADDRESS
         LA    R14,KPWSHED2+22    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT DSA LENGTH
         LA    R15,2              R15=ADDRESS LENGTH
         LA    R8,KPWSCTRK        SOURCE ADDRESS
         LA    R14,KPWSHED3+13    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVC   EWKSHEDO,KPWSHED1  MOVE SUB-HEADING TO MAP
KPWSRFSH EQU   *
         LA    R4,EDFWKS          ADDRESS MAP
         MVC   KPWSRTRK,KPWSRDSA  SET REAL ADDRESS TRACKER
         MVC   KPWSCTRK,KPWSCDSA  SET COPY ADDRESS TRACKER
         MVC   KPWSOTRK,KPWSOFST  SET OFFSET TRACKER
         LA    R9,EWKSL01O        R9=1ST DISPLAY LINE
         USING KPWSMAP,R9
         XC    KPWSLINE,KPWSLINE  CLEAR LINE COUNT
         MVI   EWKSP7A,DFHBMASD   SET PF7 DARK
         MVI   EWKSP8A,DFHBMASD   SET PF8 DARK
         MVI   EWKSPAA,DFHBMASD   SET PF10 DARK
         MVI   EWKSPBA,DFHBMASD   SET PF11 DARK
KPWSLOOP EQU   *
         MVC   0(L'EWKSL01O,R9),=CL79' ' BLANK MAP LINE
* CONVERT CURRENT REAL DSA ADDRESS
         LA    R1,KPHEXWS         R1=TRANSLATE TABLE ADDRESS
         LA    R15,4              R15=ADDRESS LENGTH
         LA    R8,KPWSRTRK        SOURCE ADDRESS
         LA    R14,KPWSADD        DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT OFFSET
         LA    R15,3              R15=OFFSET LENGTH
         LA    R8,KPWSOTRK+1      SOURCE ADDRESS
         LA    R14,KPWSOFF        DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT DATA TO HEX
         LA    R15,16             R15=DATA LENGTH
         L     R8,KPWSCTRK        SOURCE ADDRESS
         LA    R14,KPWSDATA       DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVC   KPWSHEX1,KPWSDATA  MOVE
         MVC   KPWSHEX2,KPWSDATA+8     DATA
         MVC   KPWSHEX3,KPWSDATA+16         IN
         MVC   KPWSHEX4,KPWSDATA+24            SECTIONS
* TRANSLATE CHAR TO EBCDIC
         L     R8,KPWSCTRK        R8=COPY DSA
         MVC   KPWSCHAR,0(R8)     MOVE DATA
         CLI   KPWSMODE,C'E'      EBCDIC MODE ?
         BNE   KPWSASCI           EXIT IF NOT
         TR    KPWSCHAR,KPEBCWS   TRANSLATE TO EBCDIC
         MVC   EWKSMDEO,=CL6'EBCDIC' SET MODE
         B     KPWSBUMP           EXIT
*
KPWSASCI EQU   *
         TR    KPWSCHAR,KPASCWS   TRANSLATE TO EBCDIC
         MVC   EWKSMDEO,=CL6'ASCII' SET MODE
KPWSBUMP EQU   *
         AHI   R9,L'EWKSL01O+3    BUMP MAP POINTER
         ASI   KPWSLINE,1         COUNT LINES DONE
         CHSI  KPWSLINE,16        DONE 16 ?
         BE    KPWSSETK           EXIT IF WE HAVE
         ASI   KPWSCTRK,16        BUMP COPY TRACKER
         CLC   KPWSCTRK,KPWSCEND  DONE ALL DSA ?
         BE    KPWSDONE           EXIT IF WE HAVE
         ASI   KPWSRTRK,16        BUMP REAL TRACKER
         ASI   KPWSOTRK,16        BUMP OFFSET TRACKER
         B     KPWSLOOP           LOOP
*
KPWSDONE EQU   *
* CLEAR REMAINING LINES
         L     R14,KPWSLINE       R14=CURRENT LINE COUNT
KPWSCLLP EQU   *
         MVC   0(L'EWKSL01O,R9),=CL79' ' BLANK MAP LINE
         AHI   R14,1              COUNT LINES DONE
         CHI   R14,16             DONE 16 ?
         BE    KPWSSETK           EXIT IF WE HAVE
         AHI   R9,L'EWKSL01O+3    BUMP MAP POINTER
         B     KPWSCLLP           LOOP
*
KPWSSETK EQU   *
         CHSI  KPWSOFST,X'70'     CAN WE PAGE BACK HALF ?
         BNH   KPWSNTP7           EXIT IF NOT
         MVI   EWKSP7A,DFHBMASB   SHOW PF7
KPWSNTP7 EQU   *
         CHSI  KPWSLINE,9         CAN WE PAGE FORWARD HALF ?
         BNH   KPWSNTP8           EXIT IF NOT
         MVI   EWKSP8A,DFHBMASB   SHOW PF8
KPWSNTP8 EQU   *
         CHSI  KPWSOFST,X'F0'     CAN WE PAGE BACK FULL ?
         BNH   KPWSNTPA           EXIT IF NOT
         MVI   EWKSPAA,DFHBMASB   SHOW PF10
KPWSNTPA EQU   *
         CLC   KPWSCTRK,KPWSCEND  END OF DSA ENCOUNTERED ?
         BE    KPWSSEND           EXIT IF WE HAVE (NO PGE FORWARD FULL)
         L     R14,KPWSCDSA       R14=COPY ADDRESS OF TOP LINE
         AHI   R14,X'100'         + X'100'
         C     R14,KPWSCEND       IS LAST LINE END OF DSA ?
         BE    KPWSSEND           EXIT IF IT IS (NO PAGE FORWARD FULL)
         MVI   EWKSPBA,DFHBMASB   SHOW PF11
KPWSSEND EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDFWKS') ERASE
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KPWSDATA) LENGTH(KPWSLINE)
         CLI   KPWSDATA,DFHENTER  RETURN TO CURRENT DISPLAY ?
         BNE   KPWSNT7D           EXIT IF NOT
* ENTER PRESSED...REFRESH ORIGINAL DISPLAY
         MVI   INPUT,DFHCLEAR     SET FOR REFRESH
         L     R12,KPWSR12        RESTORE ORIGINAL BASE 1
         LA    R4,EDFRCVE         ADDRESS ORIGINAL MAP STRUCTURE
         JLU   OTHERPFK           EXIT TO RE-DISPLAY CURRENT SCREEN
*
KPWSNT7D EQU   *
         CLI   KPWSDATA,DFHPF2    SWITCH EBCDIC/ASCII ?
         BNE   KPWSNTF2           EXIT IF NOT
* PF2 PRESSED...SWITCH EBCDIC/ASCII
         CLI   KPWSMODE,C'E'      EBCDIC ?
         BNE   KPWSNTEC           EXIT IF NOT
         MVI   KPWSMODE,C'A'      SET ASCII
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTEC EQU   *
         MVI   KPWSMODE,C'E'      SET EBCDIC
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTF2 EQU   *
         CLI   KPWSDATA,DFHPF7    PAGE BACK HALF ?
         BNE   KPWSNTF7           EXIT IF NOT
* PF7 PRESSED...PAGE BACK HALF
         CLI   EWKSP7A,DFHBMASD   IS PF7 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,-X'80'          BACK OFF HALF
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,-X'80'          BACK OFF HALF
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,-X'80'          BACK OFF HALF
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTF7 EQU   *
         CLI   KPWSDATA,DFHPF8    PAGE FORWARD HALF ?
         BNE   KPWSNTF8           EXIT IF NOT
* PF8 PRESSED...PAGE FORWARD HALF
         CLI   EWKSP8A,DFHBMASD   IS PF8 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,X'80'           FORWARD HALF
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,X'80'           FORWARD HALF
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,X'80'           FORWARD HALF
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTF8 EQU   *
         CLI   KPWSDATA,DFHPF10   PAGE BACK FULL ?
         BNE   KPWSNTFA           EXIT IF NOT
* PF10 PRESSED...PAGE BACK FULL
         CLI   EWKSPAA,DFHBMASD   IS PF10 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,-X'100'         BACK FULL
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,-X'100'         BACK FULL
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,-X'100'         BACK FULL
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTFA EQU   *
         CLI   KPWSDATA,DFHPF11   PAGE FORWARD FULL ?
         BNE   KPWSRFSH           EXIT IF NOT
* PF11 PRESSED...PAGE FORWARD FULL
         CLI   EWKSPBA,DFHBMASD   IS PF11 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,X'100'          FORWARD FULL
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,X'100'          FORWARD FULL
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,X'100'          FORWARD FULL
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSR12  DS    AL4                SAVE ORIGINAL BASE 1
KPWSREAL DS    AL4                REAL DSA ADDRESS
KPWSCOPY DS    AL4                COPY DSA ADDRESS
KPWSUSER DS    AL4                REAL USER DSA ADDRESS
KPWSRDSA DS    AL4                REAL DSA ADDRESS OF TOP LINE
KPWSCDSA DS    AL4                COPY DSA ADDRESS OF TOP LINE
KPWSOFST DS    AL4                CURRENT DISPLAY OFFSET OF TOP LINE
KPWSCEND DS    AL4                BYTE AFTER END OF COPY DSA
KPWSRTRK DS    AL4                REAL TRACKER
KPWSCTRK DS    AL4                COPY TRACKER
KPWSOTRK DS    XL4                OFFSET TRACKER
KPWSLINE DS    XL4                LINE COUNTER
KPWSDATA DS    CL32               DSA SECTION
KPWSHED1 DC    C'CICS DSA @ 00000000/X''0000'''
         DC    CL3' '
KPWSHED2 DC    C'USER DSA @ 00000000/X''0000'''
         DC    CL3' '
KPWSHED3 DC    C'DSA LENGTH=X''0000'' '
KPWSMODE DC    C'E'               EBCDIC/ASCII
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
KPEBCWS  EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
KPASCWS  EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
KPHEXWS  DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         LTORG
*
         DROP  R12
*
DOCOND   DS    0F
* R5 POINTS TO CONDITION BYTE
* R7 POINTS TO MAP FIELD
         LARL  R15,CONDTAB        R15=CONDITION TABLE
DOCNDLP  EQU   *
         CLC   0(1,R5),0(R15)     GOT ONE ?
         JE    GOTCOND            EXIT IF WE HAVE
         AHI   R15,13             BUMP POINTER
         CLI   0(R15),X'FF'       END OF TABLE ?
         JNE   DOCNDLP            LOOP IF NOT
         DC    H'0'               ABEND, UNKNOWN CONDITION
GOTCOND  EQU   *
         MVC   0(12,R7),1(R15)    MOVE INTERPRETED CONDITION
         BR    R14                RETURN
*
CONDTAB  DS    0H
         DC    AL1(01),CL12'ERROR'
         DC    AL1(11),CL12'TERMIDERR'
         DC    AL1(12),CL12'FILENOTFOUND'
         DC    AL1(13),CL12'NOTFND'
         DC    AL1(14),CL12'DUPREC'
         DC    AL1(15),CL12'DUPKEY'
         DC    AL1(16),CL12'INVREQ'
         DC    AL1(17),CL12'IOERR'
         DC    AL1(18),CL12'NOSPACE'
         DC    AL1(19),CL12'NOTOPEN'
         DC    AL1(20),CL12'ENDFILE'
         DC    AL1(21),CL12'ILLOGIC'
         DC    AL1(22),CL12'LENGERR'
         DC    AL1(26),CL12'ITEMERR'
         DC    AL1(27),CL12'PGMIDERR'
         DC    AL1(28),CL12'TRANSIDERR'
         DC    AL1(29),CL12'ENDDATA'
         DC    AL1(31),CL12'EXPIRED'
         DC    AL1(36),CL12'MAPFAIL'
         DC    AL1(38),CL12'INVMPSZ'
         DC    AL1(40),CL12'OVERFLOW'
         DC    AL1(44),CL12'QIDERR'
         DC    AL1(55),CL12'ENQBUSY'
         DC    AL1(56),CL12'ENVDEFERR'
         DC    AL1(61),CL12'NOTALLOC'
         DC    AL1(83),CL12'END'
         DC    AL1(84),CL12'DISABLED'
         DC    X'FF'              STOPPER
*
DOAID    DS    0F
* R5 POINTS TO AID BYTE
* R7 POINTS TO MAP FIELD
         LARL  R15,AIDTAB         R15=AID TABLE
DOAIDLP  EQU   *
         CLC   0(1,R5),0(R15)     GOT ONE ?
         JE    GOTAID             EXIT IF WE HAVE
         AHI   R15,7              BUMP POINTER
         CLI   0(R15),X'FF'       END OF TABLE ?
         JNE   DOAIDLP            LOOP IF NOT
         DC    H'0'               ABEND, UNKNOWN AID
GOTAID   EQU   *
         MVC   0(6,R7),1(R15)     MOVE INTERPRETED AID
         BR    R14                RETURN
*
AIDTAB   DS    0H
         DC    AL1(01),C'ANYKEY'
         DC    AL1(02),C'ENTER '
         DC    AL1(03),C'CLEAR '
         DC    AL1(04),C'PA1   '
         DC    AL1(05),C'PA2   '
         DC    AL1(06),C'PA3   '
         DC    AL1(07),C'PF1   '
         DC    AL1(08),C'PF2   '
         DC    AL1(09),C'PF3   '
         DC    AL1(10),C'PF4   '
         DC    AL1(11),C'PF5   '
         DC    AL1(12),C'PF6   '
         DC    AL1(13),C'PF7   '
         DC    AL1(14),C'PF8   '
         DC    AL1(15),C'PF9   '
         DC    AL1(16),C'PF10  '
         DC    AL1(17),C'PF11  '
         DC    AL1(18),C'PF12  '
         DC    AL1(19),C'PF13  '
         DC    AL1(20),C'PF14  '
         DC    AL1(21),C'PF15  '
         DC    AL1(22),C'PF16  '
         DC    AL1(23),C'PF17  '
         DC    AL1(24),C'PF18  '
         DC    AL1(25),C'PF19  '
         DC    AL1(26),C'PF20  '
         DC    AL1(27),C'PF21  '
         DC    AL1(28),C'PF22  '
         DC    AL1(29),C'PF23  '
         DC    AL1(30),C'PF24  '
         DC    X'FF'              STOPPER
*
         COPY  DFHAID
         COPY  DFHBMSCA
         TN3270 SYMBOLS
*
EDFMAPS  DSECT
         COPY  MAPEDF
*
KPWSMAP  DSECT
*@--ADDR-- OFFSET 00000000 00000000 00000000 00000000  XXXXXXXXXXXXXXXX
KPWSADD  DS    CL8
         DS    X
KPWSOFF  DS    CL6
         DS    X
KPWSHEX1 DS    CL8
         DS    X
KPWSHEX2 DS    CL8
         DS    X
KPWSHEX3 DS    CL8
         DS    X
KPWSHEX4 DS    CL8
         DS    XL2
KPWSCHAR DS    CL16
*
* REGISTER USAGE
*    R3  : INITIAL PROGRAM BASE 2
*    R4  : BASE FOR MAP STRUCTURES
*    R6  : BASE FOR KEY PROCESSING ROUTINES
*    R12 : INITIAL PROGRAM BASE 1
*          BASE FOR WORKING STORAGE SUBROUTINE
         END
